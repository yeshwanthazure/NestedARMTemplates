{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "factoryName": {
            "type": "string",
            "metadata": "Data Factory name",
            "defaultValue": "RNLADFNDPPROD"
        },
        "trg-sp-Cultivator_properties_pip-master-powerbi-storedprocedure-crmsynapse_parameters_group_name": {
            "type": "string",
            "defaultValue": "Cultivator"
        },
        "trg-sp-Cultivator_properties_pip-master-powerbi-storedprocedure-crmsynapse_parameters_exclude_group_dependency": {
            "type": "string",
            "defaultValue": "true"
        },
        "trg-sp-Email_peformance_AC_Survey_Result_properties_pip-master-powerbi-storedprocedure-crmsynapse_parameters_group_name": {
            "type": "string",
            "defaultValue": "Email_peformance_AC_Survey_Result"
        },
        "trg-sp-Email_peformance_AC_Survey_Result_properties_pip-master-powerbi-storedprocedure-crmsynapse_parameters_exclude_group_dependency": {
            "type": "string",
            "defaultValue": "true"
        }
    },
    "variables": {
        "factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
    },
    "resources": [
        {
            "name": "[concat(parameters('factoryName'), '/pip-copy-sftpnames-to-account')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy data1",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "ExcelSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                }
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "truncate table lkp.account",
                                "writeBehavior": "insert",
                                "sqlWriterUseTableLock": false,
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "Active Accounts",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "accountname",
                                            "type": "String",
                                            "physicalType": "varchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "SFTP folder name",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "folder",
                                            "type": "String",
                                            "physicalType": "varchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "subfolder",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "subfolder",
                                            "type": "String",
                                            "physicalType": "varchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Account ID",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "accountid",
                                            "type": "String",
                                            "physicalType": "varchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "status",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "status",
                                            "type": "String",
                                            "physicalType": "varchar"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "Excel1",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "account",
                                    "schemaname": "lkp",
                                    "az_server_name": "rnlndpprodazsql01.database.windows.net",
                                    "az_sql_db": "NDPPRODSQLDB"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "Datalanding"
                },
                "annotations": [],
                "lastPublishTime": "2022-09-04T19:46:16Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-crm-to-crmsynapse-powerbi-load')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Entities based on IsActive",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Load Start Date",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "sqlReaderQuery": "SELECT      [id] as [Id]\n           ,[seq_no] as [SeqNo]\n           ,[src_object_type] as [SrcObjectType]\n           ,[src_object_name] as [SrcObjectName]\n           ,[primary_key] as [PrimaryKey]\n           ,[source_delta_column] as [SourceDeltaColumn]\n           ,[cdc_key] as [CDC_Key]\n           ,[schema] as [Schema]\n           ,[destination_table_name] as [DestinationTableName]\n           ,[container] as [Container]\n           ,[file_path] as [FilePath]\n           ,[is_active] as [IsActive]\n           ,[load_type] as [LoadType]\n           ,[last_load_date] as [LastLoadDate]\n           ,[last_success_date] as [LastSuccessDate]\n           ,[last_load_status] as [LastLoadStatus]\n\t\t   ,stg_object_name\nFROM config.crm_to_ads where powerbi_is_active = 1\nORDER BY  seq_no ASC",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_crmsynapse",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Tablename": "''",
                                    "az_synapse_crm_server": {
                                        "value": "@pipeline().parameters.az_synapse_crm_server",
                                        "type": "Expression"
                                    },
                                    "az_synapse_crm_db": {
                                        "value": "@pipeline().parameters.az_synapse_crm_db",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "ForEach Entity",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Entities based on IsActive",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Entities based on IsActive').output.value",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 3,
                            "activities": [
                                {
                                    "name": "Execute-inside-for-each-entity",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pip-inside-for-each-entity-crmsynapse-powerbi-load",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "DestinationTableName": {
                                                "value": "@item().DestinationTableName",
                                                "type": "Expression"
                                            },
                                            "stg_table_name": {
                                                "value": "@item().stg_object_name",
                                                "type": "Expression"
                                            },
                                            "FilePath": {
                                                "value": "@item().FilePath",
                                                "type": "Expression"
                                            },
                                            "PrimaryKey": {
                                                "value": "@item().PrimaryKey",
                                                "type": "Expression"
                                            },
                                            "CDC_Key": {
                                                "value": "@item().CDC_Key",
                                                "type": "Expression"
                                            },
                                            "Schema": {
                                                "value": "@item().Schema",
                                                "type": "Expression"
                                            },
                                            "SourceTableName": {
                                                "value": "@item().SrcObjectName",
                                                "type": "Expression"
                                            },
                                            "SrcObjectType": {
                                                "value": "@item().SrcObjectType",
                                                "type": "Expression"
                                            },
                                            "LoadType": {
                                                "value": "@item().LoadType",
                                                "type": "Expression"
                                            },
                                            "SourceDeltaColumn": {
                                                "value": "@item().SourceDeltaColumn",
                                                "type": "Expression"
                                            },
                                            "LastSuccessDate": {
                                                "value": "@item().LastSuccessDate",
                                                "type": "Expression"
                                            },
                                            "SrcObjectName": {
                                                "value": "@item().SrcObjectName",
                                                "type": "Expression"
                                            },
                                            "Id": {
                                                "value": "@item().Id",
                                                "type": "Expression"
                                            },
                                            "Load_Start_Date": {
                                                "value": "@variables('Load_Start_Date')",
                                                "type": "Expression"
                                            },
                                            "parent_run_id": {
                                                "value": "@pipeline().parameters.parent_run_id",
                                                "type": "Expression"
                                            },
                                            "crm_servername": {
                                                "value": "@pipeline().parameters.crm_servername",
                                                "type": "Expression"
                                            },
                                            "crm_dbname": {
                                                "value": "@pipeline().parameters.crm_dbname",
                                                "type": "Expression"
                                            },
                                            "crm_username": {
                                                "value": "@pipeline().parameters.crm_username",
                                                "type": "Expression"
                                            },
                                            "vaulturl": {
                                                "value": "@pipeline().parameters.vaulturl",
                                                "type": "Expression"
                                            },
                                            "storageaccountname": {
                                                "value": "@pipeline().parameters.storageaccountname",
                                                "type": "Expression"
                                            },
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "az_sql_server_name": {
                                                "value": "@pipeline().parameters.az_sql_server_name",
                                                "type": "Expression"
                                            },
                                            "az_sql_db_name": {
                                                "value": "@pipeline().parameters.az_sql_db_name",
                                                "type": "Expression"
                                            },
                                            "az_synapse_crm_server": {
                                                "value": "@pipeline().parameters.az_synapse_crm_server",
                                                "type": "Expression"
                                            },
                                            "az_synapse_crm_db": {
                                                "value": "@pipeline().parameters.az_synapse_crm_db",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Load Start Date",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "Load_Start_Date",
                            "value": {
                                "value": "@string(utcnow())",
                                "type": "Expression"
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "parent_run_id": {
                        "type": "string"
                    },
                    "crm_servername": {
                        "type": "string"
                    },
                    "crm_dbname": {
                        "type": "string"
                    },
                    "crm_username": {
                        "type": "string"
                    },
                    "vaulturl": {
                        "type": "string"
                    },
                    "storageaccountname": {
                        "type": "string"
                    },
                    "databricks_workspace_url": {
                        "type": "string"
                    },
                    "databricks_clusterid": {
                        "type": "string"
                    },
                    "az_sql_server_name": {
                        "type": "string"
                    },
                    "az_sql_db_name": {
                        "type": "string"
                    },
                    "az_synapse_crm_server": {
                        "type": "string"
                    },
                    "az_synapse_crm_db": {
                        "type": "string"
                    }
                },
                "variables": {
                    "DestinationTableName": {
                        "type": "String"
                    },
                    "Container": {
                        "type": "String"
                    },
                    "FilePath": {
                        "type": "String"
                    },
                    "PrimaryKey": {
                        "type": "String"
                    },
                    "CDC_Key": {
                        "type": "String"
                    },
                    "Schema": {
                        "type": "String"
                    },
                    "SourceTableName": {
                        "type": "String"
                    },
                    "Source_Row_Count": {
                        "type": "String"
                    },
                    "Target_Row_Count": {
                        "type": "String"
                    },
                    "Rejected_Row_Count": {
                        "type": "String"
                    },
                    "Data_Flow_Name": {
                        "type": "String"
                    },
                    "Load_Start_Date": {
                        "type": "String"
                    },
                    "Load_End_Date": {
                        "type": "String"
                    },
                    "Delta_Load_Date": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "crm-To-Crmsynapse-Powerbi"
                },
                "annotations": [],
                "lastPublishTime": "2022-09-08T03:31:41Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-em-data-enrichment-master_EMScoring_Melissa_Parallel_1')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Start ETL Audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "504",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Started",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "END ETL Audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "SP - Alignment History Sync MD Success",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "505",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Completed",
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Get Response Ids",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Start ETL Audit",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "\nDelete from config.Enrichment_Melissa \nwhere Response_id not in (Select Distinct response_id \n\t\t\t\t\t\t\tfrom alignment.customer_address_base (nolock)\n\t\t\t\t\t\t\twhere response_id in (Select Distinct response_id \n\t\t\t\t\t\t\t\t\t\t\t\tfrom config.Enrichment_Melissa\n\t\t\t\t\t\t\t\t\t\t\t\twhere Pipeline_Parallel = 1\n\t\t\t\t\t\t\t\t\t\t\t\t )\n\t\t\t\t\t\t\tand md_flag = 'DIA Approved'\n\t\t\t\t\t\t  ) \nand Pipeline_Parallel = 1\n\nSelect Distinct Response_id from config.Enrichment_Melissa where Pipeline_Parallel = 1",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "Enrichment_Melissa",
                                    "schemaname": "dbo",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.az_server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.az_database_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Melissa Enrichment Loop",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get Response Ids",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Response Ids').output.value",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 5,
                            "activities": [
                                {
                                    "name": "Melissa Pipeline",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pip-em-melissa-addressenrichment-EMScoring_Parallel_1",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_server_name",
                                                "type": "Expression"
                                            },
                                            "az_database_name": {
                                                "value": "@pipeline().parameters.az_database_name",
                                                "type": "Expression"
                                            },
                                            "response_id": {
                                                "value": "@item().response_id",
                                                "type": "Expression"
                                            },
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "END ETL Audit_copy1",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "SP - Alignment History Sync MD Failure",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "506",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Failed",
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "SP - Alignment History Sync MD Success",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Melissa Enrichment Loop",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 360,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[usp_DE_Update_EmScoring_Parallel]",
                            "storedProcedureParameters": {
                                "Enrichment": {
                                    "value": "Melissa",
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_AzureSqlDB",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "az_server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "az_sql_db": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "SP - Alignment History Sync MD Failure",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Melissa Enrichment Loop",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 360,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[usp_DE_Update_EmScoring_Parallel]",
                            "storedProcedureParameters": {
                                "Enrichment": {
                                    "value": "Melissa",
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_AzureSqlDB",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "az_server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "az_sql_db": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "concurrency": 1,
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "databricks_workspace_url": {
                        "type": "string"
                    },
                    "databricks_clusterid": {
                        "type": "string"
                    },
                    "vault_url": {
                        "type": "string"
                    },
                    "az_server_name": {
                        "type": "string"
                    },
                    "az_database_name": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Dataenrichment/Master Enrichments"
                },
                "annotations": [],
                "lastPublishTime": "2022-12-01T23:16:44Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-em-data-enrichment-master_EMScoring_Melissa_Parallel_2')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Start ETL Audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "504",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Started",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "END ETL Audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "SP - Alignment History Sync MD Success",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "505",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Completed",
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Get Response Ids",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Start ETL Audit",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "Delete from config.Enrichment_Melissa \nwhere Response_id not in (Select Distinct response_id \n\t\t\t\t\t\t\tfrom alignment.customer_address_base (nolock)\n\t\t\t\t\t\t\twhere response_id in (Select Distinct response_id \n\t\t\t\t\t\t\t\t\t\t\t\tfrom config.Enrichment_Melissa\n\t\t\t\t\t\t\t\t\t\t\t\twhere Pipeline_Parallel = 2\n\t\t\t\t\t\t\t\t\t\t\t\t )\n\t\t\t\t\t\t\tand md_flag = 'DIA Approved'\n\t\t\t\t\t\t  ) \nand Pipeline_Parallel = 2\n\nSelect Distinct Response_id from config.Enrichment_Melissa where Pipeline_Parallel = 2",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "Enrichment_Melissa",
                                    "schemaname": "dbo",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.az_server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.az_database_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Melissa Enrichment Loop",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get Response Ids",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Response Ids').output.value",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 5,
                            "activities": [
                                {
                                    "name": "Melissa Pipeline",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pip-em-melissa-addressenrichment-EMScoring_Parallel_2",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_server_name",
                                                "type": "Expression"
                                            },
                                            "az_database_name": {
                                                "value": "@pipeline().parameters.az_database_name",
                                                "type": "Expression"
                                            },
                                            "response_id": {
                                                "value": "@item().response_id",
                                                "type": "Expression"
                                            },
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "SP - Alignment History Sync MD Success",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Melissa Enrichment Loop",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 360,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[usp_DE_Update_EmScoring_Parallel_2]",
                            "storedProcedureParameters": {
                                "Enrichment": {
                                    "value": "Melissa",
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_AzureSqlDB",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "az_server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "az_sql_db": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "SP - Alignment History Sync MD Failure",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Melissa Enrichment Loop",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 360,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[usp_DE_Update_EmScoring_Parallel_2]",
                            "storedProcedureParameters": {
                                "Enrichment": {
                                    "value": "Melissa",
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_AzureSqlDB",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "az_server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "az_sql_db": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "END ETL Audit_copy1",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "SP - Alignment History Sync MD Failure",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "506",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Failed",
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "concurrency": 1,
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "databricks_workspace_url": {
                        "type": "string",
                        "defaultValue": "https://adb-6587840185446536.16.azuredatabricks.net"
                    },
                    "databricks_clusterid": {
                        "type": "string",
                        "defaultValue": "0714-203005-9conw1v0"
                    },
                    "vault_url": {
                        "type": "string",
                        "defaultValue": "https://rnlndp-prodkeyvault.vault.azure.net/"
                    },
                    "az_server_name": {
                        "type": "string",
                        "defaultValue": "rnlndpprodazsql01.database.windows.net"
                    },
                    "az_database_name": {
                        "type": "string",
                        "defaultValue": "NDPPRODSQLDB"
                    }
                },
                "folder": {
                    "name": "Dataenrichment/Master Enrichments"
                },
                "annotations": [],
                "lastPublishTime": "2022-12-01T23:16:44Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-em-data-enrichment-master_EMScoring_Melissa')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Start ETL Audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "504",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Started",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "END ETL Audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "Audit_Query-Data Enrichment Success",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "505",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Completed",
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Get Response Ids",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Start ETL Audit",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "Drop table if exists #GetResponseId\nSelect drv.response_id , MD_cnt\ninto #GetResponseId\nfrom (\nSelect count(*) MD_cnt\n,md_flag\n,a.modified_fileName\n,trim(a.response_id) as response_id \nfrom alignment.customer_address_base a (nolock)\njoin  alignment.contactbase b (nolock)\non a.response_id = b.response_id\nand a.source_key = b.source_key\njoin (Select distinct response_id,modified_filename, purpose_name from audit.file_metadata) c\non trim(a.response_id) = trim(c.response_id)\nwhere md_flag = 'DIA Approved' \nand b.crm_flag = 2\nand c.purpose_name = 'EM Scoring'\ngroup by a.modified_fileName, md_flag , a.response_id\n) Drv join audit.dia_manual b on Drv.response_id = b.response_id\njoin audit.ADS_Reference_Log c on Drv.response_id = c.response_id\nwhere Process_Layer = 'Enrichment'\nand dia_status = 'DE_Started'\nand Enrichment <> 1\n\nDrop table if exists #GetResponseId_Final\n\nSelect top 3 response_id into #GetResponseId_Final from #GetResponseId \nwhere response_id not in (Select response_id from config.Enrichment_Melissa)\nOrder by MD_cnt\n\nInsert into #GetResponseId_Final\nSelect top 2 response_id \nfrom #GetResponseId \nwhere response_id not in (Select response_id from config.Enrichment_Melissa)\nOrder by MD_cnt desc\n\nSelect distinct response_id from #GetResponseId_Final",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "Enrichment_Melissa",
                                    "schemaname": "dbo",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.az_server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.az_database_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Melissa Enrichment Loop",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get Response Ids",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Response Ids').output.value",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 5,
                            "activities": [
                                {
                                    "name": "Melissa Pipeline",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pip-em-melissa-addressenrichment-EMScoring",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_server_name",
                                                "type": "Expression"
                                            },
                                            "az_database_name": {
                                                "value": "@pipeline().parameters.az_database_name",
                                                "type": "Expression"
                                            },
                                            "response_id": {
                                                "value": "@item().response_id",
                                                "type": "Expression"
                                            },
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "SP - Alignment History Sync MD Success",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Melissa Enrichment Loop",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 360,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[usp_DE_Update_EmScoring]",
                            "storedProcedureParameters": {
                                "Enrichment": {
                                    "value": "Melissa",
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_AzureSqlDB",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "az_server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "az_sql_db": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Query-Data Enrichment Success",
                        "description": "Fetching details from customer_address_base for Audit insert",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "SP - Alignment History Sync MD Success",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "DROP TABLE IF EXISTS #temp\nselect distinct  response_id\n                ,mapping_id\n                ,account_name\n                ,modified_fileName\n                --,max(md_received_date) as max_md_received_date\n                ,count(*) RecordCount\n                ,md_flag\nINTO #temp\nfrom alignment.customer_address_base a\n--where md_flag in ('Enriched','Not Enriched')\nwhere md_flag not in ('No Enrichment')\nand not exists (Select 'X' from audit.dia_manual b\n                where a.response_id = b.response_id\n                and a.mapping_id = b.mapping_id\n                and Process_Layer = 'Enrichment'\n                and dia_status = 'DE_Completed')\ngroup by response_id, mapping_id, account_name, modified_fileName,md_flag\n\nMERGE audit.data_Enrichment AS TARGET\nUSING #temp AS SOURCE\nON TARGET.response_id = SOURCE.response_id\nAnd TARGET.mapping_id = SOURCE.mapping_id\nAND TARGET.flags = SOURCE.md_flag\nWHEN MATCHED AND TARGET.Count_MD <> SOURCE.RecordCount\nTHEN UPDATE SET TARGET.Count_MD = SOURCE.RecordCount\nWHEN NOT MATCHED BY TARGET \nTHEN INSERT (response_id\n            ,mapping_id\n            ,account_name\n            ,modified_fileName\n            ,table_name\n            ,process_layer\n            ,count_MD\n            ,flags\n            ,placed_by\n            ,actions_taken\n            ,insert_datetime\n            ,insert_by)\nVALUES (    \n             SOURCE.response_id\n             ,SOURCE.mapping_id\n             ,SOURCE.account_name\n             ,SOURCE.modified_fileName\n             ,'customer_address_base'\n             ,'Enrichment'\n             ,SOURCE.RecordCount\n             ,SOURCE.md_flag\n             ,'External Platform'\n             ,'Enrichment'\n             ,format(getdate(),'yyyy-MM-dd HH:mm:ss')\n             ,'Melissa Pipeline');\n\nSELECT 1",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "customer_address_base",
                                    "schemaname": "alignment",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.az_server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.az_database_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "SP - Alignment History Sync MD Failure",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Melissa Enrichment Loop",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 360,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[usp_DE_Update_EmScoring]",
                            "storedProcedureParameters": {
                                "Enrichment": {
                                    "value": "Melissa",
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_AzureSqlDB",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "az_server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "az_sql_db": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Query-Data Enrichment Failure",
                        "description": "Fetching details from customer_address_base for Audit insert",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "SP - Alignment History Sync MD Failure",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "DROP TABLE IF EXISTS #temp\nselect distinct  response_id\n                ,mapping_id\n                ,account_name\n                ,modified_fileName\n                --,max(md_received_date) as max_md_received_date\n                ,count(*) RecordCount\n                ,md_flag\nINTO #temp\nfrom alignment.customer_address_base a\n--where md_flag in ('Enriched','Not Enriched')\nwhere md_flag not in ('No Enrichment')\nand not exists (Select 'X' from audit.dia_manual b\n                where a.response_id = b.response_id\n                and a.mapping_id = b.mapping_id\n                and Process_Layer = 'Enrichment'\n                and dia_status = 'DE_Completed')\ngroup by response_id, mapping_id, account_name, modified_fileName,md_flag\n\nMERGE audit.data_Enrichment AS TARGET\nUSING #temp AS SOURCE\nON TARGET.response_id = SOURCE.response_id\nAnd TARGET.mapping_id = SOURCE.mapping_id\nAND TARGET.flags = SOURCE.md_flag\nWHEN MATCHED AND TARGET.Count_MD <> SOURCE.RecordCount\nTHEN UPDATE SET TARGET.Count_MD = SOURCE.RecordCount\nWHEN NOT MATCHED BY TARGET \nTHEN INSERT (response_id\n            ,mapping_id\n            ,account_name\n            ,modified_fileName\n            ,table_name\n            ,process_layer\n            ,count_MD\n            ,flags\n            ,placed_by\n            ,actions_taken\n            ,insert_datetime\n            ,insert_by)\nVALUES (    \n             SOURCE.response_id\n             ,SOURCE.mapping_id\n             ,SOURCE.account_name\n             ,SOURCE.modified_fileName\n             ,'customer_address_base'\n             ,'Enrichment'\n             ,SOURCE.RecordCount\n             ,SOURCE.md_flag\n             ,'External Platform'\n             ,'Enrichment'\n             ,format(getdate(),'yyyy-MM-dd HH:mm:ss')\n             ,'Melissa Pipeline');\n\nSELECT 1",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "customer_address_base",
                                    "schemaname": "alignment",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.az_server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.az_database_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "END ETL Audit_copy1",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "Audit_Query-Data Enrichment Failure",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "506",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Failed",
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "databricks_workspace_url": {
                        "type": "string"
                    },
                    "databricks_clusterid": {
                        "type": "string"
                    },
                    "vault_url": {
                        "type": "string"
                    },
                    "az_server_name": {
                        "type": "string"
                    },
                    "az_database_name": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Dataenrichment/Master Enrichments"
                },
                "annotations": [],
                "lastPublishTime": "2022-11-14T01:15:52Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-data-archive')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "get_file_count",
                        "description": "Get the file count ",
                        "type": "Script",
                        "dependsOn": [
                            {
                                "activity": "stored_procedure_sp_get_response_id",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "linkedServiceName": {
                            "referenceName": "ls_AzureSqlDB",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "az_server_name": "rnlndpprodazsql01.database.windows.net",
                                "az_sql_db": "NDPPRODSQLDB"
                            }
                        },
                        "typeProperties": {
                            "scripts": [
                                {
                                    "type": "Query",
                                    "text": "select count(*) as count from dbo.stg_response_id"
                                }
                            ]
                        }
                    },
                    {
                        "name": "If Condition1",
                        "description": "Check if file count is greater than zero",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "get_file_count",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@greater(activity('get_file_count').output.resultSets[0].rows[0].count,0)",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "false",
                                    "type": "Wait",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "waitTimeInSeconds": 1
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "archive_staging",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [
                                        {
                                            "activity": "start_file_audit",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pip-archive-staging-alignemnt-data",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "azure_sql_server_name": {
                                                "value": "@pipeline().parameters.azure_sql_server_name",
                                                "type": "Expression"
                                            },
                                            "azure_sql_database_name": {
                                                "value": "@pipeline().parameters.azure_sql_database_name",
                                                "type": "Expression"
                                            },
                                            "az_synapse_crm_server": {
                                                "value": "@pipeline().parameters.az_synapse_crm_server",
                                                "type": "Expression"
                                            },
                                            "az_synapse_crm_db": {
                                                "value": "@pipeline().parameters.az_synapse_crm_db",
                                                "type": "Expression"
                                            },
                                            "storageaccountname": {
                                                "value": "@pipeline().parameters.storage_account_name",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "start_file_audit",
                                    "type": "Script",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "linkedServiceName": {
                                        "referenceName": "ls_AzureSqlDB",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "az_server_name": "rnlndpprodazsql01.database.windows.net",
                                            "az_sql_db": "NDPPRODSQLDB"
                                        }
                                    },
                                    "typeProperties": {
                                        "scripts": [
                                            {
                                                "type": "Query",
                                                "text": {
                                                    "value": "@concat('insert into audit.file_processing_log (audit_id,adf_run_id,response_id,mapping_id,purpose_file_name,account_name,file_processing_stage,status) \nselect 1404,''',pipeline().parameters.parent_run_id,''', response_id,mapping_id,purpose_name,account_name,''File Archive'',''Started'' from dbo.stg_response_id')",
                                                    "type": "Expression"
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "end_file_audit",
                                    "type": "Script",
                                    "dependsOn": [
                                        {
                                            "activity": "archive_staging",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "linkedServiceName": {
                                        "referenceName": "ls_AzureSqlDB",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "az_server_name": "rnlndpprodazsql01.database.windows.net",
                                            "az_sql_db": "NDPPRODSQLDB"
                                        }
                                    },
                                    "typeProperties": {
                                        "scripts": [
                                            {
                                                "type": "Query",
                                                "text": {
                                                    "value": "@concat('insert into audit.file_processing_log (audit_id,adf_run_id,response_id,mapping_id,purpose_file_name,account_name,file_processing_stage,status) \nselect 1405,''',pipeline().parameters.parent_run_id,''', response_id,mapping_id,purpose_name,account_name,''File Archive'',''Completed'' from dbo.stg_response_id')",
                                                    "type": "Expression"
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "failed_file_audit",
                                    "type": "Script",
                                    "dependsOn": [
                                        {
                                            "activity": "archive_staging",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "linkedServiceName": {
                                        "referenceName": "ls_AzureSqlDB",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "az_server_name": "rnlndpprodazsql01.database.windows.net",
                                            "az_sql_db": "NDPPRODSQLDB"
                                        }
                                    },
                                    "typeProperties": {
                                        "scripts": [
                                            {
                                                "type": "Query",
                                                "text": {
                                                    "value": "@concat('insert into audit.file_processing_log (audit_id,adf_run_id,response_id,mapping_id,purpose_file_name,account_name,file_processing_stage,status) \nselect 1406,''',pipeline().parameters.parent_run_id,''', response_id,mapping_id,purpose_name,account_name,''File Archive'',''Failed'' from dbo.stg_response_id')",
                                                    "type": "Expression"
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "stored_procedure_sp_get_response_id",
                        "description": "execute stored procedure dbo.sp_get_response_id to get list of response id",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "fpuls_scored",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[sp_get_response_id]"
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_AzureSqlDB",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "az_server_name": "rnlndpprodazsql01.database.windows.net",
                                "az_sql_db": "NDPPRODSQLDB"
                            }
                        }
                    },
                    {
                        "name": "fpuls_scored",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "sqlReaderQuery": "select distinct trim(responseid) as response_id\r\nfrom fplus.customerorder\r\nwhere (OrderStatusID='7D0EDF68-3EDF-EB11-A81B-000D3AF522D6' or OrderStatusID='D26830EE-8CC3-EB11-A81A-000D3AF522D6')",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "truncate table dbo.stg_response_id_fplus_scored",
                                "writeBehavior": "insert",
                                "sqlWriterUseTableLock": false,
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "response_id",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "response_id",
                                            "type": "String",
                                            "physicalType": "varchar"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ds_fplus_azuresynapse",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "po_fpluscustomerorderbase",
                                    "schemaname": "dbo",
                                    "az_synapse_crm_server": {
                                        "value": "@pipeline().parameters.az_synapse_crm_server",
                                        "type": "Expression"
                                    },
                                    "az_synapse_crm_db": {
                                        "value": "@pipeline().parameters.az_synapse_crm_db",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "stg_response_id_fplus_scored",
                                    "schemaname": "dbo",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.azure_sql_server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.azure_sql_database_name",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "parent_run_id": {
                        "type": "string"
                    },
                    "azure_sql_server_name": {
                        "type": "string"
                    },
                    "azure_sql_database_name": {
                        "type": "string"
                    },
                    "az_synapse_crm_server": {
                        "type": "string"
                    },
                    "az_synapse_crm_db": {
                        "type": "string"
                    },
                    "storage_account_name": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "data-Archive"
                },
                "annotations": [],
                "lastPublishTime": "2022-12-06T04:32:33Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-finalextract-to-sftp_azure')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Lookup - CustomerOrder",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "sqlReaderQuery": {
                                    "value": "SELECT distinct co.FqtOrderID,co.OrderStatusID,cs.OrderStatusDesc,om.accountid,sd.accountname\n,sd.generatecampusreport,sd.safemail,sd.CampusSFTPPath,sd.ModelType,sd.CampusFileName,sd.CampusReportQuery\n,sd.CampusFileType,sd.GenerateCSDReport,sd.CSDSFTPPath,sd.CSDFileName,sd.CSDReportQuery,sd.CSDFileType,sd.CSDEmailRecipients\n,co.uploadDetailId,co.scoredate\nFROM  fplus.CustomerOrder co\nINNER JOIN [fplus].[CustomerOrderStatus] cs ON cs.OrderStatusID = co.OrderStatusID\nINNER JOIN fplus.orgmodel om ON om.FqtOrgModelId = co.FqtOrgModelId\nINNER JOIN [fplus].[SFTPDetails] sd ON sd.accountid=om.AccountID  AND om.ModelType=sd.ModelType \nand cs.OrderStatusDesc='Awaiting Extraction' \nAND co.FqtOrderID IN ('2FCBD77F-1B33-ED11-A86B-000D3A075A33')",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_synapse_Dynamic",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Syn_Schema": "fplus",
                                    "Syn_Table": "CustomerOrder",
                                    "az_synapse_crm_server": {
                                        "value": "@pipeline().parameters.az_synapse_crm_server",
                                        "type": "Expression"
                                    },
                                    "az_synapse_crm_db": {
                                        "value": "@pipeline().parameters.az_synapse_crm_db",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "ForEach - OrderID",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Lookup - CustomerOrder",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Lookup - CustomerOrder').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "EntryTerm",
                                    "type": "Lookup",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "SqlDWSource",
                                            "sqlReaderQuery": {
                                                "value": "select distinct String_Agg( entry_term,'_') within group (order by entry_term) as entryterm \nfrom (SELECT distinct Cast(substring(entry_term,1,2) as NVARCHAR(max)) as entry_term\nfrom fplus.student_finalver where uploaddetailid = @{item().uploaddetailid}\nand entry_term is not null and entry_term <>' ' ) brv\n",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "ds_synapse_Dynamic",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "Syn_Schema": "fplus",
                                                "Syn_Table": "student_finalver",
                                                "az_synapse_crm_server": {
                                                    "value": "@pipeline().parameters.az_synapse_crm_server",
                                                    "type": "Expression"
                                                },
                                                "az_synapse_crm_db": {
                                                    "value": "@pipeline().parameters.az_synapse_crm_db",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "firstRowOnly": false
                                    }
                                },
                                {
                                    "name": "Set csdFileName",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "Set EntryTerm",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "csdFileName",
                                        "value": {
                                            "value": "@replace(\n         replace(\n                 replace(item().csdFileName,'uploaddetailid',item().uploaddetailid),\n                 'entryterm',variables('EntryTerm')\n                 ),\n        'mmddyyyy',formatDateTime(utcnow(),'MMddyyyy')\n        )",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Set EntryTerm",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "EntryTerm",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "EntryTerm",
                                        "value": {
                                            "value": "@activity('EntryTerm').output.value[0].entryterm",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Set campusFileName",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "Set EntryTerm",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "campusFileName",
                                        "value": {
                                            "value": "@replace(\n         replace(\n                 replace(item().campusFileName,'uploaddetailid',item().uploaddetailid),\n                 'entryterm',variables('EntryTerm')\n                 ),\n        'mmddyyyy',formatDateTime(utcnow(),'MMddyyyy')\n        )",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Generate Campus Report - UNC",
                                    "type": "Copy",
                                    "dependsOn": [
                                        {
                                            "activity": "Set campusFileName",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "SqlDWSource",
                                            "sqlReaderQuery": {
                                                "value": "@replace(item().CampusReportQuery,'?',item().uploaddetailid)",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "sink": {
                                            "type": "DelimitedTextSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextWriteSettings",
                                                "quoteAllText": true,
                                                "fileExtension": ".txt"
                                            }
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "typeConversion": true,
                                            "typeConversionSettings": {
                                                "allowDataTruncation": true,
                                                "treatBooleanAsNumber": false
                                            }
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "ds_synapse_Dynamic",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "Syn_Schema": "fplus",
                                                "Syn_Table": "student_finalver",
                                                "az_synapse_crm_server": {
                                                    "value": "@pipeline().parameters.az_synapse_crm_server",
                                                    "type": "Expression"
                                                },
                                                "az_synapse_crm_db": {
                                                    "value": "@pipeline().parameters.az_synapse_crm_db",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "ds_adls_output",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "ContainerName": "prodcrmsynapse",
                                                "FilePath": {
                                                    "value": "@concat('f+/UNC',pipeline().parameters.UncPath)",
                                                    "type": "Expression"
                                                },
                                                "FileName": {
                                                    "value": "@variables('campusFileName')",
                                                    "type": "Expression"
                                                },
                                                "storageaccountname": {
                                                    "value": "@pipeline().parameters.storageaccountname",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "Campus Report - UNC to SFTP",
                                    "type": "Copy",
                                    "dependsOn": [
                                        {
                                            "activity": "Generate Campus Report - UNC",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "DelimitedTextSource",
                                            "storeSettings": {
                                                "type": "AzureBlobFSReadSettings",
                                                "recursive": true,
                                                "enablePartitionDiscovery": false
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextReadSettings"
                                            }
                                        },
                                        "sink": {
                                            "type": "DelimitedTextSink",
                                            "storeSettings": {
                                                "type": "SftpWriteSettings",
                                                "operationTimeout": "01:00:00",
                                                "useTempFileRename": true
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextWriteSettings",
                                                "quoteAllText": true,
                                                "fileExtension": ".txt"
                                            }
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "typeConversion": true,
                                            "typeConversionSettings": {
                                                "allowDataTruncation": true,
                                                "treatBooleanAsNumber": false
                                            }
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "ds_adls_output",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "ContainerName": "prodcrmsynapse",
                                                "FilePath": {
                                                    "value": "@concat('f+/UNC',pipeline().parameters.UncPath)",
                                                    "type": "Expression"
                                                },
                                                "FileName": {
                                                    "value": "@variables('campusFileName')",
                                                    "type": "Expression"
                                                },
                                                "storageaccountname": {
                                                    "value": "@pipeline().parameters.storageaccountname",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "ds_sftp_input_file",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "folderName": {
                                                    "value": "@concat('10.200.0.17/',pipeline().parameters.UncPath)",
                                                    "type": "Expression"
                                                },
                                                "fileName": {
                                                    "value": "@variables('campusFileName')",
                                                    "type": "Expression"
                                                },
                                                "rnl_sftp_host": {
                                                    "value": "@pipeline().parameters.rnl_sftp_host",
                                                    "type": "Expression"
                                                },
                                                "rnl_sftp_username": {
                                                    "value": "@pipeline().parameters.rnl_sftp_username",
                                                    "type": "Expression"
                                                },
                                                "vaulturl": {
                                                    "value": "@pipeline().parameters.vault_url",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "Delete Campus Report File in UNC",
                                    "type": "Delete",
                                    "dependsOn": [
                                        {
                                            "activity": "Campus Report - UNC to SFTP",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "ds_adls_output",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "ContainerName": "prodcrmsynapse",
                                                "FilePath": {
                                                    "value": "@concat('f+/UNC',pipeline().parameters.UncPath)",
                                                    "type": "Expression"
                                                },
                                                "FileName": {
                                                    "value": "@variables('campusFileName')",
                                                    "type": "Expression"
                                                },
                                                "storageaccountname": {
                                                    "value": "@pipeline().parameters.storageaccountname",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "enableLogging": false,
                                        "storeSettings": {
                                            "type": "AzureBlobFSReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false
                                        }
                                    }
                                },
                                {
                                    "name": "CSD Report - UNC to SFTP",
                                    "type": "Copy",
                                    "dependsOn": [
                                        {
                                            "activity": "Generate CSD Report - UNC",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "DelimitedTextSource",
                                            "storeSettings": {
                                                "type": "AzureBlobFSReadSettings",
                                                "recursive": true,
                                                "enablePartitionDiscovery": false
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextReadSettings"
                                            }
                                        },
                                        "sink": {
                                            "type": "DelimitedTextSink",
                                            "storeSettings": {
                                                "type": "SftpWriteSettings",
                                                "operationTimeout": "01:00:00",
                                                "useTempFileRename": true
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextWriteSettings",
                                                "quoteAllText": true,
                                                "fileExtension": ".txt"
                                            }
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "typeConversion": true,
                                            "typeConversionSettings": {
                                                "allowDataTruncation": true,
                                                "treatBooleanAsNumber": false
                                            }
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "ds_adls_output",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "ContainerName": "prodcrmsynapse",
                                                "FilePath": {
                                                    "value": "@concat('f+/UNC',pipeline().parameters.UncPath)",
                                                    "type": "Expression"
                                                },
                                                "FileName": {
                                                    "value": "@variables('csdFileName')",
                                                    "type": "Expression"
                                                },
                                                "storageaccountname": {
                                                    "value": "@pipeline().parameters.storageaccountname",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "ds_sftp_input_file",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "folderName": {
                                                    "value": "@concat('10.200.0.17/',pipeline().parameters.UncPath)",
                                                    "type": "Expression"
                                                },
                                                "fileName": {
                                                    "value": "@variables('csdFileName')",
                                                    "type": "Expression"
                                                },
                                                "rnl_sftp_host": {
                                                    "value": "@pipeline().parameters.rnl_sftp_host",
                                                    "type": "Expression"
                                                },
                                                "rnl_sftp_username": {
                                                    "value": "@pipeline().parameters.rnl_sftp_username",
                                                    "type": "Expression"
                                                },
                                                "vaulturl": {
                                                    "value": "@pipeline().parameters.vault_url",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "Delete CSD Report File in UNC",
                                    "type": "Delete",
                                    "dependsOn": [
                                        {
                                            "activity": "CSD Report - UNC to SFTP",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "ds_adls_output",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "ContainerName": "prodcrmsynapse",
                                                "FilePath": {
                                                    "value": "@concat('f+/UNC',pipeline().parameters.UncPath)",
                                                    "type": "Expression"
                                                },
                                                "FileName": {
                                                    "value": "@variables('csdFileName')",
                                                    "type": "Expression"
                                                },
                                                "storageaccountname": {
                                                    "value": "@pipeline().parameters.storageaccountname",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "enableLogging": false,
                                        "storeSettings": {
                                            "type": "AzureBlobFSReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false
                                        }
                                    }
                                },
                                {
                                    "name": "Generate CSD Report - UNC",
                                    "type": "Copy",
                                    "dependsOn": [
                                        {
                                            "activity": "Set csdFileName",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "SqlDWSource",
                                            "sqlReaderQuery": {
                                                "value": "@concat(item().csdReportQuery,item().uploaddetailid)",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "sink": {
                                            "type": "DelimitedTextSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextWriteSettings",
                                                "quoteAllText": true,
                                                "fileExtension": ".txt"
                                            }
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "typeConversion": true,
                                            "typeConversionSettings": {
                                                "allowDataTruncation": true,
                                                "treatBooleanAsNumber": false
                                            }
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "ds_synapse_Dynamic",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "Syn_Schema": "fplus",
                                                "Syn_Table": "student_finalver",
                                                "az_synapse_crm_server": {
                                                    "value": "@pipeline().parameters.az_synapse_crm_server",
                                                    "type": "Expression"
                                                },
                                                "az_synapse_crm_db": {
                                                    "value": "@pipeline().parameters.az_synapse_crm_db",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "ds_adls_output",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "ContainerName": "prodcrmsynapse",
                                                "FilePath": {
                                                    "value": "@concat('f+/UNC',pipeline().parameters.UncPath)",
                                                    "type": "Expression"
                                                },
                                                "FileName": {
                                                    "value": "@variables('csdFileName')",
                                                    "type": "Expression"
                                                },
                                                "storageaccountname": {
                                                    "value": "@pipeline().parameters.storageaccountname",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "Status Update on FQT Order",
                                    "type": "Lookup",
                                    "dependsOn": [
                                        {
                                            "activity": "Email Notification",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "SqlDWSource",
                                            "sqlReaderQuery": {
                                                "value": "@concat('update [fplus].[CustomerOrder] \nset OrderStatusID = (Select OrderStatusID From [fplus].[CustomerOrderStatus] where OrderStatusDesc = ''Scoring Process Completed'')\nwhere FqtOrderID =''',item().FqtOrderID,''' SELECT 1')",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "ds_synapse_Dynamic",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "Syn_Schema": "fplus",
                                                "Syn_Table": "CustomerOrder",
                                                "az_synapse_crm_server": {
                                                    "value": "@pipeline().parameters.az_synapse_crm_server",
                                                    "type": "Expression"
                                                },
                                                "az_synapse_crm_db": {
                                                    "value": "@pipeline().parameters.az_synapse_crm_db",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "firstRowOnly": false
                                    }
                                },
                                {
                                    "name": "Status Update on CRM",
                                    "type": "Lookup",
                                    "dependsOn": [
                                        {
                                            "activity": "Status Update on FQT Order",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "SqlServerSource",
                                            "sqlReaderQuery": {
                                                "value": "@concat('Update po_fqtcustomerorderBase set po_orderstatus = \n(Select po_fqtcustomerorderstatusid from dbo.po_fqtcustomerorderstatusBase \nwhere po_name = ''Extraction Completed'') \nwhere po_fqtcustomerorderId=''',item().FqtOrderID,''' SELECT 1')",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "ds_appboost_crm",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "crm_schema": "dbo",
                                                "crm_table": "po_fqtcustomerorderstatusBase",
                                                "crm_servername": {
                                                    "value": "@pipeline().parameters.crm_servername",
                                                    "type": "Expression"
                                                },
                                                "crm_dbname": {
                                                    "value": "@pipeline().parameters.crm_dbname",
                                                    "type": "Expression"
                                                },
                                                "crm_username": {
                                                    "value": "@pipeline().parameters.crm_username",
                                                    "type": "Expression"
                                                },
                                                "vaulturl": {
                                                    "value": "@pipeline().parameters.vault_url",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "firstRowOnly": false
                                    }
                                },
                                {
                                    "name": "Get File Upload Date",
                                    "type": "Lookup",
                                    "dependsOn": [
                                        {
                                            "activity": "Delete CSD Report File in UNC",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        },
                                        {
                                            "activity": "Delete Campus Report File in UNC",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "SqlServerSource",
                                            "sqlReaderQuery": {
                                                "value": "@concat('select CreatedOn from dbo.po_fqtcustomerorderBase (nolock) where po_fqtcustomerorderId =','''',item().Fqtorderid,'''')",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "ds_appboost_crm",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "crm_schema": "dbo",
                                                "crm_table": "po_fqtcustomerorderBase",
                                                "crm_servername": {
                                                    "value": "@pipeline().parameters.crm_servername",
                                                    "type": "Expression"
                                                },
                                                "crm_dbname": {
                                                    "value": "@pipeline().parameters.crm_dbname",
                                                    "type": "Expression"
                                                },
                                                "crm_username": {
                                                    "value": "@pipeline().parameters.crm_username",
                                                    "type": "Expression"
                                                },
                                                "vaulturl": {
                                                    "value": "@pipeline().parameters.vault_url",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "firstRowOnly": false
                                    }
                                },
                                {
                                    "name": "Email Notification",
                                    "type": "WebActivity",
                                    "dependsOn": [
                                        {
                                            "activity": "Get File Upload Date",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "url": "https://prod-26.westus.logic.azure.com:443/workflows/7a77772d67de482db72c5e31cae7105d/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=N9TntF19YwfNGrgIWG8sCvgSajQY19Ylhc7nUHaQMPo",
                                        "connectVia": {
                                            "referenceName": "AutoResolveIntegrationRuntime",
                                            "type": "IntegrationRuntimeReference"
                                        },
                                        "method": "POST",
                                        "headers": {
                                            "Content-Type": "application/json"
                                        },
                                        "body": {
                                            "value": "{\n\"EmailTo\":\"Ganesh.Gawli@ruffalonl.com;Rushikesh.Shirgoankar@ruffalonl.com;Ankit.kumar@ruffalonl.com\",\n\"Subject\": \"Scoring Analysis Export - @{item().uploadDetailId}\",\n\"AccountName\": \"@{item().AccountName}\",\n\"ReceivedDate\": \"@{activity('Get File Upload Date').output.value[0].CreatedOn}\",\n\"ScoreDate\": \"@{item().ScoreDate}\"\n}",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "UncPath": {
                        "type": "string",
                        "defaultValue": "/FileShare$/SmartData/DEV/Final Customer Extract/"
                    },
                    "server_name": {
                        "type": "string",
                        "defaultValue": "rnlndpprodazsql01.database.windows.net"
                    },
                    "database_name": {
                        "type": "string",
                        "defaultValue": "NDPPRODSQLDB"
                    },
                    "az_synapse_crm_server": {
                        "type": "string",
                        "defaultValue": "rnlndpprodcrmsynapse.sql.azuresynapse.net"
                    },
                    "az_synapse_crm_db": {
                        "type": "string",
                        "defaultValue": "NDPPRODCRMPL1"
                    },
                    "fplus_host": {
                        "type": "string",
                        "defaultValue": "\\\\10.3.30.67\\SoftScore"
                    },
                    "fplus_username": {
                        "type": "string",
                        "defaultValue": "RNLWINSASCOMP1\\svc_prod_fqt"
                    },
                    "vault_url": {
                        "type": "string",
                        "defaultValue": "https://rnlndp-prodkeyvault.vault.azure.net/"
                    },
                    "rnl_sftp_host": {
                        "type": "string",
                        "defaultValue": "SFTP.RuffaloNL.com"
                    },
                    "rnl_sftp_username": {
                        "type": "string",
                        "defaultValue": "Brillio_rnl"
                    },
                    "storageaccountname": {
                        "type": "string",
                        "defaultValue": "rnlndpproddls"
                    },
                    "crm_servername": {
                        "type": "string",
                        "defaultValue": "10.26.0.22"
                    },
                    "crm_dbname": {
                        "type": "string",
                        "defaultValue": "RNLMAPQA_MSCRM"
                    },
                    "crm_username": {
                        "type": "string",
                        "defaultValue": "svc_az_ndp"
                    }
                },
                "variables": {
                    "csdFileName": {
                        "type": "String"
                    },
                    "EntryTerm": {
                        "type": "String"
                    },
                    "campusFileName": {
                        "type": "String"
                    },
                    "EmailBody": {
                        "type": "String"
                    },
                    "EmailBodywithDates": {
                        "type": "String"
                    },
                    "UploadDate": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "F+/Reverse Flow"
                },
                "annotations": [],
                "lastPublishTime": "2022-11-07T18:31:14Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip_export_sas_to_db_crm_azure')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "get_fqtorderid",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "sqlReaderQuery": {
                                    "value": "SELECT distinct co.[FqtOrderID],co.[FqtOrgModelId],co.[OrderStatusID]\n,co.[FileNameSource],om.ModelType,co.responseid\n,isnull(om.SubGroup,'No sub group')SubGroup,om.EntryTerm\n,om.ModelStatus,om.AcademicYear,om.modelNumber,co.uploadDetailId\n,om.AccountName,co.isSasFailureEmailSent\nFROM [fplus].[CustomerOrder] co\nleft join [fplus].[OrgModel] om on om.FqtOrgModelId = co.FqtOrgModelId\ninner join [fplus].[CustomerOrderStatus] cs on cs.[OrderStatusID] = co.[OrderStatusID] \n--where co.uploadDetailId = '151678'\nwhere cs.OrderStatusDesc = 'Sent For Scoring' and om.modelNumber is not null and co.uploadDetailId is not null",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_fplus_azuresynapse",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "CustomerOrder",
                                    "schemaname": "fplus",
                                    "az_synapse_crm_server": {
                                        "value": "@pipeline().parameters.az_synapse_crm_server",
                                        "type": "Expression"
                                    },
                                    "az_synapse_crm_db": {
                                        "value": "@pipeline().parameters.az_synapse_crm_db",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "foreach_orderid",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "get_fqtorderid",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('get_fqtorderid').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "truncate_extract_sasscore_details_Stg",
                                    "type": "Script",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "linkedServiceName": {
                                        "referenceName": "ls_AzureSynapseAnalyticsCrmDB",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "az_synapse_crm_server": {
                                                "value": "@pipeline().parameters.az_synapse_crm_server",
                                                "type": "Expression"
                                            },
                                            "az_synapse_crm_db": {
                                                "value": "@pipeline().parameters.az_synapse_crm_db",
                                                "type": "Expression"
                                            }
                                        }
                                    },
                                    "typeProperties": {
                                        "scripts": [
                                            {
                                                "type": "Query",
                                                "text": "truncate table [fplus].[Extract_SasScore_Details_Stg]"
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "folder_path",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "upload_detail_id",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "folderpath",
                                        "value": {
                                            "value": "@concat('fplus/sas_extract/',item().modelNumber,'/',item().AcademicYear,'/',item().ModelType,'/',item().EntryTerm,'/',item().SubGroup)",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "get_meatdata_scored_file",
                                    "type": "GetMetadata",
                                    "dependsOn": [
                                        {
                                            "activity": "folder_path",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "ds_fplus_shared_folder",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "directory": {
                                                    "value": "@concat('UAT/',item().modelnumber,'/',item().academicyear,'/',item().modeltype,'/',item().entryterm,\n'/',item().SubGroup)",
                                                    "type": "Expression"
                                                },
                                                "filename": {
                                                    "value": "@concat(item().uploaddetailID,'_Scores.csv')",
                                                    "type": "Expression"
                                                },
                                                "fplus_host": {
                                                    "value": "@pipeline().parameters.fplus_host",
                                                    "type": "Expression"
                                                },
                                                "fplus_username": {
                                                    "value": "@pipeline().parameters.fplus_username",
                                                    "type": "Expression"
                                                },
                                                "vaulturl": {
                                                    "value": "@pipeline().parameters.vault_url",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "fieldList": [
                                            "exists"
                                        ],
                                        "storeSettings": {
                                            "type": "FileServerReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false
                                        },
                                        "formatSettings": {
                                            "type": "DelimitedTextReadSettings"
                                        }
                                    }
                                },
                                {
                                    "name": "if_score_file_exists",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "get_meatdata_scored_file",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@equals(activity('get_meatdata_scored_file').output.exists,true)",
                                            "type": "Expression"
                                        },
                                        "ifFalseActivities": [
                                            {
                                                "name": "update_customer_order_score_failure",
                                                "description": "update customer order with isSasFailureEmailSent = '1'",
                                                "type": "Script",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "linkedServiceName": {
                                                    "referenceName": "ls_AzureSynapseAnalyticsCrmDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "az_synapse_crm_server": {
                                                            "value": "@pipeline().parameters.az_synapse_crm_server",
                                                            "type": "Expression"
                                                        },
                                                        "az_synapse_crm_db": {
                                                            "value": "@pipeline().parameters.az_synapse_crm_db",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                },
                                                "typeProperties": {
                                                    "scripts": [
                                                        {
                                                            "type": "Query",
                                                            "text": {
                                                                "value": "update fplus.CustomerOrder set isSasFailureEmailSent = '1' where fqtorderid = '@{item().fqtorderid}'",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "email_scoring_failure",
                                                "type": "WebActivity",
                                                "dependsOn": [
                                                    {
                                                        "activity": "update_customer_order_score_failure",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "url": "https://prod-63.westus.logic.azure.com:443/workflows/2fdd3f457bc4434eba7917081bb5ef1d/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=SHm3ZUq9Y1cfGV94VKaKcZa8mE4MXDMP8r62FFJiDMM",
                                                    "connectVia": {
                                                        "referenceName": "AutoResolveIntegrationRuntime",
                                                        "type": "IntegrationRuntimeReference"
                                                    },
                                                    "method": "POST",
                                                    "headers": {
                                                        "Content-Type": "application/json"
                                                    },
                                                    "body": {
                                                        "value": "{\n\"accountname\": '@{item().AccountName}',\n\"academicYear\": '@{item().AcademicYear}',\n\"modelType\": '@{item().ModelType}',\n\"entryTerm\": '@{item().EntryTerm}',\n\"subGroup\": '@{item().SubGroup}',\n\"modelNumber\": '@{item().modelNumber}',\n\"uploadDetailId\": '@{item().uploadDetailId}'\n}",
                                                        "type": "Expression"
                                                    }
                                                }
                                            }
                                        ],
                                        "ifTrueActivities": [
                                            {
                                                "name": "copy_data_to_sasscore_details_stg",
                                                "type": "Copy",
                                                "dependsOn": [
                                                    {
                                                        "activity": "fplus_xmlscore_sharepath_adls",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "DelimitedTextSource",
                                                        "additionalColumns": [
                                                            {
                                                                "name": "fqt_orderid",
                                                                "value": {
                                                                    "value": "@variables('fqtorderid')",
                                                                    "type": "Expression"
                                                                }
                                                            },
                                                            {
                                                                "name": "responseid",
                                                                "value": {
                                                                    "value": "@variables('responseid')",
                                                                    "type": "Expression"
                                                                }
                                                            },
                                                            {
                                                                "name": "model_number",
                                                                "value": {
                                                                    "value": "@variables('modelnumber')",
                                                                    "type": "Expression"
                                                                }
                                                            },
                                                            {
                                                                "name": "upload_detail_id",
                                                                "value": {
                                                                    "value": "@variables('uploaddetailid')",
                                                                    "type": "Expression"
                                                                }
                                                            }
                                                        ],
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSReadSettings",
                                                            "recursive": false,
                                                            "enablePartitionDiscovery": false
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextReadSettings"
                                                        }
                                                    },
                                                    "sink": {
                                                        "type": "SqlDWSink",
                                                        "writeBehavior": "Insert",
                                                        "sqlWriterUseTableLock": false
                                                    },
                                                    "enableStaging": false,
                                                    "translator": {
                                                        "type": "TabularTranslator",
                                                        "mappings": [
                                                            {
                                                                "source": {
                                                                    "name": "PersonID",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "personid",
                                                                    "type": "String",
                                                                    "physicalType": "nvarchar"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "N004",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "N004",
                                                                    "type": "String",
                                                                    "physicalType": "nvarchar"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "OVER_RIDE",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "OVER_RIDE",
                                                                    "type": "String",
                                                                    "physicalType": "nvarchar"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "MODSCORE",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "MODSCORE",
                                                                    "type": "String",
                                                                    "physicalType": "nvarchar"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "MODSCORE_B",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "MODSCORE_B",
                                                                    "type": "String",
                                                                    "physicalType": "nvarchar"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "PREDICTED_PROBABILITY",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "PREDICTED_PROBABILITY",
                                                                    "type": "String",
                                                                    "physicalType": "nvarchar"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "DECILE_RANK",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "DECILE_RANK",
                                                                    "type": "String",
                                                                    "physicalType": "nvarchar"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "PROB_INQ",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "PROB_INQ",
                                                                    "type": "String",
                                                                    "physicalType": "nvarchar"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "PROB_APP",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "PROB_APP",
                                                                    "type": "String",
                                                                    "physicalType": "nvarchar"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "PROB_ADM",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "PROB_ADM",
                                                                    "type": "String",
                                                                    "physicalType": "nvarchar"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "PROB_CON",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "PROB_CON",
                                                                    "type": "String",
                                                                    "physicalType": "nvarchar"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "PROB_ENR",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "PROB_ENR",
                                                                    "type": "String",
                                                                    "physicalType": "nvarchar"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "Top_Source",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "Top_Source",
                                                                    "type": "String",
                                                                    "physicalType": "nvarchar"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "Top_Major",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "Top_Major",
                                                                    "type": "String",
                                                                    "physicalType": "nvarchar"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "Top_Income",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "Top_Income",
                                                                    "type": "String",
                                                                    "physicalType": "nvarchar"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "Top_Cluster",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "Top_Cluster",
                                                                    "type": "String",
                                                                    "physicalType": "nvarchar"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "Top_State",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "Top_State",
                                                                    "type": "String",
                                                                    "physicalType": "nvarchar"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "CUM_PERC",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "CUM_PERC",
                                                                    "type": "String",
                                                                    "physicalType": "nvarchar"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "INCOME_BIN",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "INCOME_BIN",
                                                                    "type": "String",
                                                                    "physicalType": "nvarchar"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "SAS_ERROR",
                                                                    "type": "String",
                                                                    "physicalType": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "SAS_ERROR",
                                                                    "type": "String",
                                                                    "physicalType": "nvarchar"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "fqt_orderid",
                                                                    "type": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "FQT_OrderId",
                                                                    "type": "String",
                                                                    "physicalType": "nvarchar"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "responseid",
                                                                    "type": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "ResponseId",
                                                                    "type": "String",
                                                                    "physicalType": "nvarchar"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "model_number",
                                                                    "type": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "Model_Number",
                                                                    "type": "String",
                                                                    "physicalType": "varchar"
                                                                }
                                                            },
                                                            {
                                                                "source": {
                                                                    "name": "upload_detail_id",
                                                                    "type": "String"
                                                                },
                                                                "sink": {
                                                                    "name": "Upload_Detail_Id",
                                                                    "type": "String",
                                                                    "physicalType": "varchar"
                                                                }
                                                            }
                                                        ],
                                                        "typeConversion": true,
                                                        "typeConversionSettings": {
                                                            "allowDataTruncation": true,
                                                            "treatBooleanAsNumber": false
                                                        }
                                                    }
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "FilesToRename",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "Containername": {
                                                                "value": "@pipeline().parameters.container",
                                                                "type": "Expression"
                                                            },
                                                            "Filepath": {
                                                                "value": "@concat(pipeline().parameters.softscore_adls,'/',item().modelnumber,'/',item().academicYear,'/',item().modelType,'/',item().entryTerm,'/',item().subGroup)\n",
                                                                "type": "Expression"
                                                            },
                                                            "Filename": {
                                                                "value": "@concat(item().uploaddetailID,'_AZMLScores.csv')",
                                                                "type": "Expression"
                                                            },
                                                            "storageaccountname": {
                                                                "value": "@pipeline().parameters.storageaccountname",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "ds_fplus_azuresynapse",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "tablename": "Extract_SasScore_Details_Stg",
                                                            "schemaname": "fplus",
                                                            "az_synapse_crm_server": {
                                                                "value": "@pipeline().parameters.az_synapse_crm_server",
                                                                "type": "Expression"
                                                            },
                                                            "az_synapse_crm_db": {
                                                                "value": "@pipeline().parameters.az_synapse_crm_db",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "name": "estscore_contents",
                                                "type": "SetVariable",
                                                "dependsOn": [
                                                    {
                                                        "activity": "get_estscore_file",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "estscore",
                                                    "value": {
                                                        "value": "@replace(replace(string(activity('get_estscore_file').output.firstRow),'{\"\":\"',''),'\"}','')",
                                                        "type": "Expression"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "email_scoring_success",
                                                "description": "Scoring Notification",
                                                "type": "WebActivity",
                                                "dependsOn": [
                                                    {
                                                        "activity": "estscore_contents",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "url": "https://prod-09.westus.logic.azure.com:443/workflows/08678333f3b04436a39e64cc6e3715a5/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=OP32xi_Vmf7EuvomPUf7x81Sqm1STTjkyiGmQNxlQn4",
                                                    "connectVia": {
                                                        "referenceName": "AutoResolveIntegrationRuntime",
                                                        "type": "IntegrationRuntimeReference"
                                                    },
                                                    "method": "POST",
                                                    "headers": {
                                                        "Content-Type": "application/json"
                                                    },
                                                    "body": {
                                                        "value": "{\n\"accountname\":'@{item().accountname}',\n\"academicYear\": '@{item().academicYear}',\n\"modelType\": '@{item().modelType}',\n\"entryTerm\":'@{item().entryTerm}',\n\"subGroup\": '@{item().subGroup}',\n\"modelNumber\": '@{item().modelnumber}',\n\"uploadDetailId\": '@{item().uploadDetailId}',\n\"Htmlcontent\" : '@{variables('estscore')}'\n}",
                                                        "type": "Expression"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "fplus_xmlscore_sharepath_adls",
                                                "type": "Copy",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "DelimitedTextSource",
                                                        "storeSettings": {
                                                            "type": "FileServerReadSettings",
                                                            "recursive": false,
                                                            "enablePartitionDiscovery": false
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextReadSettings"
                                                        }
                                                    },
                                                    "sink": {
                                                        "type": "DelimitedTextSink",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSWriteSettings"
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextWriteSettings",
                                                            "quoteAllText": true,
                                                            "fileExtension": ".txt"
                                                        }
                                                    },
                                                    "enableStaging": false,
                                                    "translator": {
                                                        "type": "TabularTranslator",
                                                        "typeConversion": true,
                                                        "typeConversionSettings": {
                                                            "allowDataTruncation": true,
                                                            "treatBooleanAsNumber": false
                                                        }
                                                    }
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "ds_fplus_score_to_adls",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "directory": {
                                                                "value": "@concat('UAT/',item().modelnumber,'/',item().academicyear,'/',item().modeltype,'/',item().entryterm,\n'/',item().SubGroup)",
                                                                "type": "Expression"
                                                            },
                                                            "filename": {
                                                                "value": "@concat(item().uploaddetailID,'_Scores.csv')",
                                                                "type": "Expression"
                                                            },
                                                            "fplus_host": {
                                                                "value": "@pipeline().parameters.fplus_host",
                                                                "type": "Expression"
                                                            },
                                                            "fplus_username": {
                                                                "value": "@pipeline().parameters.fplus_username",
                                                                "type": "Expression"
                                                            },
                                                            "vaulturl": {
                                                                "value": "@pipeline().parameters.vault_url",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "FilesToRename",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "Containername": {
                                                                "value": "@pipeline().parameters.container",
                                                                "type": "Expression"
                                                            },
                                                            "Filepath": {
                                                                "value": "@concat(pipeline().parameters.softscore_adls,'/',item().modelnumber,'/',item().academicYear,'/',item().modelType,'/',item().entryTerm,'/',item().subGroup)",
                                                                "type": "Expression"
                                                            },
                                                            "Filename": {
                                                                "value": "@concat(item().uploaddetailID,'_Scores.csv')",
                                                                "type": "Expression"
                                                            },
                                                            "storageaccountname": {
                                                                "value": "@pipeline().parameters.storageaccountname",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "name": "copy_estscorefiledata_to_fplus_estscoresfiledata",
                                                "description": "copy the file data to table",
                                                "type": "Copy",
                                                "dependsOn": [
                                                    {
                                                        "activity": "copy_data_to_sasscore_details_stg",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "DelimitedTextSource",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSReadSettings",
                                                            "recursive": true,
                                                            "enablePartitionDiscovery": false
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextReadSettings"
                                                        }
                                                    },
                                                    "sink": {
                                                        "type": "SqlDWSink",
                                                        "preCopyScript": "TRUNCATE Table fplus.extractoflstfile",
                                                        "writeBehavior": "Insert",
                                                        "sqlWriterUseTableLock": false,
                                                        "disableMetricsCollection": false
                                                    },
                                                    "enableStaging": false,
                                                    "translator": {
                                                        "type": "TabularTranslator",
                                                        "mappings": [
                                                            {
                                                                "source": {
                                                                    "type": "String",
                                                                    "ordinal": 1
                                                                },
                                                                "sink": {
                                                                    "name": "lst_data",
                                                                    "type": "String",
                                                                    "physicalType": "nvarchar"
                                                                }
                                                            }
                                                        ],
                                                        "typeConversion": true,
                                                        "typeConversionSettings": {
                                                            "allowDataTruncation": true,
                                                            "treatBooleanAsNumber": false
                                                        }
                                                    }
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "FilesToRename_no_header",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "Containername": {
                                                                "value": "@pipeline().parameters.container",
                                                                "type": "Expression"
                                                            },
                                                            "Filepath": {
                                                                "value": "@concat(pipeline().parameters.softscore_adls,'/',item().modelnumber,'/',item().academicYear,'/',item().modelType,'/',item().entryTerm,'/',item().subGroup)",
                                                                "type": "Expression"
                                                            },
                                                            "Filename": {
                                                                "value": "estscore.lst",
                                                                "type": "Expression"
                                                            },
                                                            "storageaccountname": {
                                                                "value": "@pipeline().parameters.storageaccountname",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "ds_fplus_azuresynapse",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "tablename": "extractoflstfile",
                                                            "schemaname": "fplus",
                                                            "az_synapse_crm_server": {
                                                                "value": "@pipeline().parameters.az_synapse_crm_server",
                                                                "type": "Expression"
                                                            },
                                                            "az_synapse_crm_db": {
                                                                "value": "@pipeline().parameters.az_synapse_crm_db",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "name": "get_estscore_file",
                                                "description": "Read estscore.lst file",
                                                "type": "Lookup",
                                                "dependsOn": [
                                                    {
                                                        "activity": "copy_estscorefiledata_to_fplus_estscoresfiledata",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "SqlDWSource",
                                                        "sqlReaderQuery": "SELECT String_agg (lst_data,'') From (SELECT lst_data FROM fplus.extractoflstfile) a\n",
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_fplus_azuresynapse",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "tablename": "extractoflstfile",
                                                            "schemaname": "fplus",
                                                            "az_synapse_crm_server": {
                                                                "value": "@pipeline().parameters.az_synapse_crm_server",
                                                                "type": "Expression"
                                                            },
                                                            "az_synapse_crm_db": {
                                                                "value": "@pipeline().parameters.az_synapse_crm_db",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    },
                                                    "firstRowOnly": true
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "fqt_order_id",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "truncate_extract_sasscore_details_Stg",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "fqtorderid",
                                        "value": {
                                            "value": "@item().FqtOrderID",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "model_number",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "fqt_order_id",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "modelnumber",
                                        "value": {
                                            "value": "@item().modelNumber",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "response_id",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "model_number",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "responseid",
                                        "value": {
                                            "value": "@item().responseid",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "upload_detail_id",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "response_id",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "uploaddetailid",
                                        "value": {
                                            "value": "@item().uploadDetailId",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "update_student_raw_with_scoring_info",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "if_score_file_exists",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[fplus].[usp_UpdateScoresInfotoStudentDB]"
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_AzureSynapseAnalyticsCrmDB",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "az_synapse_crm_server": {
                                                "value": "@pipeline().parameters.az_synapse_crm_server",
                                                "type": "Expression"
                                            },
                                            "az_synapse_crm_db": {
                                                "value": "@pipeline().parameters.az_synapse_crm_db",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "update_customer_order_status",
                                    "type": "Script",
                                    "dependsOn": [
                                        {
                                            "activity": "update_student_raw_with_scoring_info",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "linkedServiceName": {
                                        "referenceName": "ls_AzureSynapseAnalyticsCrmDB",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "az_synapse_crm_server": {
                                                "value": "@pipeline().parameters.az_synapse_crm_server",
                                                "type": "Expression"
                                            },
                                            "az_synapse_crm_db": {
                                                "value": "@pipeline().parameters.az_synapse_crm_db",
                                                "type": "Expression"
                                            }
                                        }
                                    },
                                    "typeProperties": {
                                        "scripts": [
                                            {
                                                "type": "Query",
                                                "text": {
                                                    "value": "update [fplus].[CustomerOrder] \nset OrderStatusID = (select orderstatusid from [fplus].[CustomerOrderStatus] \nwhere orderstatusdesc = 'Scoring Received') \nwhere fqtorderid = '@{variables('fqtorderid')}'",
                                                    "type": "Expression"
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "truncate_crm_score_stg_table",
                        "type": "Script",
                        "dependsOn": [
                            {
                                "activity": "foreach_orderid",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "linkedServiceName": {
                            "referenceName": "ls_AppboostCrmSqlDB",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "crm_servername": {
                                    "value": "@pipeline().parameters.crm_servername",
                                    "type": "Expression"
                                },
                                "crm_dbname": {
                                    "value": "@pipeline().parameters.crm_dbname",
                                    "type": "Expression"
                                },
                                "crm_username": {
                                    "value": "@pipeline().parameters.crm_username",
                                    "type": "Expression"
                                },
                                "vaulturl": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        },
                        "typeProperties": {
                            "scripts": [
                                {
                                    "type": "Query",
                                    "text": {
                                        "value": "truncate table [dbo].[FQTStudentScoreStg]",
                                        "type": "Expression"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "modelscore_update_in_crm_stg_table",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "truncate_crm_score_stg_table",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "sqlReaderQuery": {
                                    "value": "SELECT distinct st.STUDENTID,st.FQTORDERID,st.output_MODSCORE ,st.ModelType\n,case when st.ModelType = 'Prospect' then st.output_MODSCORE\nelse ''\nend as po_smartscore\n,case when st.ModelType = 'Inquiry' then st.output_MODSCORE\nelse ''\nend as po_inquirymodelscore\n,case when st.ModelType = 'Admit' then st.output_MODSCORE\nelse ''\nend as po_admitmodelscore\n,case when st.ModelType = 'Applicant' then st.output_MODSCORE\nelse ''\nend as po_applicantmodelscore\nFROM fplus.student_raw st\nleft join [fplus].[CustomerOrder] co on st.FQTORDERID = co.FqtOrderID\nleft join [fplus].[OrgModel] om on om.FqtOrgModelId = co.FqtOrgModelId\ninner join [fplus].[CustomerOrderStatus] cs on cs.[OrderStatusID] = co.[OrderStatusID] \nwhere cs.OrderStatusDesc = 'Scoring Received'",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlServerSink",
                                "writeBehavior": "insert",
                                "sqlWriterUseTableLock": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "STUDENTID",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_clientid",
                                            "type": "String",
                                            "physicalType": "varchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "FQTORDERID",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "fqtorderid",
                                            "type": "String",
                                            "physicalType": "varchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "output_MODSCORE",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "output_modescore",
                                            "type": "String",
                                            "physicalType": "varchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ModelType",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "modeltype",
                                            "type": "String",
                                            "physicalType": "varchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "po_smartscore",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_smartscore",
                                            "type": "String",
                                            "physicalType": "varchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "po_inquirymodelscore",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_inquirymodelscore",
                                            "type": "String",
                                            "physicalType": "varchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "po_admitmodelscore",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_admitmodelscore",
                                            "type": "String",
                                            "physicalType": "varchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "po_applicantmodelscore",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_applicantmodelscore",
                                            "type": "String",
                                            "physicalType": "varchar"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ds_fplus_azuresynapse",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "student_raw",
                                    "schemaname": "fplus",
                                    "az_synapse_crm_server": {
                                        "value": "@pipeline().parameters.az_synapse_crm_server",
                                        "type": "Expression"
                                    },
                                    "az_synapse_crm_db": {
                                        "value": "@pipeline().parameters.az_synapse_crm_db",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ds_appboost_crm",
                                "type": "DatasetReference",
                                "parameters": {
                                    "crm_schema": "dbo",
                                    "crm_table": "FQTStudentScoreStg",
                                    "crm_servername": {
                                        "value": "@pipeline().parameters.crm_servername",
                                        "type": "Expression"
                                    },
                                    "crm_dbname": {
                                        "value": "@pipeline().parameters.crm_dbname",
                                        "type": "Expression"
                                    },
                                    "crm_username": {
                                        "value": "@pipeline().parameters.crm_username",
                                        "type": "Expression"
                                    },
                                    "vaulturl": {
                                        "value": "@pipeline().parameters.vault_url",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "update_scores_to_contactbase_table",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "modelscore_update_in_crm_stg_table",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[usp_UpdateFQTScoresInfotoContact]"
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_AppboostCrmSqlDB",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "crm_servername": {
                                    "value": "@pipeline().parameters.crm_servername",
                                    "type": "Expression"
                                },
                                "crm_dbname": {
                                    "value": "@pipeline().parameters.crm_dbname",
                                    "type": "Expression"
                                },
                                "crm_username": {
                                    "value": "@pipeline().parameters.crm_username",
                                    "type": "Expression"
                                },
                                "vaulturl": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "update_customer_order_awaiting_extraction",
                        "type": "Script",
                        "dependsOn": [
                            {
                                "activity": "update_scores_to_contactbase_table",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "linkedServiceName": {
                            "referenceName": "ls_AzureSynapseAnalyticsCrmDB",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "az_synapse_crm_server": {
                                    "value": "@pipeline().parameters.az_synapse_crm_server",
                                    "type": "Expression"
                                },
                                "az_synapse_crm_db": {
                                    "value": "@pipeline().parameters.az_synapse_crm_db",
                                    "type": "Expression"
                                }
                            }
                        },
                        "typeProperties": {
                            "scripts": [
                                {
                                    "type": "Query",
                                    "text": {
                                        "value": "update [fplus].[CustomerOrder] \nset OrderStatusID = (Select OrderStatusID From [fplus].[CustomerOrderStatus] where OrderStatusDesc = 'Awaiting Extraction')\n,scoredate=getdate()\nwhere FqtOrderID in\n(SELECT distinct st.FQTORDERID\nFROM fplus.student_raw st\nleft join [fplus].[CustomerOrder] co on st.FQTORDERID = co.FqtOrderID\nleft join [fplus].[OrgModel] om on om.FqtOrgModelId = co.FqtOrgModelId\ninner join [fplus].[CustomerOrderStatus] cs on cs.[OrderStatusID] = co.[OrderStatusID] \nwhere cs.OrderStatusDesc = 'Scoring Received')",
                                        "type": "Expression"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "update_crm_status",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "update_customer_order_awaiting_extraction",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "additionalColumns": [
                                    {
                                        "name": "OwnerId",
                                        "value": "07B626B0-DAC8-E811-A96F-000D3A062608"
                                    },
                                    {
                                        "name": "statecode",
                                        "value": "0"
                                    },
                                    {
                                        "name": "OwnerIDType",
                                        "value": "8"
                                    }
                                ],
                                "sqlReaderQuery": "SELECT co.FqtOrderID,co.OrderStatusID,c_o_s.OrderStatusDesc\nFROM  [fplus].[CustomerOrder] co\njoin [fplus].[CustomerOrderStatus] c_o_s\non c_o_s.OrderStatusID = co.OrderStatusID\nand c_o_s.OrderStatusDesc='Awaiting Extraction'",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlServerSink",
                                "writeBehavior": "upsert",
                                "upsertSettings": {
                                    "useTempDB": false,
                                    "keys": [
                                        "po_fqtcustomerorderId"
                                    ]
                                },
                                "sqlWriterUseTableLock": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "FqtOrderID",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_fqtcustomerorderId",
                                            "type": "Guid",
                                            "physicalType": "uniqueidentifier"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "OrderStatusID",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_orderstatus",
                                            "type": "Guid",
                                            "physicalType": "uniqueidentifier"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "statecode"
                                        },
                                        "sink": {
                                            "name": "statecode",
                                            "type": "Int32",
                                            "physicalType": "int"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "OwnerId"
                                        },
                                        "sink": {
                                            "name": "OwnerId",
                                            "type": "Guid",
                                            "physicalType": "uniqueidentifier"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "OwnerIDType"
                                        },
                                        "sink": {
                                            "name": "OwnerIdType",
                                            "type": "Int32",
                                            "physicalType": "int"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ds_fplus_azuresynapse",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "CustomerOrder",
                                    "schemaname": "fplus",
                                    "az_synapse_crm_server": {
                                        "value": "@pipeline().parameters.az_synapse_crm_server",
                                        "type": "Expression"
                                    },
                                    "az_synapse_crm_db": {
                                        "value": "@pipeline().parameters.az_synapse_crm_db",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ds_appboost_crm",
                                "type": "DatasetReference",
                                "parameters": {
                                    "crm_schema": "dbo",
                                    "crm_table": "po_fqtcustomerorderbase",
                                    "crm_servername": {
                                        "value": "@pipeline().parameters.crm_servername",
                                        "type": "Expression"
                                    },
                                    "crm_dbname": {
                                        "value": "@pipeline().parameters.crm_dbname",
                                        "type": "Expression"
                                    },
                                    "crm_username": {
                                        "value": "@pipeline().parameters.crm_username",
                                        "type": "Expression"
                                    },
                                    "vaulturl": {
                                        "value": "@pipeline().parameters.vault_url",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "az_sql_server_name": {
                        "type": "string",
                        "defaultValue": "rnlndpprodazsql01.database.windows.net"
                    },
                    "az_sql_db_name": {
                        "type": "string",
                        "defaultValue": "NDPPRODSQLDB"
                    },
                    "softscore_root": {
                        "type": "string",
                        "defaultValue": "SoftScore/UAT"
                    },
                    "container": {
                        "type": "string",
                        "defaultValue": "prodcrmsynapse"
                    },
                    "softscore_adls": {
                        "type": "string",
                        "defaultValue": "SoftScoreAZML"
                    },
                    "az_synapse_crm_server": {
                        "type": "string",
                        "defaultValue": "rnlndpprodcrmsynapse.sql.azuresynapse.net"
                    },
                    "az_synapse_crm_db": {
                        "type": "string",
                        "defaultValue": "NDPPRODCRMPL1"
                    },
                    "fplus_host": {
                        "type": "string",
                        "defaultValue": "\\\\10.3.30.67\\SoftScore"
                    },
                    "fplus_username": {
                        "type": "string",
                        "defaultValue": "RNLWINSASCOMP1\\svc_prod_fqt"
                    },
                    "vault_url": {
                        "type": "string",
                        "defaultValue": "https://rnlndp-prodkeyvault.vault.azure.net/"
                    },
                    "storageaccountname": {
                        "type": "string",
                        "defaultValue": "rnlndpproddls"
                    },
                    "crm_servername": {
                        "type": "string",
                        "defaultValue": "10.26.0.22"
                    },
                    "crm_dbname": {
                        "type": "string",
                        "defaultValue": "RNLMAPQA_MSCRM"
                    },
                    "crm_username": {
                        "type": "string",
                        "defaultValue": "svc_az_ndp"
                    }
                },
                "variables": {
                    "folderpath": {
                        "type": "String"
                    },
                    "fqtorderid": {
                        "type": "String"
                    },
                    "responseid": {
                        "type": "String"
                    },
                    "modelnumber": {
                        "type": "String"
                    },
                    "uploaddetailid": {
                        "type": "String"
                    },
                    "estscore": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "F+/Reverse Flow"
                },
                "annotations": [],
                "lastPublishTime": "2022-11-07T18:09:44Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-send-email-campusesp')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "copy_staging_data_to_azsql",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "Select *\nFrom \n(\nSelect dscq.response_id,dscq.Accountname,dscq.filename_source,dscq.modified_filename,MDS.Date, MDS.Parent_count,ROW_NUMBER() OVER (PARTITION BY dscq.Accountname order by MDS.date Desc) AS rn\nfrom [staging].em_historical_data_all dscq with (nolock)\nInner join \n\t((\n\t\tSelect Munpivot.response_id,date, sum(parent_Count) as Parent_Count\n\t\tfrom\n\t\t(\n\t\t\tselect  response_id,Account_name,(CONVERT(VARCHAR(10),insert_datetime, 101)) as 'Date',source_file_name,modified_filename, count(modified_filename) as 'Parent_Count' \n\t\t\tfrom [staging].[em_marketing]  with (nolock) \n\t\t\twhere (p_email_01 is not null)\n\t\t\tgroup by Account_name,source_file_name,(CONVERT(VARCHAR(10),insert_datetime, 101)),modified_filename,response_id\n\t\t\tunion\n\t\t\tselect  response_id,Account_name,(CONVERT(VARCHAR(10),insert_datetime, 101)) as 'Date',source_file_name,modified_filename, count(modified_filename) as 'Parent_Count' \n\t\t\tfrom [staging].[em_marketing]  with (nolock) \n\t\t\twhere (P_EMAIL_02 is not null)\n\t\t\tgroup by Account_name,source_file_name,(CONVERT(VARCHAR(10),insert_datetime, 101)),modified_filename,response_id\n\t\t) Munpivot\n\t\tgroup by Munpivot.response_id,date)\nUnion\n\t\t(Select Sunpivot.response_id,date, sum(parent_Count) as Parent_Count \n\t\tfrom\n\t\t(\n\t\t\tselect  response_id,Account_name,(CONVERT(VARCHAR(10),insert_datetime, 101)) as 'Date',source_file_name,modified_filename, count(modified_filename) as 'Parent_Count' \n\t\t\tfrom [staging].[em_scoring]  with (nolock) \n\t\t\twhere (p_email_01 is not null)\n\t\t\tgroup by Account_name,source_file_name,(CONVERT(VARCHAR(10),insert_datetime, 101)),modified_filename,response_id\n\t\t\tunion\n\t\t\tselect  response_id,Account_name,(CONVERT(VARCHAR(10),insert_datetime, 101)) as 'Date',source_file_name,modified_filename, count(modified_filename) as 'Parent_Count' \n\t\t\tfrom [staging].[em_scoring]  with (nolock) \n\t\t\twhere (P_EMAIL_02 is not null)\n\t\t\tgroup by Account_name,source_file_name,(CONVERT(VARCHAR(10),insert_datetime, 101)),modified_filename,response_id\n\t\t) Sunpivot\n\t\tgroup by Sunpivot.response_id,date)\nUnion\n\t\t(Select SUPunpivot.response_id,date, sum(parent_Count) as Parent_Count --ROW_NUMBER() OVER (PARTITION BY Account_name order by Date Desc) AS rn\n\t\tfrom\n\t\t(\n\t\t\tselect  response_id,Account_name,(CONVERT(VARCHAR(10),insert_datetime, 101)) as 'Date',source_file_name,modified_filename, count(modified_filename) as 'Parent_Count' \n\t\t\tfrom [staging].[em_suppression]  with (nolock) \n\t\t\twhere (p_email_01 is not null)\n\t\t\tgroup by Account_name,source_file_name,(CONVERT(VARCHAR(10),insert_datetime, 101)),modified_filename,response_id\n\t\t\tunion\n\t\t\tselect  response_id,Account_name,(CONVERT(VARCHAR(10),insert_datetime, 101)) as 'Date',source_file_name,modified_filename, count(modified_filename) as 'Parent_Count' \n\t\t\tfrom [staging].[em_suppression]  with (nolock) \n\t\t\twhere (P_EMAIL_02 is not null)\n\t\t\tgroup by Account_name,source_file_name,(CONVERT(VARCHAR(10),insert_datetime, 101)),modified_filename,response_id\n\t\t) SUPunpivot\n\t\tgroup by SUPunpivot.response_id,date))\n\t\n\tMDS on MDS.response_id= dscq.response_id\n\twhere\n\t\tMDS.Date> getdate()-60\n\tgroup by dscq.response_id,dscq.Accountname,dscq.filename_source,dscq.modified_filename,MDS.Date, MDS.Parent_count\t\n)\nzz\nwhere rn in ('1','2','3','4','5')",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "Truncate table temp.TempMDS",
                                "writeBehavior": "insert",
                                "sqlWriterUseTableLock": false,
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "response_id",
                                            "type": "String",
                                            "physicalType": "varchar"
                                        },
                                        "sink": {
                                            "name": "response_id",
                                            "type": "String",
                                            "physicalType": "varchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Accountname",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "Accountname",
                                            "type": "String",
                                            "physicalType": "varchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "filename_source",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "filename_source",
                                            "type": "String",
                                            "physicalType": "varchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "modified_filename",
                                            "type": "String",
                                            "physicalType": "varchar"
                                        },
                                        "sink": {
                                            "name": "modified_filename",
                                            "type": "String",
                                            "physicalType": "varchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Date",
                                            "type": "String",
                                            "physicalType": "varchar"
                                        },
                                        "sink": {
                                            "name": "Date",
                                            "type": "String",
                                            "physicalType": "varchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Parent_count",
                                            "type": "Int32",
                                            "physicalType": "int"
                                        },
                                        "sink": {
                                            "name": "Parent_count",
                                            "type": "Int32",
                                            "physicalType": "int"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "rn",
                                            "type": "Int64",
                                            "physicalType": "bigint"
                                        },
                                        "sink": {
                                            "name": "rn",
                                            "type": "Int64",
                                            "physicalType": "bigint"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ds_campusesp_azuresql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "abc"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ds_campusesp_azuresql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "TempMDS"
                                }
                            }
                        ]
                    },
                    {
                        "name": "copy_vendor_accounts_to_azsql",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "copy_staging_data_to_azsql",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlServerSource",
                                "sqlReaderQuery": {
                                    "value": "select  acb.accountId,acb.[Name],acb.po_zeemeeslugname as  ZeeMee , acb.po_campusespslugname as CampusESP\nfrom [dbo].[AccountBase] acb with(nolock) \t   \nwhere acb.po_campusespslugname is not null",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "Truncate table temp.TempAccounts",
                                "writeBehavior": "insert",
                                "sqlWriterUseTableLock": false,
                                "tableOption": "autoCreate",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ds_campusesp_ndpdev_mscrm",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "abc"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ds_campusesp_azuresql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "TempAccounts"
                                }
                            }
                        ]
                    },
                    {
                        "name": "copy_importstatus_to_azsql",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "copy_vendor_accounts_to_azsql",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "select Response_ID, lastModifiedOn\nfrom\n(\nselect Response_ID,max(modified_datetime) as 'lastModifiedOn'\nfrom [staging].em_historical_data_all  with(nolock)\nwhere CRM_FLAG= 1 \ngroup by Response_ID\n)b",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "Truncate table temp.TempMAP",
                                "writeBehavior": "insert",
                                "sqlWriterUseTableLock": false,
                                "tableOption": "autoCreate",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ds_campusesp_azuresql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "abc"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ds_campusesp_azuresql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "TempMAP"
                                }
                            }
                        ]
                    },
                    {
                        "name": "copy_finalreport_to_csv",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "copy_importstatus_to_azsql",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "select\nAccount,\nOrg,\nisnull(ReceivedDate,'') as [Most Recent Client Upload Date],\n[Import Date] as [MAP Import Date (60 Days)],\nisnull([Parent Count],'') as [Most Recent File Parent Count],\nisnull(SuccessRecordCount,'') as [RNL Export Parent Count]\n--isnull(Filename,'') as 'Filename',\n--isnull([File Purpose],'') as 'File Purpose'\n--into dbo.campusepsalert\nfrom \n\t(select \n\taccts.CampusESP as 'Org',\n\taccts.[name] as Account,\n\tMDS2.filename_source as Filename,\n\tMDS2.Date as 'ReceivedDate',\n\tmds2.Parent_Count as 'Parent Count',\n\tFC.SuccessRecordCount,\n\tISNULL(CONVERT(VARCHAR(10),MAP.lastModifiedOn, 101),'') as 'Import Date',\n\tROW_NUMBER() OVER (PARTITION BY accts.name order by CONVERT(VARCHAR(10),MAP.lastModifiedOn, 101) desc) AS rn,\n\tMDS2.rn as 'MDS_RN'\n\tfrom \n\ttemp.TempAccounts accts\n\tleft join temp.TempMDS MDS2 on accts.name COLLATE Latin1_General_CI_AS= MDS2.Accountname\n\tleft  join temp.TempMAP MAP on map.response_id= MDS2.response_id-- :Need to know use of this join\n    left join\n\t(\n\t\tSelect *\n\t\tfrom\n\t\t(\n\t\t\tselect university_name,org,insert_datetime, row_count as 'SuccessRecordCount',ROW_NUMBER() over (Partition by org order by insert_datetime desc) as rn\n\t\t\tfrom  [audit].[partner_data_profiling_log]\n\t\t\twhere\n\t\t\trow_count>0\n\t\t\tand partner_name= 'campusESP' and flow_type='forward'\n\t\t)m\n\t\twhere m.rn=1\n\t)\n\tFC on REVERSE(PARSENAME(REPLACE(REVERSE(fc.org), '_', '.'), 1)) = accts.campusesp\n)Results\nwhere (results.rn =1 or Results.Filename is null)\norder by results.[Account]",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "DelimitedTextSink",
                                "storeSettings": {
                                    "type": "AzureBlobStorageWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextWriteSettings",
                                    "quoteAllText": true,
                                    "fileExtension": ".txt"
                                }
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ds_campusesp_azuresql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "abc"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ds_campusesp_blob",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ]
                    },
                    {
                        "name": "Email - adls to sftp successful",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "copy_finalreport_to_csv",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": "https://prod-78.westus.logic.azure.com:443/workflows/4497d603faf8449494e52e40702a153b/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=c7T7VMSeWUtCvJHfu4DUgt_Vert7UP1_Q_-rNCQFmbs",
                            "connectVia": {
                                "referenceName": "AutoResolveIntegrationRuntime",
                                "type": "IntegrationRuntimeReference"
                            },
                            "method": "POST",
                            "headers": {
                                "Content-Type": "application/json"
                            },
                            "body": {
                                "value": "{\n\"DataFactoryName\": \"@{pipeline().DataFactory}\",\n\"EmailTo\": \"CampusESP_Error_Notification@ruffalonl.com;Alison.Burchett@ruffalonl.com;Betsy.Morrison@ruffalonl.com;rushikesh.Shirgoankar@ruffalonl.com\",\n\"PipelineName\": \"@{pipeline().Pipeline}\",\n\"Subject\": \"Count Log For CampusESP Files\"\n}",
                                "type": "Expression"
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "partner-Integration/send-campusesp-notification"
                },
                "annotations": [],
                "lastPublishTime": "2022-11-17T08:09:42Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip_fplus_generate_xml_files_azml')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "get_orderid_details_for_extract",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "sqlReaderQuery": {
                                    "value": "SELECT distinct co.[FqtOrderID] fqtorderid,co.[FqtOrgModelId] fqtorgmodelid,co.[OrderStatusID] orderstatusid\n,co.[FileNameSource] filenamesource,om.ModelType modeltype,co.responseid responseid\n,isnull(om.SubGroup,'No sub group')SubGroup,om.EntryTerm entryterm\n,om.ModelStatus modelstatus,om.AcademicYear academicyear,om.modelNumber modelnumber,co.uploadDetailId uploaddetailid\nFROM [fplus].[CustomerOrder] co\nleft join [fplus].[OrgModel] om on om.FqtOrgModelId = co.FqtOrgModelId\ninner join [fplus].[CustomerOrderStatus] cs on cs.[OrderStatusID] = co.[OrderStatusID] \nwhere cs.OrderStatusDesc = 'Received For Scoring' and om.modelNumber is not null and co.uploadDetailId is not null\nand co.uploaddetailid IN (151678,151702)",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_fplus_azuresynapse",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "CustomerOrder",
                                    "schemaname": "fplus",
                                    "az_synapse_crm_server": {
                                        "value": "@pipeline().parameters.az_synapse_crm_server",
                                        "type": "Expression"
                                    },
                                    "az_synapse_crm_db": {
                                        "value": "@pipeline().parameters.az_synapse_crm_db",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "foreach_fqtorderid",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "truncate_fqtxmldata",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('get_orderid_details_for_extract').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "usp_get_available_variables",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[usp_getAvailableVariables]",
                                        "storedProcedureParameters": {
                                            "fqtorderID": {
                                                "value": {
                                                    "value": "@item().fqtorderid",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "xmlDataTxt": {
                                                "value": "",
                                                "type": "String"
                                            },
                                            "xmlMapTxt": {
                                                "value": "",
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_AppboostCrmSqlDB",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "crm_servername": {
                                                "value": "@pipeline().parameters.crm_servername",
                                                "type": "Expression"
                                            },
                                            "crm_dbname": {
                                                "value": "@pipeline().parameters.crm_dbname",
                                                "type": "Expression"
                                            },
                                            "crm_username": {
                                                "value": "@pipeline().parameters.crm_username",
                                                "type": "Expression"
                                            },
                                            "vaulturl": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "get_xmldata_query",
                                    "type": "Script",
                                    "dependsOn": [
                                        {
                                            "activity": "usp_get_available_variables",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "linkedServiceName": {
                                        "referenceName": "ls_AppboostCrmSqlDB",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "crm_servername": {
                                                "value": "@pipeline().parameters.crm_servername",
                                                "type": "Expression"
                                            },
                                            "crm_dbname": {
                                                "value": "@pipeline().parameters.crm_dbname",
                                                "type": "Expression"
                                            },
                                            "crm_username": {
                                                "value": "@pipeline().parameters.crm_username",
                                                "type": "Expression"
                                            },
                                            "vaulturl": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    },
                                    "typeProperties": {
                                        "scripts": [
                                            {
                                                "type": "Query",
                                                "text": {
                                                    "value": "select xmldata,xmlmap from dbo.FQTXMLData where xmldata is not null and\nFqtOrderID = '@{item().FqtOrderID}'",
                                                    "type": "Expression"
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "If Condition1",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "get_xmldata_query",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@not(equals(string(activity('get_xmldata_query').output.resultSetCount),'0'))",
                                            "type": "Expression"
                                        },
                                        "ifFalseActivities": [
                                            {
                                                "name": "xmlquery_empty",
                                                "type": "Fail",
                                                "dependsOn": [
                                                    {
                                                        "activity": "file_audit_fplus_xml_fail_1",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "message": "Xmlquery did not result any value",
                                                    "errorCode": "40"
                                                }
                                            },
                                            {
                                                "name": "file_audit_fplus_xml_fail_1",
                                                "description": "File audit for F+ xml fail",
                                                "type": "DatabricksNotebook",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "notebookPath": "/audit-Framework/dbn-file-processing-log",
                                                    "baseParameters": {
                                                        "audit_id": "204",
                                                        "adf_run_id": {
                                                            "value": "@pipeline().RunId",
                                                            "type": "Expression"
                                                        },
                                                        "file_processing_stage": "Fplus xml - Fail",
                                                        "status": "Failed",
                                                        "row_count": "0",
                                                        "rejected_row": "0",
                                                        "server_name": {
                                                            "value": "@pipeline().parameters.az_sql_server_name",
                                                            "type": "Expression"
                                                        },
                                                        "database_name": {
                                                            "value": "@pipeline().parameters.az_sql_db_name",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_NDPdatabricks",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "databricks_workspace_url": {
                                                            "value": "@pipeline().parameters.databricks_workspace_url",
                                                            "type": "Expression"
                                                        },
                                                        "databricks_clusterid": {
                                                            "value": "@pipeline().parameters.databricks_clusterid",
                                                            "type": "Expression"
                                                        },
                                                        "vault_url": {
                                                            "value": "@pipeline().parameters.vault_url",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            }
                                        ],
                                        "ifTrueActivities": [
                                            {
                                                "name": "xml_data_file",
                                                "type": "DatabricksNotebook",
                                                "dependsOn": [
                                                    {
                                                        "activity": "xmldata",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "notebookPath": "/fplus_Xmldata_file/xml_file",
                                                    "baseParameters": {
                                                        "Folder": {
                                                            "value": "@concat('SoftScore/',item().modelnumber,'/',item().academicyear,'/',item().modeltype,'/',item().entryterm,\n'/',item().SubGroup)",
                                                            "type": "Expression"
                                                        },
                                                        "adlsName": {
                                                            "value": "@pipeline().parameters.adlsName",
                                                            "type": "Expression"
                                                        },
                                                        "applicationId": "ServicePrincipalApplicationID",
                                                        "containerName": {
                                                            "value": "@pipeline().parameters.synapse_container",
                                                            "type": "Expression"
                                                        },
                                                        "fqtorderid": {
                                                            "value": "@item().fqtorderid",
                                                            "type": "Expression"
                                                        },
                                                        "mountPath": "/mnt/prodcrmsynapse",
                                                        "secretId": "ServicePrincipalApplicationSecretValue",
                                                        "tenantId": "tenantID",
                                                        "xmlquery": {
                                                            "value": "@variables('xmldata')",
                                                            "type": "Expression"
                                                        },
                                                        "jdbc_url": {
                                                            "value": "jdbc:sqlserver://rnlndpprodcrmsynapse.sql.azuresynapse.net:1433",
                                                            "type": "Expression"
                                                        },
                                                        "xmldatafilename": {
                                                            "value": "@concat(item().uploaddetailid,'_XMLData.xml')",
                                                            "type": "Expression"
                                                        },
                                                        "database_name": {
                                                            "value": "@pipeline().parameters.az_synapse_crm_db",
                                                            "type": "Expression"
                                                        },
                                                        "softscore_dir": "SoftScore"
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_NDPdatabricks",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "databricks_workspace_url": {
                                                            "value": "@pipeline().parameters.databricks_workspace_url",
                                                            "type": "Expression"
                                                        },
                                                        "databricks_clusterid": {
                                                            "value": "@pipeline().parameters.databricks_clusterid",
                                                            "type": "Expression"
                                                        },
                                                        "vault_url": {
                                                            "value": "@pipeline().parameters.vault_url",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "xmldata",
                                                "type": "SetVariable",
                                                "dependsOn": [
                                                    {
                                                        "activity": "file_audit_fplus_xml_start",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "xmldata",
                                                    "value": {
                                                        "value": "@concat(string(activity('get_xmldata_query').output.resultsets[0].rows[0].xmldata), ' and fqtorderid =','''',item().fqtorderid,'''')",
                                                        "type": "Expression"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "file_audit_fplus_xml_start",
                                                "description": "File audit for F+ xml start",
                                                "type": "DatabricksNotebook",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "notebookPath": "/audit-Framework/dbn-file-processing-log",
                                                    "baseParameters": {
                                                        "audit_id": "204",
                                                        "adf_run_id": {
                                                            "value": "@pipeline().RunId",
                                                            "type": "Expression"
                                                        },
                                                        "file_processing_stage": "Fplus xml - Started",
                                                        "status": "Started",
                                                        "row_count": "0",
                                                        "rejected_row": "0",
                                                        "server_name": {
                                                            "value": "@pipeline().parameters.az_sql_server_name",
                                                            "type": "Expression"
                                                        },
                                                        "database_name": {
                                                            "value": "@pipeline().parameters.az_sql_db_name",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_NDPdatabricks",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "databricks_workspace_url": {
                                                            "value": "@pipeline().parameters.databricks_workspace_url",
                                                            "type": "Expression"
                                                        },
                                                        "databricks_clusterid": {
                                                            "value": "@pipeline().parameters.databricks_clusterid",
                                                            "type": "Expression"
                                                        },
                                                        "vault_url": {
                                                            "value": "@pipeline().parameters.vault_url",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "xml_map_file",
                                                "type": "Copy",
                                                "dependsOn": [
                                                    {
                                                        "activity": "fplus_xmldata_adls_sharepath",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "SqlServerSource",
                                                        "sqlReaderQuery": {
                                                            "value": "select xmlmap from dbo.FQTXMLData where xmldata is not null and\nFqtOrderID = '@{item().FqtOrderID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "sink": {
                                                        "type": "DelimitedTextSink",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSWriteSettings"
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextWriteSettings",
                                                            "quoteAllText": true,
                                                            "fileExtension": ".txt"
                                                        }
                                                    },
                                                    "enableStaging": false,
                                                    "translator": {
                                                        "type": "TabularTranslator",
                                                        "typeConversion": true,
                                                        "typeConversionSettings": {
                                                            "allowDataTruncation": true,
                                                            "treatBooleanAsNumber": false
                                                        }
                                                    }
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "ds_appboost_crm",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "crm_schema": "dbo",
                                                            "crm_table": "FQTxmldata",
                                                            "crm_servername": {
                                                                "value": "@pipeline().parameters.crm_servername",
                                                                "type": "Expression"
                                                            },
                                                            "crm_dbname": {
                                                                "value": "@pipeline().parameters.crm_dbname",
                                                                "type": "Expression"
                                                            },
                                                            "crm_username": {
                                                                "value": "@pipeline().parameters.crm_username",
                                                                "type": "Expression"
                                                            },
                                                            "vaulturl": {
                                                                "value": "@pipeline().parameters.vault_url",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "ds_fplus_xmlmap",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "container": {
                                                                "value": "@pipeline().parameters.synapse_container",
                                                                "type": "Expression"
                                                            },
                                                            "filepath": {
                                                                "value": "@concat('SoftScoreAZML/',item().modelnumber,'/',item().academicyear,'/',item().modeltype,'/',item().entryterm,\n'/',item().SubGroup)",
                                                                "type": "Expression"
                                                            },
                                                            "filename": {
                                                                "value": "@concat(item().uploaddetailid,'_XMLMap.xml')",
                                                                "type": "Expression"
                                                            },
                                                            "storageaccountname": {
                                                                "value": "@pipeline().parameters.adlsName",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "name": "file_audit_fplus_xml_complete",
                                                "description": "File audit for F+ xml complete",
                                                "type": "DatabricksNotebook",
                                                "dependsOn": [
                                                    {
                                                        "activity": "xml_map_file",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "notebookPath": "/audit-Framework/dbn-file-processing-log",
                                                    "baseParameters": {
                                                        "audit_id": "204",
                                                        "adf_run_id": {
                                                            "value": "@pipeline().RunId",
                                                            "type": "Expression"
                                                        },
                                                        "file_processing_stage": "Fplus xml - Complete",
                                                        "status": "Completed",
                                                        "row_count": "0",
                                                        "rejected_row": "0",
                                                        "server_name": {
                                                            "value": "@pipeline().parameters.az_sql_server_name",
                                                            "type": "Expression"
                                                        },
                                                        "database_name": {
                                                            "value": "@pipeline().parameters.az_sql_db_name",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_NDPdatabricks",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "databricks_workspace_url": {
                                                            "value": "@pipeline().parameters.databricks_workspace_url",
                                                            "type": "Expression"
                                                        },
                                                        "databricks_clusterid": {
                                                            "value": "@pipeline().parameters.databricks_clusterid",
                                                            "type": "Expression"
                                                        },
                                                        "vault_url": {
                                                            "value": "@pipeline().parameters.vault_url",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "file_audit_fplus_xml_fail",
                                                "description": "File audit for F+ xml fail",
                                                "type": "DatabricksNotebook",
                                                "dependsOn": [
                                                    {
                                                        "activity": "update_customer_order_status",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "notebookPath": "/audit-Framework/dbn-file-processing-log",
                                                    "baseParameters": {
                                                        "audit_id": "204",
                                                        "adf_run_id": {
                                                            "value": "@pipeline().RunId",
                                                            "type": "Expression"
                                                        },
                                                        "file_processing_stage": "Fplus xml - Started",
                                                        "status": "Started",
                                                        "row_count": "0",
                                                        "rejected_row": "0",
                                                        "server_name": {
                                                            "value": "@pipeline().parameters.az_sql_server_name",
                                                            "type": "Expression"
                                                        },
                                                        "database_name": {
                                                            "value": "@pipeline().parameters.az_sql_db_name",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_NDPdatabricks",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "databricks_workspace_url": {
                                                            "value": "@pipeline().parameters.databricks_workspace_url",
                                                            "type": "Expression"
                                                        },
                                                        "databricks_clusterid": {
                                                            "value": "@pipeline().parameters.databricks_clusterid",
                                                            "type": "Expression"
                                                        },
                                                        "vault_url": {
                                                            "value": "@pipeline().parameters.vault_url",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "update_customer_order_status",
                                                "description": "Sent for scoring",
                                                "type": "Script",
                                                "dependsOn": [
                                                    {
                                                        "activity": "xml_map_file",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "linkedServiceName": {
                                                    "referenceName": "ls_AzureSynapseAnalyticsCrmDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "az_synapse_crm_server": {
                                                            "value": "@pipeline().parameters.az_synapse_crm_server",
                                                            "type": "Expression"
                                                        },
                                                        "az_synapse_crm_db": {
                                                            "value": "@pipeline().parameters.az_synapse_crm_db",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                },
                                                "typeProperties": {
                                                    "scripts": [
                                                        {
                                                            "type": "Query",
                                                            "text": {
                                                                "value": "update [fplus].[CustomerOrder] \nset OrderStatusID = (select orderstatusid from [fplus].[CustomerOrderStatus] \nwhere orderstatusdesc = 'Sent For Scoring') \nwhere fqtorderid = '@{item().fqtorderid}'",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "fplus_xmldata_adls_sharepath",
                                                "type": "Copy",
                                                "dependsOn": [
                                                    {
                                                        "activity": "xml_data_file",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "DelimitedTextSource",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSReadSettings",
                                                            "recursive": false,
                                                            "enablePartitionDiscovery": false
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextReadSettings"
                                                        }
                                                    },
                                                    "sink": {
                                                        "type": "DelimitedTextSink",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSWriteSettings"
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextWriteSettings",
                                                            "quoteAllText": true,
                                                            "fileExtension": ".txt"
                                                        }
                                                    },
                                                    "enableStaging": false,
                                                    "translator": {
                                                        "type": "TabularTranslator",
                                                        "typeConversion": true,
                                                        "typeConversionSettings": {
                                                            "allowDataTruncation": true,
                                                            "treatBooleanAsNumber": false
                                                        }
                                                    }
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "ds_fplus_xmlmap",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "container": {
                                                                "value": "@pipeline().parameters.synapse_container",
                                                                "type": "Expression"
                                                            },
                                                            "filepath": {
                                                                "value": "@concat('SoftScore/',item().modelnumber,'/',item().academicyear,'/',item().modeltype,'/',item().entryterm,\n'/',item().SubGroup)",
                                                                "type": "Expression"
                                                            },
                                                            "filename": {
                                                                "value": "@concat(item().uploaddetailid,'_XMLData.xml')",
                                                                "type": "Expression"
                                                            },
                                                            "storageaccountname": {
                                                                "value": "@pipeline().parameters.adlsName",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "ds_fplus_xmlmap",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "container": "@pipeline().parameters.synapse_container",
                                                            "filepath": {
                                                                "value": "@concat('SoftScoreAZML/',item().modelnumber,'/',item().academicyear,'/',item().modeltype,'/',item().entryterm,\n'/',item().SubGroup)",
                                                                "type": "Expression"
                                                            },
                                                            "filename": {
                                                                "value": "@concat(item().uploaddetailid,'_XMLData.xml')",
                                                                "type": "Expression"
                                                            },
                                                            "storageaccountname": {
                                                                "value": "@pipeline().parameters.adlsName",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "name": "z_scoring file creation",
                                                "type": "Copy",
                                                "dependsOn": [
                                                    {
                                                        "activity": "xml_map_file",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "@concat('SELECT ','''SoftScoreAZML/',item().modelnumber,'/',item().academicyear,'/',item().modeltype,'/',item().entryterm,\n'/',item().SubGroup,'/*',item().uploaddetailid,'''')",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "sink": {
                                                        "type": "DelimitedTextSink",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSWriteSettings"
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextWriteSettings",
                                                            "quoteAllText": true,
                                                            "fileExtension": ".txt"
                                                        }
                                                    },
                                                    "enableStaging": false,
                                                    "translator": {
                                                        "type": "TabularTranslator",
                                                        "typeConversion": true,
                                                        "typeConversionSettings": {
                                                            "allowDataTruncation": true,
                                                            "treatBooleanAsNumber": false
                                                        }
                                                    }
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "ds_azure_sql",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "tablename": "file_metadata",
                                                            "schemaname": "audit",
                                                            "az_server_name": {
                                                                "value": "@pipeline().parameters.az_sql_server_name",
                                                                "type": "Expression"
                                                            },
                                                            "az_sql_db": {
                                                                "value": "@pipeline().parameters.az_sql_db_name",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "ds_fplus_xmlmap",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "container": {
                                                                "value": "@pipeline().parameters.synapse_container",
                                                                "type": "Expression"
                                                            },
                                                            "filepath": {
                                                                "value": "@concat('SoftScoreAZML/z_scoring/incoming')",
                                                                "type": "Expression"
                                                            },
                                                            "filename": {
                                                                "value": "@concat(item().modelnumber,'.txt')",
                                                                "type": "Expression"
                                                            },
                                                            "storageaccountname": {
                                                                "value": "@pipeline().parameters.adlsName",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "name": "copy_scoreslst_to_adls",
                                                "type": "Copy",
                                                "dependsOn": [
                                                    {
                                                        "activity": "z_scoring file creation",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "DelimitedTextSource",
                                                        "storeSettings": {
                                                            "type": "FileServerReadSettings",
                                                            "recursive": false,
                                                            "enablePartitionDiscovery": false
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextReadSettings"
                                                        }
                                                    },
                                                    "sink": {
                                                        "type": "DelimitedTextSink",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSWriteSettings"
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextWriteSettings",
                                                            "quoteAllText": true,
                                                            "fileExtension": ".txt"
                                                        }
                                                    },
                                                    "enableStaging": false,
                                                    "translator": {
                                                        "type": "TabularTranslator",
                                                        "typeConversion": true,
                                                        "typeConversionSettings": {
                                                            "allowDataTruncation": true,
                                                            "treatBooleanAsNumber": false
                                                        }
                                                    }
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "ds_fplus_shared_folder",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "directory": {
                                                                "value": "@concat('UAT/',item().modelnumber,'/',item().academicyear,'/',item().modeltype,'/',item().entryterm,\n'/',item().SubGroup)",
                                                                "type": "Expression"
                                                            },
                                                            "filename": {
                                                                "value": "@concat('estscore.lst')",
                                                                "type": "Expression"
                                                            },
                                                            "fplus_host": {
                                                                "value": "@pipeline().parameters.fplus_host",
                                                                "type": "Expression"
                                                            },
                                                            "fplus_username": {
                                                                "value": "@pipeline().parameters.fplus_username",
                                                                "type": "Expression"
                                                            },
                                                            "vaulturl": {
                                                                "value": "@pipeline().parameters.vault_url",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "ds_fplus_xmlmap",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "container": {
                                                                "value": "prodcrmsynapse",
                                                                "type": "Expression"
                                                            },
                                                            "filepath": {
                                                                "value": "@concat('SoftScoreAZML/',item().modelnumber,'/',item().academicyear,'/',item().modeltype,'/',item().entryterm,\n'/',item().SubGroup)",
                                                                "type": "Expression"
                                                            },
                                                            "filename": {
                                                                "value": "@concat('estscore.lst')",
                                                                "type": "Expression"
                                                            },
                                                            "storageaccountname": {
                                                                "value": "rnlndpproddls",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "truncate_fqtxmldata",
                        "type": "Script",
                        "dependsOn": [
                            {
                                "activity": "get_orderid_details_for_extract",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "linkedServiceName": {
                            "referenceName": "ls_AppboostCrmSqlDB",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "crm_servername": {
                                    "value": "@pipeline().parameters.crm_servername",
                                    "type": "Expression"
                                },
                                "crm_dbname": {
                                    "value": "@pipeline().parameters.crm_dbname",
                                    "type": "Expression"
                                },
                                "crm_username": {
                                    "value": "@pipeline().parameters.crm_username",
                                    "type": "Expression"
                                },
                                "vaulturl": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        },
                        "typeProperties": {
                            "scripts": [
                                {
                                    "type": "Query",
                                    "text": {
                                        "value": "truncate table dbo.FQTXMLData",
                                        "type": "Expression"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "az_sql_server_name": {
                        "type": "string",
                        "defaultValue": "rnlndpprodazsql01.database.windows.net"
                    },
                    "az_sql_db_name": {
                        "type": "string",
                        "defaultValue": "NDPPRODSQLDB"
                    },
                    "synapse_container": {
                        "type": "string",
                        "defaultValue": "prodcrmsynapse"
                    },
                    "adlsName": {
                        "type": "string",
                        "defaultValue": "rnlndpproddls"
                    },
                    "az_synapse_crm_server": {
                        "type": "string",
                        "defaultValue": "rnlndpprodcrmsynapse.sql.azuresynapse.net"
                    },
                    "az_synapse_crm_db": {
                        "type": "string",
                        "defaultValue": "NDPPRODCRMPL1"
                    },
                    "crm_servername": {
                        "type": "string",
                        "defaultValue": "10.26.0.22"
                    },
                    "crm_dbname": {
                        "type": "string",
                        "defaultValue": "RNLMAPQA_MSCRM"
                    },
                    "crm_username": {
                        "type": "string",
                        "defaultValue": "svc_az_ndp"
                    },
                    "vault_url": {
                        "type": "string",
                        "defaultValue": "https://rnlndp-prodkeyvault.vault.azure.net/"
                    },
                    "databricks_workspace_url": {
                        "type": "string",
                        "defaultValue": "https://adb-6587840185446536.16.azuredatabricks.net"
                    },
                    "databricks_clusterid": {
                        "type": "string",
                        "defaultValue": "0714-203005-9conw1v0"
                    },
                    "fplus_host": {
                        "type": "string",
                        "defaultValue": "\\\\10.3.30.67\\SoftScore"
                    },
                    "fplus_username": {
                        "type": "string",
                        "defaultValue": "RNLWINSASCOMP1\\svc_prod_fqt"
                    }
                },
                "variables": {
                    "xmldata": {
                        "type": "String"
                    },
                    "modelnumber": {
                        "type": "Array"
                    }
                },
                "folder": {
                    "name": "F+/Forward Flow"
                },
                "annotations": [],
                "lastPublishTime": "2022-09-27T14:23:55Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_TriggerScoring_FPLUS_ML_Pipelines')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Get Blob Content",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://rnlndpproddls.blob.core.windows.net/prodcrmsynapse/SoftScoreAZML/z_scoring/incoming/',pipeline().parameters.fname)",
                                "type": "Expression"
                            },
                            "connectVia": {
                                "referenceName": "AutoResolveIntegrationRuntime",
                                "type": "IntegrationRuntimeReference"
                            },
                            "method": "GET",
                            "headers": {
                                "x-ms-version": " 2017-11-09",
                                "x-ms-blob-type": "BlockBlob"
                            },
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://storage.azure.com/"
                            }
                        }
                    },
                    {
                        "name": "assign-variable",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "Get Blob Content",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "blob_content",
                            "value": {
                                "value": "@trim(activity('Get Blob Content').output.Response)",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Machine Learning Execute Pipeline1",
                        "type": "AzureMLExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "assign-variable",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "experimentName": "RNL_Fplus_Scoring_prod_pipeline_trigger",
                            "mlPipelineParameters": {
                                "input_text": {
                                    "value": "@{variables('blob_content')}",
                                    "type": "Expression"
                                }
                            },
                            "mlPipelineEndpointId": "6c31ecb5-f323-4cd6-ae05-17c525f1a4af"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureMLServiceprod",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "copy files to complted folder",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Machine Learning Execute Pipeline1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "AzureBlobStorageReadSettings",
                                    "recursive": true,
                                    "wildcardFolderPath": "SoftScoreAZML/z_scoring/incoming",
                                    "wildcardFileName": {
                                        "value": "@pipeline().parameters.fname",
                                        "type": "Expression"
                                    },
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "DelimitedTextSink",
                                "storeSettings": {
                                    "type": "AzureBlobStorageWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextWriteSettings",
                                    "quoteAllText": true,
                                    "fileExtension": ".txt"
                                }
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "fplusscoringdataset",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "fplus_scoring_file_sink",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ]
                    },
                    {
                        "name": "Delete incoming files which ran well",
                        "type": "Delete",
                        "dependsOn": [
                            {
                                "activity": "copy files to complted folder",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "fplusscoringdataset",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "enableLogging": false,
                            "storeSettings": {
                                "type": "AzureBlobStorageReadSettings",
                                "recursive": true,
                                "wildcardFileName": {
                                    "value": "@{pipeline().parameters.fname}",
                                    "type": "Expression"
                                },
                                "enablePartitionDiscovery": false
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "blobaddress": {
                        "type": "string",
                        "defaultValue": "https://rnlndpproddls.blob.core.windows.net/prodcrmsynapse/SoftScoreAZML/z_scoring/incoming/"
                    },
                    "fname": {
                        "type": "string",
                        "defaultValue": "@triggerBody().fileName"
                    }
                },
                "variables": {
                    "blob_content": {
                        "type": "String"
                    }
                },
                "annotations": [],
                "lastPublishTime": "2022-12-05T08:46:56Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_TriggerScoring_AFAS_ML_Pipelines')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Machine Learning Execute Pipeline",
                        "type": "AzureMLExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "experimentName": "RNL_AFAS_Scoring_pipeline_DF_trigger",
                            "mlPipelineParameters": {
                                "input_text": {
                                    "value": "@{variables('blob_content')}",
                                    "type": "Expression"
                                }
                            },
                            "mlPipelineEndpointId": "b66f5713-1cee-4671-8152-1c6c259f424f"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureMLServiceprod",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "copy files to completed folder",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Machine Learning Execute Pipeline",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "AzureBlobStorageReadSettings",
                                    "recursive": true,
                                    "wildcardFolderPath": "AFAS_Az_Pipeline_Scoring/Exports",
                                    "wildcardFileName": {
                                        "value": "@pipeline().parameters.fname",
                                        "type": "Expression"
                                    },
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "DelimitedTextSink",
                                "storeSettings": {
                                    "type": "AzureBlobStorageWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextWriteSettings",
                                    "quoteAllText": true,
                                    "fileExtension": ".csv"
                                }
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "AFAS_Scoring_dataset",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "AFAS_Scoring_export_File_sink",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ]
                    },
                    {
                        "name": "Delete incoming files which ran well",
                        "type": "Delete",
                        "dependsOn": [
                            {
                                "activity": "copy files to completed folder",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "AFAS_Scoring_dataset",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "enableLogging": false,
                            "storeSettings": {
                                "type": "AzureBlobStorageReadSettings",
                                "recursive": true,
                                "wildcardFileName": {
                                    "value": "@{pipeline().parameters.fname}",
                                    "type": "Expression"
                                },
                                "enablePartitionDiscovery": false
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "fname": {
                        "type": "string",
                        "defaultValue": "@triggerBody().fileName"
                    }
                },
                "variables": {
                    "blob_content": {
                        "type": "String"
                    }
                },
                "annotations": [],
                "lastPublishTime": "2022-11-08T04:35:12Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-copy-paquet-synapse')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy data1",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "ParquetSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                }
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "allowPolyBase": true,
                                "polyBaseSettings": {
                                    "rejectValue": 0,
                                    "rejectType": "value",
                                    "useTypeDefault": true
                                },
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "ds_adls_parquet",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": "prodcrmsynapse",
                                    "FilePath": "crm_to_ads/contactbase",
                                    "FileName": "contactbase.parquet",
                                    "storage_account_name": "rnlndpproddls"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ADS_Enrichment_reference1",
                                "type": "DatasetReference",
                                "parameters": {
                                    "schema": "dbo",
                                    "TableName": "stg_ContactBase_test",
                                    "az_synapse_crm_server": "rnlndpprodcrmsynapse.sql.azuresynapse.net",
                                    "az_synapse_crm_db": "NDPPRODCRMPL1"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "test_pipelines"
                },
                "annotations": [],
                "lastPublishTime": "2022-11-10T04:45:28Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-em-data-enrichment-master_EMScoring_Melissa_Parallel_Lookup')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Start ETL Audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "504",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Started",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "END ETL Audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "Audit_Query-Data Enrichment Success",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "505",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Completed",
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Get Response Ids",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Start ETL Audit",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "Select Response_id from config.Enrichment_Melissa",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "Enrichment_Melissa",
                                    "schemaname": "dbo",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.az_server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.az_database_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Melissa Enrichment Loop",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get Response Ids",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Response Ids').output.value",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 5,
                            "activities": [
                                {
                                    "name": "Melissa Pipeline",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pip-em-melissa-addressenrichment-EMScoring_Parallel_Lookup",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_server_name",
                                                "type": "Expression"
                                            },
                                            "az_database_name": {
                                                "value": "@pipeline().parameters.az_database_name",
                                                "type": "Expression"
                                            },
                                            "response_id": {
                                                "value": "@item().response_id",
                                                "type": "Expression"
                                            },
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "SP - Alignment History Sync MD Success",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Melissa Enrichment Loop",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 360,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[usp_DE_Update_EmScoring_Parallel]",
                            "storedProcedureParameters": {
                                "Enrichment": {
                                    "value": "Melissa",
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_AzureSqlDB",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "az_server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "az_sql_db": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Query-Data Enrichment Success",
                        "description": "Fetching details from customer_address_base for Audit insert",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "SP - Alignment History Sync MD Success",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "DROP TABLE IF EXISTS #temp\nselect distinct  response_id\n                ,mapping_id\n                ,account_name\n                ,modified_fileName\n                --,max(md_received_date) as max_md_received_date\n                ,count(*) RecordCount\n                ,md_flag\nINTO #temp\nfrom alignment.customer_address_base a\n--where md_flag in ('Enriched','Not Enriched')\nwhere md_flag not in ('No Enrichment')\nand not exists (Select 'X' from audit.dia_manual b\n                where a.response_id = b.response_id\n                and a.mapping_id = b.mapping_id\n                and Process_Layer = 'Enrichment'\n                and dia_status = 'DE_Completed')\ngroup by response_id, mapping_id, account_name, modified_fileName,md_flag\n\nMERGE audit.data_Enrichment AS TARGET\nUSING #temp AS SOURCE\nON TARGET.response_id = SOURCE.response_id\nAnd TARGET.mapping_id = SOURCE.mapping_id\nAND TARGET.flags = SOURCE.md_flag\nWHEN MATCHED AND TARGET.Count_MD <> SOURCE.RecordCount\nTHEN UPDATE SET TARGET.Count_MD = SOURCE.RecordCount\nWHEN NOT MATCHED BY TARGET \nTHEN INSERT (response_id\n            ,mapping_id\n            ,account_name\n            ,modified_fileName\n            ,table_name\n            ,process_layer\n            ,count_MD\n            ,flags\n            ,placed_by\n            ,actions_taken\n            ,insert_datetime\n            ,insert_by)\nVALUES (    \n             SOURCE.response_id\n             ,SOURCE.mapping_id\n             ,SOURCE.account_name\n             ,SOURCE.modified_fileName\n             ,'customer_address_base'\n             ,'Enrichment'\n             ,SOURCE.RecordCount\n             ,SOURCE.md_flag\n             ,'External Platform'\n             ,'Enrichment'\n             ,format(getdate(),'yyyy-MM-dd HH:mm:ss')\n             ,'Melissa Pipeline');\n\nSELECT 1",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "customer_address_base",
                                    "schemaname": "alignment",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.az_server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.az_database_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "SP - Alignment History Sync MD Failure",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Melissa Enrichment Loop",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 360,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[usp_DE_Update_EmScoring_Parallel]",
                            "storedProcedureParameters": {
                                "Enrichment": {
                                    "value": "Melissa",
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_AzureSqlDB",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "az_server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "az_sql_db": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Query-Data Enrichment Failure",
                        "description": "Fetching details from customer_address_base for Audit insert",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "SP - Alignment History Sync MD Failure",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "DROP TABLE IF EXISTS #temp\nselect distinct  response_id\n                ,mapping_id\n                ,account_name\n                ,modified_fileName\n                --,max(md_received_date) as max_md_received_date\n                ,count(*) RecordCount\n                ,md_flag\nINTO #temp\nfrom alignment.customer_address_base a\n--where md_flag in ('Enriched','Not Enriched')\nwhere md_flag not in ('No Enrichment')\nand not exists (Select 'X' from audit.dia_manual b\n                where a.response_id = b.response_id\n                and a.mapping_id = b.mapping_id\n                and Process_Layer = 'Enrichment'\n                and dia_status = 'DE_Completed')\ngroup by response_id, mapping_id, account_name, modified_fileName,md_flag\n\nMERGE audit.data_Enrichment AS TARGET\nUSING #temp AS SOURCE\nON TARGET.response_id = SOURCE.response_id\nAnd TARGET.mapping_id = SOURCE.mapping_id\nAND TARGET.flags = SOURCE.md_flag\nWHEN MATCHED AND TARGET.Count_MD <> SOURCE.RecordCount\nTHEN UPDATE SET TARGET.Count_MD = SOURCE.RecordCount\nWHEN NOT MATCHED BY TARGET \nTHEN INSERT (response_id\n            ,mapping_id\n            ,account_name\n            ,modified_fileName\n            ,table_name\n            ,process_layer\n            ,count_MD\n            ,flags\n            ,placed_by\n            ,actions_taken\n            ,insert_datetime\n            ,insert_by)\nVALUES (    \n             SOURCE.response_id\n             ,SOURCE.mapping_id\n             ,SOURCE.account_name\n             ,SOURCE.modified_fileName\n             ,'customer_address_base'\n             ,'Enrichment'\n             ,SOURCE.RecordCount\n             ,SOURCE.md_flag\n             ,'External Platform'\n             ,'Enrichment'\n             ,format(getdate(),'yyyy-MM-dd HH:mm:ss')\n             ,'Melissa Pipeline');\n\nSELECT 1",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "customer_address_base",
                                    "schemaname": "alignment",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.az_server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.az_database_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "END ETL Audit_copy1",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "Audit_Query-Data Enrichment Failure",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "506",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Failed",
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "concurrency": 1,
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "databricks_workspace_url": {
                        "type": "string"
                    },
                    "databricks_clusterid": {
                        "type": "string"
                    },
                    "vault_url": {
                        "type": "string"
                    },
                    "az_server_name": {
                        "type": "string"
                    },
                    "az_database_name": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Dataenrichment/Master Enrichments"
                },
                "annotations": [],
                "lastPublishTime": "2022-11-14T01:04:47Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-em-data-enrichment-master_EMScoring_Melissa_Parallel_usp')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Start ETL Audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "504",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Started",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "END ETL Audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "Audit_Query-Data Enrichment Success",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "505",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Completed",
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Get Response Ids",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Start ETL Audit",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "Select Response_id from config.Enrichment_Melissa",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "Enrichment_Melissa",
                                    "schemaname": "dbo",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.az_server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.az_database_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Melissa Enrichment Loop",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get Response Ids",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Response Ids').output.value",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 5,
                            "activities": [
                                {
                                    "name": "Melissa Pipeline",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pip-em-melissa-addressenrichment-EMScoring_Parallel_usp",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_server_name",
                                                "type": "Expression"
                                            },
                                            "az_database_name": {
                                                "value": "@pipeline().parameters.az_database_name",
                                                "type": "Expression"
                                            },
                                            "response_id": {
                                                "value": "@item().response_id",
                                                "type": "Expression"
                                            },
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "SP - Alignment History Sync MD Success",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Melissa Enrichment Loop",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 360,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[usp_DE_Update_EmScoring_Parallel]",
                            "storedProcedureParameters": {
                                "Enrichment": {
                                    "value": "Melissa",
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_AzureSqlDB",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "az_server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "az_sql_db": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Query-Data Enrichment Success",
                        "description": "Fetching details from customer_address_base for Audit insert",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "SP - Alignment History Sync MD Success",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "DROP TABLE IF EXISTS #temp\nselect distinct  response_id\n                ,mapping_id\n                ,account_name\n                ,modified_fileName\n                --,max(md_received_date) as max_md_received_date\n                ,count(*) RecordCount\n                ,md_flag\nINTO #temp\nfrom alignment.customer_address_base a\n--where md_flag in ('Enriched','Not Enriched')\nwhere md_flag not in ('No Enrichment')\nand not exists (Select 'X' from audit.dia_manual b\n                where a.response_id = b.response_id\n                and a.mapping_id = b.mapping_id\n                and Process_Layer = 'Enrichment'\n                and dia_status = 'DE_Completed')\ngroup by response_id, mapping_id, account_name, modified_fileName,md_flag\n\nMERGE audit.data_Enrichment AS TARGET\nUSING #temp AS SOURCE\nON TARGET.response_id = SOURCE.response_id\nAnd TARGET.mapping_id = SOURCE.mapping_id\nAND TARGET.flags = SOURCE.md_flag\nWHEN MATCHED AND TARGET.Count_MD <> SOURCE.RecordCount\nTHEN UPDATE SET TARGET.Count_MD = SOURCE.RecordCount\nWHEN NOT MATCHED BY TARGET \nTHEN INSERT (response_id\n            ,mapping_id\n            ,account_name\n            ,modified_fileName\n            ,table_name\n            ,process_layer\n            ,count_MD\n            ,flags\n            ,placed_by\n            ,actions_taken\n            ,insert_datetime\n            ,insert_by)\nVALUES (    \n             SOURCE.response_id\n             ,SOURCE.mapping_id\n             ,SOURCE.account_name\n             ,SOURCE.modified_fileName\n             ,'customer_address_base'\n             ,'Enrichment'\n             ,SOURCE.RecordCount\n             ,SOURCE.md_flag\n             ,'External Platform'\n             ,'Enrichment'\n             ,format(getdate(),'yyyy-MM-dd HH:mm:ss')\n             ,'Melissa Pipeline');\n\nSELECT 1",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "customer_address_base",
                                    "schemaname": "alignment",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.az_server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.az_database_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "SP - Alignment History Sync MD Failure",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Melissa Enrichment Loop",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 360,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[usp_DE_Update_EmScoring_Parallel]",
                            "storedProcedureParameters": {
                                "Enrichment": {
                                    "value": "Melissa",
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_AzureSqlDB",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "az_server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "az_sql_db": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Query-Data Enrichment Failure",
                        "description": "Fetching details from customer_address_base for Audit insert",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "SP - Alignment History Sync MD Failure",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "DROP TABLE IF EXISTS #temp\nselect distinct  response_id\n                ,mapping_id\n                ,account_name\n                ,modified_fileName\n                --,max(md_received_date) as max_md_received_date\n                ,count(*) RecordCount\n                ,md_flag\nINTO #temp\nfrom alignment.customer_address_base a\n--where md_flag in ('Enriched','Not Enriched')\nwhere md_flag not in ('No Enrichment')\nand not exists (Select 'X' from audit.dia_manual b\n                where a.response_id = b.response_id\n                and a.mapping_id = b.mapping_id\n                and Process_Layer = 'Enrichment'\n                and dia_status = 'DE_Completed')\ngroup by response_id, mapping_id, account_name, modified_fileName,md_flag\n\nMERGE audit.data_Enrichment AS TARGET\nUSING #temp AS SOURCE\nON TARGET.response_id = SOURCE.response_id\nAnd TARGET.mapping_id = SOURCE.mapping_id\nAND TARGET.flags = SOURCE.md_flag\nWHEN MATCHED AND TARGET.Count_MD <> SOURCE.RecordCount\nTHEN UPDATE SET TARGET.Count_MD = SOURCE.RecordCount\nWHEN NOT MATCHED BY TARGET \nTHEN INSERT (response_id\n            ,mapping_id\n            ,account_name\n            ,modified_fileName\n            ,table_name\n            ,process_layer\n            ,count_MD\n            ,flags\n            ,placed_by\n            ,actions_taken\n            ,insert_datetime\n            ,insert_by)\nVALUES (    \n             SOURCE.response_id\n             ,SOURCE.mapping_id\n             ,SOURCE.account_name\n             ,SOURCE.modified_fileName\n             ,'customer_address_base'\n             ,'Enrichment'\n             ,SOURCE.RecordCount\n             ,SOURCE.md_flag\n             ,'External Platform'\n             ,'Enrichment'\n             ,format(getdate(),'yyyy-MM-dd HH:mm:ss')\n             ,'Melissa Pipeline');\n\nSELECT 1",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "customer_address_base",
                                    "schemaname": "alignment",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.az_server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.az_database_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "END ETL Audit_copy1",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "Audit_Query-Data Enrichment Failure",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "506",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Failed",
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "concurrency": 1,
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "databricks_workspace_url": {
                        "type": "string",
                        "defaultValue": "https://adb-6587840185446536.16.azuredatabricks.net"
                    },
                    "databricks_clusterid": {
                        "type": "string",
                        "defaultValue": "0714-203005-9conw1v0"
                    },
                    "vault_url": {
                        "type": "string",
                        "defaultValue": "https://rnlndp-prodkeyvault.vault.azure.net/"
                    },
                    "az_server_name": {
                        "type": "string",
                        "defaultValue": "rnlndpprodazsql01.database.windows.net"
                    },
                    "az_database_name": {
                        "type": "string",
                        "defaultValue": "NDPPRODSQLDB"
                    }
                },
                "folder": {
                    "name": "Dataenrichment/Master Enrichments"
                },
                "annotations": [],
                "lastPublishTime": "2022-11-14T01:04:47Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-upsert-po-application_copy1')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "get_parquet_file_list",
                        "description": "Get the number of parquet files generated in ADLS",
                        "type": "GetMetadata",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "ds_adls_parquet",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": "crmalignment",
                                    "FilePath": {
                                        "value": "@concat('prod_data_correction/',pipeline().parameters.response_id,'/po_application.parquet')",
                                        "type": "Expression"
                                    },
                                    "FileName": "*.parquet",
                                    "storage_account_name": {
                                        "value": "@pipeline().parameters.storage_account_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "fieldList": [
                                "childItems"
                            ],
                            "storeSettings": {
                                "type": "AzureBlobFSReadSettings",
                                "recursive": true,
                                "enablePartitionDiscovery": false
                            }
                        }
                    },
                    {
                        "name": "loop_parquet_files",
                        "description": "Loop through each parquet file",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "get_parquet_file_list",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('get_parquet_file_list').output.childItems",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "upsert_po_application",
                                    "description": "copy data from parquet file to po_application in crm",
                                    "type": "Copy",
                                    "dependsOn": [
                                        {
                                            "activity": "copy_stg_table",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "AzureSqlSource",
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "sink": {
                                            "type": "DynamicsSink",
                                            "writeBatchSize": 10,
                                            "writeBehavior": "upsert",
                                            "ignoreNullValues": true,
                                            "alternateKeyName": "po_internalid"
                                        },
                                        "enableStaging": false,
                                        "enableSkipIncompatibleRow": true,
                                        "logSettings": {
                                            "enableCopyActivityLog": true,
                                            "copyActivityLogSettings": {
                                                "logLevel": "Warning",
                                                "enableReliableLogging": false
                                            },
                                            "logLocationSettings": {
                                                "linkedServiceName": {
                                                    "referenceName": "ls_Azuredatalakegen2",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "storageaccountname": {
                                                            "value": "@pipeline().parameters.storage_account_name",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                },
                                                "path": {
                                                    "value": "@concat('crmalignment/log/',pipeline().parameters.parent_runid,'/',pipeline().parameters.response_id)",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "typeConversion": true,
                                            "typeConversionSettings": {
                                                "allowDataTruncation": true,
                                                "treatBooleanAsNumber": false
                                            }
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "ds_azure_sql",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "tablename": "stg_po_application_prod_data_correction",
                                                "schemaname": "alignment",
                                                "az_server_name": {
                                                    "value": "@pipeline().parameters.azure_sql_server_name",
                                                    "type": "Expression"
                                                },
                                                "az_sql_db": {
                                                    "value": "@pipeline().parameters.azure_sql_database_name",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "ds_dynamics_crm",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "EntityName": "po_application"
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "copy_stg_table",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "ParquetSource",
                                            "storeSettings": {
                                                "type": "AzureBlobFSReadSettings",
                                                "recursive": true,
                                                "enablePartitionDiscovery": false
                                            }
                                        },
                                        "sink": {
                                            "type": "AzureSqlSink",
                                            "preCopyScript": "IF OBJECT_ID(N'alignment.stg_po_application_prod_data_correction') IS NOT NULL\n        truncate table alignment.stg_po_application_prod_data_correction",
                                            "writeBehavior": "insert",
                                            "sqlWriterUseTableLock": false,
                                            "tableOption": "autoCreate",
                                            "disableMetricsCollection": false
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "typeConversion": true,
                                            "typeConversionSettings": {
                                                "allowDataTruncation": true,
                                                "treatBooleanAsNumber": false
                                            }
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "ds_crm_parquet",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "foldername": {
                                                    "value": "@concat('prod_data_correction/',pipeline().parameters.response_id,'/po_application.parquet')",
                                                    "type": "Expression"
                                                },
                                                "filename": "@item().name",
                                                "storage_account_name": {
                                                    "value": "@pipeline().parameters.storage_account_name",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "ds_azure_sql",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "tablename": "stg_po_application_prod_data_correction",
                                                "schemaname": "alignment",
                                                "az_server_name": {
                                                    "value": "@pipeline().parameters.azure_sql_server_name",
                                                    "type": "Expression"
                                                },
                                                "az_sql_db": {
                                                    "value": "@pipeline().parameters.azure_sql_database_name",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "azure_sql_database_name": {
                        "type": "string",
                        "defaultValue": "NDPPRODSQLDB"
                    },
                    "azure_sql_server_name": {
                        "type": "string",
                        "defaultValue": "rnlndpprodazsql01.database.windows.net"
                    },
                    "crm_server_name": {
                        "type": "string",
                        "defaultValue": "10.200.0.22"
                    },
                    "crm_database_name": {
                        "type": "string",
                        "defaultValue": "RNLMAP_MSCRM"
                    },
                    "response_id": {
                        "type": "string",
                        "defaultValue": "99b0fc2c-3961-ed11-a9dd-000d3a062608"
                    },
                    "storage_account_name": {
                        "type": "string",
                        "defaultValue": "rnlndpproddls"
                    },
                    "vault_url": {
                        "type": "string",
                        "defaultValue": "https://rnlndp-prodkeyvault.vault.azure.net/"
                    },
                    "crm_username": {
                        "type": "string",
                        "defaultValue": "svc_az_ndp"
                    },
                    "parent_runid": {
                        "type": "string",
                        "defaultValue": "123_prod_fix"
                    }
                },
                "folder": {
                    "name": "test_pipelines"
                },
                "annotations": [],
                "lastPublishTime": "2022-11-18T18:33:43Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-SearchVendor-Unzip-addSourceCode')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "UnZip and add SourceCode",
                        "type": "ForEach",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@pipeline().parameters.UnZipaddSoucreCode",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 10,
                            "activities": [
                                {
                                    "name": "Unzip and SourceCode Column",
                                    "type": "Copy",
                                    "dependsOn": [
                                        {
                                            "activity": "var SourceCode",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "DelimitedTextSource",
                                            "additionalColumns": [
                                                {
                                                    "name": "Source_Code",
                                                    "value": {
                                                        "value": "@variables('vSourceCode')",
                                                        "type": "Expression"
                                                    }
                                                }
                                            ],
                                            "storeSettings": {
                                                "type": "AzureBlobFSReadSettings",
                                                "recursive": true,
                                                "wildcardFolderPath": {
                                                    "value": "@pipeline().parameters.InputFilePath",
                                                    "type": "Expression"
                                                },
                                                "wildcardFileName": {
                                                    "value": "@item().name",
                                                    "type": "Expression"
                                                },
                                                "enablePartitionDiscovery": false
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextReadSettings",
                                                "compressionProperties": {
                                                    "type": "ZipDeflateReadSettings",
                                                    "preserveZipFileNameAsFolder": false
                                                }
                                            }
                                        },
                                        "sink": {
                                            "type": "DelimitedTextSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextWriteSettings",
                                                "quoteAllText": true,
                                                "fileExtension": ".txt"
                                            }
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "typeConversion": true,
                                            "typeConversionSettings": {
                                                "allowDataTruncation": true,
                                                "treatBooleanAsNumber": false
                                            }
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "ds_adls_input",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "ContainerName": {
                                                    "value": "@pipeline().parameters.ContainerName",
                                                    "type": "Expression"
                                                },
                                                "FilePath": {
                                                    "value": "@pipeline().parameters.InputFilePath",
                                                    "type": "Expression"
                                                },
                                                "storageaccountname": {
                                                    "value": "@pipeline().parameters.adlsName",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "ds_adls_withoutheader",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "Container": {
                                                    "value": "@pipeline().parameters.ContainerName",
                                                    "type": "Expression"
                                                },
                                                "FilePath": {
                                                    "value": "@pipeline().parameters.IntermediateFilePath",
                                                    "type": "Expression"
                                                },
                                                "FileName": {
                                                    "value": "@concat(substring(item().name,0,add(length(item().name),-3)),'csv')",
                                                    "type": "Expression"
                                                },
                                                "storageaccountname": {
                                                    "value": "@pipeline().parameters.adlsName",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "var SourceCode",
                                    "type": "SetVariable",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "vSourceCode",
                                        "value": {
                                            "value": "@string(substring(item().name,0,lastIndexOf(item().name,'-')))",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "ETL Audit - Unzip and SourceCode Column",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [
                                        {
                                            "activity": "Unzip and SourceCode Column",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                                        "baseParameters": {
                                            "audit_id": "107",
                                            "adf_run_id": {
                                                "value": "@pipeline().GroupId",
                                                "type": "Expression"
                                            },
                                            "adf_pipeline_name": {
                                                "value": "@pipeline()?.TriggeredByPipelineName",
                                                "type": "Expression"
                                            },
                                            "adf_trigger_name": {
                                                "value": "@pipeline().TriggerTime",
                                                "type": "Expression"
                                            },
                                            "pipeline_status": "Failed",
                                            "error_description": {
                                                "value": "@activity('Unzip and SourceCode Column').output.errors[0].Message",
                                                "type": "Expression"
                                            },
                                            "server_name": {
                                                "value": "@pipeline().parameters.az_sql_server_name",
                                                "type": "Expression"
                                            },
                                            "database_name": {
                                                "value": "@pipeline().parameters.az_sql_db_name",
                                                "type": "Expression"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_NDPdatabricks",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "ContainerName": {
                        "type": "string"
                    },
                    "InputFilePath": {
                        "type": "string"
                    },
                    "storageaccountname": {
                        "type": "string"
                    },
                    "IntermediateFilePath": {
                        "type": "string"
                    },
                    "adlsName": {
                        "type": "string"
                    },
                    "databricks_workspace_url": {
                        "type": "string"
                    },
                    "databricks_clusterid": {
                        "type": "string"
                    },
                    "vault_url": {
                        "type": "string"
                    },
                    "UnZipaddSoucreCode": {
                        "type": "array"
                    },
                    "az_sql_server_name": {
                        "type": "string"
                    },
                    "az_sql_db_name": {
                        "type": "string"
                    }
                },
                "variables": {
                    "vSourceCode": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Datalanding/SearchVendortoADLS/Parallel"
                },
                "annotations": [],
                "lastPublishTime": "2022-11-25T19:11:46Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-SearchVendor-Rollup-Rename')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Check vendor folder names",
                        "type": "IfCondition",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(pipeline().parameters.VendorFolderName,'College Board')\n",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Roll Up and Rename",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "DelimitedTextSource",
                                            "storeSettings": {
                                                "type": "AzureBlobFSReadSettings",
                                                "recursive": true,
                                                "wildcardFolderPath": {
                                                    "value": "@pipeline().parameters.IntermediateFilePath",
                                                    "type": "Expression"
                                                },
                                                "wildcardFileName": "*",
                                                "enablePartitionDiscovery": false
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextReadSettings"
                                            }
                                        },
                                        "sink": {
                                            "type": "DelimitedTextSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings",
                                                "copyBehavior": "MergeFiles"
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextWriteSettings",
                                                "quoteAllText": true,
                                                "fileExtension": ".txt"
                                            }
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "typeConversion": true,
                                            "typeConversionSettings": {
                                                "allowDataTruncation": true,
                                                "treatBooleanAsNumber": false
                                            }
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "ds_adls_withoutheader",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "Container": {
                                                    "value": "@pipeline().parameters.ContainerName",
                                                    "type": "Expression"
                                                },
                                                "FilePath": {
                                                    "value": "@pipeline().parameters.IntermediateFilePath",
                                                    "type": "Expression"
                                                },
                                                "FileName": "*",
                                                "storageaccountname": {
                                                    "value": "@pipeline().parameters.adlsName",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "ds_adls_withoutheader",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "Container": {
                                                    "value": "@pipeline().parameters.ContainerName",
                                                    "type": "Expression"
                                                },
                                                "FilePath": {
                                                    "value": "@concat(pipeline().parameters.OutputFilepath,'/EM/EM Search Vendor Data/',formatDateTime(utcnow(), 'yyyy'),'/',formatDateTime(utcnow(), 'MM'), '/', formatDateTime(utcnow(), 'dd'),'/', pipeline().parameters.AccountName)",
                                                    "type": "Expression"
                                                },
                                                "FileName": {
                                                    "value": "@pipeline().parameters.NewFileName",
                                                    "type": "Expression"
                                                },
                                                "storageaccountname": {
                                                    "value": "@pipeline().parameters.adlsName",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "File Audit - Roll Up and Rename",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [
                                        {
                                            "activity": "Roll Up and Rename",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": "/audit-Framework/dbn-file-processing-log",
                                        "baseParameters": {
                                            "audit_id": "101",
                                            "adf_run_id": {
                                                "value": "@pipeline().GroupId",
                                                "type": "Expression"
                                            },
                                            "response_id": {
                                                "value": "@pipeline().parameters.NewResponseID",
                                                "type": "Expression"
                                            },
                                            "purpose_file_name": {
                                                "value": "@pipeline().parameters.PurposeName",
                                                "type": "Expression"
                                            },
                                            "account_name": {
                                                "value": "@pipeline().parameters.AccountName",
                                                "type": "Expression"
                                            },
                                            "file_processing_stage": "Raw",
                                            "status": "Copied In Raw Folder",
                                            "row_count": {
                                                "value": "@string(activity('Roll Up and Rename').output.rowsRead)",
                                                "type": "Expression"
                                            },
                                            "rejected_row": "0",
                                            "server_name": {
                                                "value": "@pipeline().parameters.az_sql_server_name",
                                                "type": "Expression"
                                            },
                                            "database_name": {
                                                "value": "@pipeline().parameters.az_sql_db_name",
                                                "type": "Expression"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_NDPdatabricks",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "ETL Audit - Unzip and SourceCode Column_copy1",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [
                                        {
                                            "activity": "Roll Up and Rename",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                                        "baseParameters": {
                                            "audit_id": "107",
                                            "adf_run_id": {
                                                "value": "@pipeline().GroupId",
                                                "type": "Expression"
                                            },
                                            "adf_pipeline_name": {
                                                "value": "@pipeline().GroupId",
                                                "type": "Expression"
                                            },
                                            "adf_trigger_name": {
                                                "value": "@pipeline().TriggerName",
                                                "type": "Expression"
                                            },
                                            "pipeline_status": "Failed",
                                            "error_description": {
                                                "value": "@activity('Roll Up and Rename').output.errors[0].Message",
                                                "type": "Expression"
                                            },
                                            "server_name": {
                                                "value": "@pipeline().parameters.az_sql_server_name",
                                                "type": "Expression"
                                            },
                                            "database_name": {
                                                "value": "@pipeline().parameters.az_sql_db_name",
                                                "type": "Expression"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_NDPdatabricks",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "Roll Up and Rename_College Board",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "DelimitedTextSource",
                                            "storeSettings": {
                                                "type": "AzureBlobFSReadSettings",
                                                "recursive": true,
                                                "wildcardFolderPath": {
                                                    "value": "@pipeline().parameters.IntermediateFilePath",
                                                    "type": "Expression"
                                                },
                                                "wildcardFileName": "*",
                                                "enablePartitionDiscovery": false
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextReadSettings"
                                            }
                                        },
                                        "sink": {
                                            "type": "DelimitedTextSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings",
                                                "copyBehavior": "MergeFiles"
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextWriteSettings",
                                                "quoteAllText": true,
                                                "fileExtension": ".txt"
                                            }
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "typeConversion": true,
                                            "typeConversionSettings": {
                                                "allowDataTruncation": true,
                                                "treatBooleanAsNumber": false
                                            }
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "ds_adls_withoutheader",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "Container": {
                                                    "value": "@pipeline().parameters.ContainerName",
                                                    "type": "Expression"
                                                },
                                                "FilePath": {
                                                    "value": "@pipeline().parameters.IntermediateFilePath",
                                                    "type": "Expression"
                                                },
                                                "FileName": "*",
                                                "storageaccountname": {
                                                    "value": "@pipeline().parameters.adlsName",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "ds_adls_withoutheader",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "Container": {
                                                    "value": "@pipeline().parameters.ContainerName",
                                                    "type": "Expression"
                                                },
                                                "FilePath": {
                                                    "value": "@concat(pipeline().parameters.IntermediateFilePath,'/staging')",
                                                    "type": "Expression"
                                                },
                                                "FileName": {
                                                    "value": "@pipeline().parameters.NewFileName",
                                                    "type": "Expression"
                                                },
                                                "storageaccountname": {
                                                    "value": "@pipeline().parameters.adlsName",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "File Audit - Roll Up and Rename_College Board",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [
                                        {
                                            "activity": "Roll Up and Rename_College Board",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": "/audit-Framework/dbn-file-processing-log",
                                        "baseParameters": {
                                            "audit_id": "101",
                                            "adf_run_id": {
                                                "value": "@pipeline().GroupId",
                                                "type": "Expression"
                                            },
                                            "response_id": {
                                                "value": "@pipeline().parameters.NewResponseID",
                                                "type": "Expression"
                                            },
                                            "purpose_file_name": {
                                                "value": "@pipeline().parameters.PurposeName",
                                                "type": "Expression"
                                            },
                                            "account_name": {
                                                "value": "@pipeline().parameters.AccountName",
                                                "type": "Expression"
                                            },
                                            "file_processing_stage": "Raw",
                                            "status": "Copied In Raw Folder",
                                            "row_count": {
                                                "value": "@string(activity('Roll Up and Rename_College Board').output.rowsRead)",
                                                "type": "Expression"
                                            },
                                            "rejected_row": "0",
                                            "server_name": {
                                                "value": "@pipeline().parameters.az_sql_server_name",
                                                "type": "Expression"
                                            },
                                            "database_name": {
                                                "value": "@pipeline().parameters.az_sql_db_name",
                                                "type": "Expression"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_NDPdatabricks",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "ETL Audit - Roll Up and Rename_College Board",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [
                                        {
                                            "activity": "Roll Up and Rename_College Board",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                                        "baseParameters": {
                                            "audit_id": "107",
                                            "adf_run_id": {
                                                "value": "@pipeline().GroupId",
                                                "type": "Expression"
                                            },
                                            "adf_pipeline_name": {
                                                "value": "@pipeline().TriggerName",
                                                "type": "Expression"
                                            },
                                            "adf_trigger_name": {
                                                "value": "@pipeline().TriggerName",
                                                "type": "Expression"
                                            },
                                            "pipeline_status": "Failed",
                                            "error_description": {
                                                "value": "@activity('Roll Up and Rename_College Board').output.errors[0].Message",
                                                "type": "Expression"
                                            },
                                            "server_name": {
                                                "value": "@pipeline().parameters.az_sql_server_name",
                                                "type": "Expression"
                                            },
                                            "database_name": {
                                                "value": "@pipeline().parameters.az_sql_db_name",
                                                "type": "Expression"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_NDPdatabricks",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "dbn-merge-searchvendor-cb-file",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [
                                        {
                                            "activity": "Roll Up and Rename_College Board",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": "/dbn-merge-searchvendor-cb-file",
                                        "baseParameters": {
                                            "FileName": {
                                                "value": "@pipeline().parameters.NewFileName",
                                                "type": "Expression"
                                            },
                                            "adlsName": {
                                                "value": "@pipeline().parameters.adlsName",
                                                "type": "Expression"
                                            },
                                            "containerName": {
                                                "value": "@pipeline().parameters.ContainerName",
                                                "type": "Expression"
                                            },
                                            "mountPath": "/mnt/datalanding",
                                            "rawpath": {
                                                "value": "@concat(pipeline().parameters.IntermediateFilePath,'/staging')",
                                                "type": "Expression"
                                            },
                                            "destinationpath": {
                                                "value": "@concat(pipeline().parameters.OutputFilepath,'/EM/EM Search Vendor Data/',formatDateTime(utcnow(), 'yyyy'),'/',formatDateTime(utcnow(), 'MM'), '/', formatDateTime(utcnow(), 'dd'),'/', pipeline().parameters.AccountName)",
                                                "type": "Expression"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_NDPdatabricks",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "VendorFolderName": {
                        "type": "string"
                    },
                    "ContainerName": {
                        "type": "string"
                    },
                    "InputFilePath": {
                        "type": "string"
                    },
                    "storageaccountname": {
                        "type": "string"
                    },
                    "IntermediateFilePath": {
                        "type": "string"
                    },
                    "adlsName": {
                        "type": "string"
                    },
                    "NewFileName": {
                        "type": "string"
                    },
                    "OutputFilepath": {
                        "type": "string"
                    },
                    "AccountName": {
                        "type": "string"
                    },
                    "databricks_workspace_url": {
                        "type": "string"
                    },
                    "databricks_clusterid": {
                        "type": "string"
                    },
                    "vault_url": {
                        "type": "string"
                    },
                    "az_sql_server_name": {
                        "type": "string"
                    },
                    "az_sql_db_name": {
                        "type": "string"
                    },
                    "PurposeName": {
                        "type": "string"
                    },
                    "NewResponseID": {
                        "type": "string"
                    }
                },
                "variables": {
                    "VendorFolderName": {
                        "type": "String"
                    },
                    "NewFileName": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Datalanding/SearchVendortoADLS/Parallel"
                },
                "annotations": [],
                "lastPublishTime": "2022-11-29T02:42:37Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/trg-sp-Cultivator')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "Cultivator trigger stored procedure execution",
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "pip-master-powerbi-storedprocedure-crmsynapse",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "group_name": "[parameters('trg-sp-Cultivator_properties_pip-master-powerbi-storedprocedure-crmsynapse_parameters_group_name')]",
                            "exclude_group_dependency": "[parameters('trg-sp-Cultivator_properties_pip-master-powerbi-storedprocedure-crmsynapse_parameters_exclude_group_dependency')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Hour",
                        "interval": 24,
                        "startTime": "2022-09-03T20:30:00",
                        "timeZone": "Eastern Standard Time"
                    }
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/trg-sp-Email_peformance_AC_Survey_Result')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "Email_peformance_AC_Survey_Result trigger stored procedure execution",
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "pip-master-powerbi-storedprocedure-crmsynapse",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "group_name": "[parameters('trg-sp-Email_peformance_AC_Survey_Result_properties_pip-master-powerbi-storedprocedure-crmsynapse_parameters_group_name')]",
                            "exclude_group_dependency": "[parameters('trg-sp-Email_peformance_AC_Survey_Result_properties_pip-master-powerbi-storedprocedure-crmsynapse_parameters_exclude_group_dependency')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Hour",
                        "interval": 24,
                        "startTime": "2022-09-04T22:30:00",
                        "timeZone": "Eastern Standard Time"
                    }
                }
            },
            "dependsOn": []
        }
    ]
}