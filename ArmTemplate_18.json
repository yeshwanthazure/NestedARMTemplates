{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "factoryName": {
            "type": "string",
            "metadata": "Data Factory name",
            "defaultValue": "RNLADFNDPPROD"
        }
    },
    "variables": {
        "factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
    },
    "resources": [
        {
            "name": "[concat(parameters('factoryName'), '/pip-em-data-enrichment-master_EMScoring_Master')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Update enrichment status",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Pacific East Enrichment Loop",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Pacific East Enrichment Parallel Loop",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "Drop table if Exists #FilesEnriched\n\nSelect modified_fileName \ninto #FilesEnriched\n\t   from (\n\t\t\tSelect modified_fileName\n\t\t\t,Case when MD_addressbase in ('DIA Review','DIA Approved') \n\t\t\t   or PE_Addressbase in ('DIA Review','DIA Approved') \n\t\t\t   or PE_Contactbase in ('DIA Review','DIA Approved') \n\t\t\tThen 1 else 0 end DE_Count\n\t\t\tfrom (\n\t\t\t\t Select count(*) as CNT\n\t\t\t\t ,a.modified_fileName\n\t\t\t\t ,a.md_flag MD_addressbase\n\t\t\t\t ,a.pe_flag PE_Addressbase\n\t\t\t\t ,b.pe_flag PE_Contactbase\n\t\t\t\t from alignment.customer_address_base a\n\t\t\t\t join alignment.contactbase b\n\t\t\t\t on a.modified_fileName = b.modified_fileName\n\t\t\t\t and a.source_key = b.source_key\n\t\t\t\t where  b.CRM_FLAg = 2 \n\t\t\t\t group by a.modified_fileName\n\t\t\t\t ,a.md_flag,a.pe_flag,b.pe_flag\n\t\t\t\t ) drv\n\t\t\t) drv2\n\t\t\tgroup by modified_fileName having sum(DE_Count) = 0\n\n\nUpdate A\n    Set  Enrichment = 1\n        ,DE_Status = 'Enriched'\n        ,insert_datetime = getdate()\n    From audit.ADS_Reference_Log A\n    Where DE_Status <> 'Enriched'\n\tand exists (Select 'X' From #FilesEnriched B\n\t\t\t\t\tWhere A.modified_filename = b.modified_fileName)\n\n\nUpdate A \n    Set  dia_status = 'DE_Completed'\n        ,insert_datetime = getdate()\n    From audit.dia_manual A\n    join audit.ADS_Reference_Log b\n    on a.source_file_name = b.modified_filename\n    Where A.Process_Layer = 'Enrichment'\n    and B.DE_Status = 'Enriched'\n    and A.dia_status = 'DE_Started'\n    and exists (Select 'X' From #FilesEnriched C\n\t\t\t        Where A.source_file_name = C.modified_fileName)\n\n--Drop table if Exists #FilesStillNotEnriched\n\n--Select  distinct a.modified_fileName \n--\t\tinto #FilesStillNotEnriched\n--\t\tfrom alignment.customer_address_base a\n--        join alignment.contactbase b\n--        on a.modified_fileName = b.modified_fileName\n--\t\tand a.source_key = b.source_key\n--               where  b.CRM_FLAg = 2 and (b.pe_flag in ('DIA Review','DIA Approved')  \n--\t\t\t\t\tor a.md_flag in ('DIA Review','DIA Approved'))\n\n\n\n--Select  distinct a.modified_fileName \n--\t\tinto #FilesEnriched\n--\t\tfrom alignment.customer_address_base a\n--        join alignment.contactbase b\n--        on a.modified_fileName = b.modified_fileName\n--\t\tand a.source_key = b.source_key\n--               where  b.CRM_FLAg = 2 and (b.pe_flag not in ('DIA Review','DIA Approved') \n--\t\t\t\t\tand a.md_flag not in ('DIA Review','DIA Approved'))\n\n\nSELECT 1",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "ADS_Reference_Log",
                                    "schemaname": "audit",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.az_server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.az_database_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Start ETL Audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "501",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Started",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "END ETL Audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "Update enrichment status",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "502",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Completed",
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Delete - configEnrichment_Clean",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Start ETL Audit",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "Delete from config.Enrichment\nwhere purpose_name='EM Scoring'\n\nSelect 1",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "Enrichment",
                                    "schemaname": "config",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.az_server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.az_database_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Get Response Ids",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Delete - configEnrichment_Clean",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "Select distinct trim(a.response_id) response_id from audit.ADS_Reference_Log a\njoin audit.dia_manual b on a.response_id = b.response_id\nwhere ADS_Reference = 1\nand Enrichment <> 1\nand Process_Layer = 'Enrichment'\nand dia_status = 'DE_Started'\nand b.purpose_name = 'EM Scoring'",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "Enrichment_Melissa",
                                    "schemaname": "dbo",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.az_server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.az_database_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Melissa Enrichment Loop",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get Response Ids",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Response Ids').output.value",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 10,
                            "activities": [
                                {
                                    "name": "Melissa Pipeline",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pip-em-melissa-addressenrichment-EMScoring_Parallel_Lookup",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_server_name",
                                                "type": "Expression"
                                            },
                                            "az_database_name": {
                                                "value": "@pipeline().parameters.az_database_name",
                                                "type": "Expression"
                                            },
                                            "response_id": {
                                                "value": "@item().response_id",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "SP - Alignment History Sync MD",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "Melissa Pipeline",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[usp_DE_Update]",
                                        "storedProcedureParameters": {
                                            "Enrichment": {
                                                "value": "Melissa",
                                                "type": "String"
                                            },
                                            "response_id": {
                                                "value": {
                                                    "value": "@item().response_id",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_AzureSqlDB",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_server_name",
                                                "type": "Expression"
                                            },
                                            "az_sql_db": {
                                                "value": "@pipeline().parameters.az_database_name",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Pacific East Enrichment Loop",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Melissa Enrichment Loop",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Response Ids').output.value",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 10,
                            "activities": [
                                {
                                    "name": "Pacific East Pipeline",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pip-em-pacificeast-enrichment_EM_Scoring",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_server_name",
                                                "type": "Expression"
                                            },
                                            "az_database_name": {
                                                "value": "@pipeline().parameters.az_database_name",
                                                "type": "Expression"
                                            },
                                            "response_id": {
                                                "value": "@item().response_id",
                                                "type": "Expression"
                                            },
                                            "purpose_name": "EM Scoring",
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "SP - Alignment History Sync PE",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "Pacific East Pipeline",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[usp_DE_Update]",
                                        "storedProcedureParameters": {
                                            "Enrichment": {
                                                "value": "PacificEast",
                                                "type": "String"
                                            },
                                            "response_id": {
                                                "value": {
                                                    "value": "@item().response_id",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_AzureSqlDB",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_server_name",
                                                "type": "Expression"
                                            },
                                            "az_sql_db": {
                                                "value": "@pipeline().parameters.az_database_name",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Pacific East Enrichment Parallel Loop",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get Response Ids",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Response Ids').output.value",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 10,
                            "activities": [
                                {
                                    "name": "Parallel Pacific East Pipeline",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pip-em-pacificeast-enrichment_EM_Scoring",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_server_name",
                                                "type": "Expression"
                                            },
                                            "az_database_name": {
                                                "value": "@pipeline().parameters.az_database_name",
                                                "type": "Expression"
                                            },
                                            "response_id": {
                                                "value": "@item().response_id",
                                                "type": "Expression"
                                            },
                                            "purpose_name": "EM Scoring",
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "SP - Alignment History Sync PE Parallel",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "Parallel Pacific East Pipeline",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[usp_DE_Update]",
                                        "storedProcedureParameters": {
                                            "Enrichment": {
                                                "value": "PacificEast",
                                                "type": "String"
                                            },
                                            "response_id": {
                                                "value": {
                                                    "value": "@item().response_id",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_AzureSqlDB",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_server_name",
                                                "type": "Expression"
                                            },
                                            "az_sql_db": {
                                                "value": "@pipeline().parameters.az_database_name",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "databricks_workspace_url": {
                        "type": "string"
                    },
                    "databricks_clusterid": {
                        "type": "string"
                    },
                    "vault_url": {
                        "type": "string"
                    },
                    "az_server_name": {
                        "type": "string"
                    },
                    "az_database_name": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Dataenrichment/SubMasterPipelines"
                },
                "annotations": [],
                "lastPublishTime": "2022-11-14T01:04:47Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-em-data-enrichment-master_EMSuppression_Master')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Update enrichment status",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Pacific East Enrichment Loop",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Pacific East Enrichment Parallel Loop",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "Drop table if Exists #FilesEnriched\n\nSelect modified_fileName \ninto #FilesEnriched\n\t   from (\n\t\t\tSelect modified_fileName\n\t\t\t,Case when MD_addressbase in ('DIA Review','DIA Approved') \n\t\t\t   or PE_Addressbase in ('DIA Review','DIA Approved') \n\t\t\t   or PE_Contactbase in ('DIA Review','DIA Approved') \n\t\t\tThen 1 else 0 end DE_Count\n\t\t\tfrom (\n\t\t\t\t Select count(*) as CNT\n\t\t\t\t ,a.modified_fileName\n\t\t\t\t ,a.md_flag MD_addressbase\n\t\t\t\t ,a.pe_flag PE_Addressbase\n\t\t\t\t ,b.pe_flag PE_Contactbase\n\t\t\t\t from alignment.customer_address_base a\n\t\t\t\t join alignment.contactbase b\n\t\t\t\t on a.modified_fileName = b.modified_fileName\n\t\t\t\t and a.source_key = b.source_key\n\t\t\t\t where  b.CRM_FLAg = 2 \n\t\t\t\t group by a.modified_fileName\n\t\t\t\t ,a.md_flag,a.pe_flag,b.pe_flag\n\t\t\t\t ) drv\n\t\t\t) drv2\n\t\t\tgroup by modified_fileName having sum(DE_Count) = 0\n\n\nUpdate A\n    Set  Enrichment = 1\n        ,DE_Status = 'Enriched'\n        ,insert_datetime = getdate()\n    From audit.ADS_Reference_Log A\n    Where DE_Status <> 'Enriched'\n\tand exists (Select 'X' From #FilesEnriched B\n\t\t\t\t\tWhere A.modified_filename = b.modified_fileName)\n\n\nUpdate A \n    Set  dia_status = 'DE_Completed'\n        ,insert_datetime = getdate()\n    From audit.dia_manual A\n    join audit.ADS_Reference_Log b\n    on a.source_file_name = b.modified_filename\n    Where A.Process_Layer = 'Enrichment'\n    and B.DE_Status = 'Enriched'\n    and A.dia_status = 'DE_Started'\n    and exists (Select 'X' From #FilesEnriched C\n\t\t\t        Where A.source_file_name = C.modified_fileName)\n\n--Drop table if Exists #FilesStillNotEnriched\n\n--Select  distinct a.modified_fileName \n--\t\tinto #FilesStillNotEnriched\n--\t\tfrom alignment.customer_address_base a\n--        join alignment.contactbase b\n--        on a.modified_fileName = b.modified_fileName\n--\t\tand a.source_key = b.source_key\n--               where  b.CRM_FLAg = 2 and (b.pe_flag in ('DIA Review','DIA Approved')  \n--\t\t\t\t\tor a.md_flag in ('DIA Review','DIA Approved'))\n\n\n\n--Select  distinct a.modified_fileName \n--\t\tinto #FilesEnriched\n--\t\tfrom alignment.customer_address_base a\n--        join alignment.contactbase b\n--        on a.modified_fileName = b.modified_fileName\n--\t\tand a.source_key = b.source_key\n--               where  b.CRM_FLAg = 2 and (b.pe_flag not in ('DIA Review','DIA Approved') \n--\t\t\t\t\tand a.md_flag not in ('DIA Review','DIA Approved'))\n\n\nSELECT 1",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "ADS_Reference_Log",
                                    "schemaname": "audit",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.az_server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.az_database_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Start ETL Audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "501",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Started",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "END ETL Audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "Update enrichment status",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "502",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Completed",
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Delete - configEnrichment_Clean",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Start ETL Audit",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "Delete from config.Enrichment\nwhere purpose_name='EM Suppression'\n\nSelect 1",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "Enrichment",
                                    "schemaname": "config",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.az_server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.az_database_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Get Response Ids",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Delete - configEnrichment_Clean",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "Select distinct trim(a.response_id) response_id from audit.ADS_Reference_Log a\njoin audit.dia_manual b on a.response_id = b.response_id\nwhere ADS_Reference = 1\nand Enrichment <> 1\nand Process_Layer = 'Enrichment'\nand dia_status = 'DE_Started'\nand b.purpose_name = 'EM Suppression'",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "Enrichment_Melissa",
                                    "schemaname": "dbo",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.az_server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.az_database_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Melissa Enrichment Loop",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get Response Ids",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Response Ids').output.value",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 10,
                            "activities": [
                                {
                                    "name": "Melissa Pipeline",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pip-em-melissa-addressenrichment-EMSuppression",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_server_name",
                                                "type": "Expression"
                                            },
                                            "az_database_name": {
                                                "value": "@pipeline().parameters.az_database_name",
                                                "type": "Expression"
                                            },
                                            "response_id": {
                                                "value": "@item().response_id",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "SP - Alignment History Sync MD",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "Melissa Pipeline",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[usp_DE_Update]",
                                        "storedProcedureParameters": {
                                            "Enrichment": {
                                                "value": "Melissa",
                                                "type": "String"
                                            },
                                            "response_id": {
                                                "value": {
                                                    "value": "@item().response_id",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_AzureSqlDB",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_server_name",
                                                "type": "Expression"
                                            },
                                            "az_sql_db": {
                                                "value": "@pipeline().parameters.az_database_name",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Pacific East Enrichment Loop",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Melissa Enrichment Loop",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Response Ids').output.value",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 10,
                            "activities": [
                                {
                                    "name": "Pacific East Pipeline",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pip-em-pacificeast-enrichment_EM_Suppression",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_server_name",
                                                "type": "Expression"
                                            },
                                            "az_database_name": {
                                                "value": "@pipeline().parameters.az_database_name",
                                                "type": "Expression"
                                            },
                                            "response_id": {
                                                "value": "@item().response_id",
                                                "type": "Expression"
                                            },
                                            "purpose_name": "EM Suppression",
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "SP - Alignment History Sync PE",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "Pacific East Pipeline",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[usp_DE_Update]",
                                        "storedProcedureParameters": {
                                            "Enrichment": {
                                                "value": "PacificEast",
                                                "type": "String"
                                            },
                                            "response_id": {
                                                "value": {
                                                    "value": "@item().response_id",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_AzureSqlDB",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_server_name",
                                                "type": "Expression"
                                            },
                                            "az_sql_db": {
                                                "value": "@pipeline().parameters.az_database_name",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Pacific East Enrichment Parallel Loop",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get Response Ids",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Response Ids').output.value",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 10,
                            "activities": [
                                {
                                    "name": "Parallel Pacific East Pipeline",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pip-em-pacificeast-enrichment_EM_Suppression",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_server_name",
                                                "type": "Expression"
                                            },
                                            "az_database_name": {
                                                "value": "@pipeline().parameters.az_database_name",
                                                "type": "Expression"
                                            },
                                            "response_id": {
                                                "value": "@item().response_id",
                                                "type": "Expression"
                                            },
                                            "purpose_name": "EM Suppression",
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "SP - Alignment History Sync PE Parallel",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "Parallel Pacific East Pipeline",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[usp_DE_Update]",
                                        "storedProcedureParameters": {
                                            "Enrichment": {
                                                "value": "PacificEast",
                                                "type": "String"
                                            },
                                            "response_id": {
                                                "value": {
                                                    "value": "@item().response_id",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_AzureSqlDB",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_server_name",
                                                "type": "Expression"
                                            },
                                            "az_sql_db": {
                                                "value": "@pipeline().parameters.az_database_name",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "databricks_workspace_url": {
                        "type": "string"
                    },
                    "databricks_clusterid": {
                        "type": "string"
                    },
                    "vault_url": {
                        "type": "string"
                    },
                    "az_server_name": {
                        "type": "string"
                    },
                    "az_database_name": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Dataenrichment/SubMasterPipelines"
                },
                "annotations": [],
                "lastPublishTime": "2022-08-22T15:01:13Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-em-data-enrichment-master_EMMarketing_Master')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Update enrichment status",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Pacific East Enrichment Loop",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Pacific East Enrichment Parallel Loop",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "Drop table if Exists #FilesEnriched\n\nSelect modified_fileName \ninto #FilesEnriched\n\t   from (\n\t\t\tSelect modified_fileName\n\t\t\t,Case when MD_addressbase in ('DIA Review','DIA Approved') \n\t\t\t   or PE_Addressbase in ('DIA Review','DIA Approved') \n\t\t\t   or PE_Contactbase in ('DIA Review','DIA Approved') \n\t\t\tThen 1 else 0 end DE_Count\n\t\t\tfrom (\n\t\t\t\t Select count(*) as CNT\n\t\t\t\t ,a.modified_fileName\n\t\t\t\t ,a.md_flag MD_addressbase\n\t\t\t\t ,a.pe_flag PE_Addressbase\n\t\t\t\t ,b.pe_flag PE_Contactbase\n\t\t\t\t from alignment.customer_address_base a\n\t\t\t\t join alignment.contactbase b\n\t\t\t\t on a.modified_fileName = b.modified_fileName\n\t\t\t\t and a.source_key = b.source_key\n\t\t\t\t where  b.CRM_FLAg = 2 \n\t\t\t\t group by a.modified_fileName\n\t\t\t\t ,a.md_flag,a.pe_flag,b.pe_flag\n\t\t\t\t ) drv\n\t\t\t) drv2\n\t\t\tgroup by modified_fileName having sum(DE_Count) = 0\n\n\nUpdate A\n    Set  Enrichment = 1\n        ,DE_Status = 'Enriched'\n        ,insert_datetime = getdate()\n    From audit.ADS_Reference_Log A\n    Where DE_Status <> 'Enriched'\n\tand exists (Select 'X' From #FilesEnriched B\n\t\t\t\t\tWhere A.modified_filename = b.modified_fileName)\n\n\nUpdate A \n    Set  dia_status = 'DE_Completed'\n        ,insert_datetime = getdate()\n    From audit.dia_manual A\n    join audit.ADS_Reference_Log b\n    on a.source_file_name = b.modified_filename\n    Where A.Process_Layer = 'Enrichment'\n    and B.DE_Status = 'Enriched'\n    and A.dia_status = 'DE_Started'\n    and exists (Select 'X' From #FilesEnriched C\n\t\t\t        Where A.source_file_name = C.modified_fileName)\n\n--Drop table if Exists #FilesStillNotEnriched\n\n--Select  distinct a.modified_fileName \n--\t\tinto #FilesStillNotEnriched\n--\t\tfrom alignment.customer_address_base a\n--        join alignment.contactbase b\n--        on a.modified_fileName = b.modified_fileName\n--\t\tand a.source_key = b.source_key\n--               where  b.CRM_FLAg = 2 and (b.pe_flag in ('DIA Review','DIA Approved')  \n--\t\t\t\t\tor a.md_flag in ('DIA Review','DIA Approved'))\n\n\n\n--Select  distinct a.modified_fileName \n--\t\tinto #FilesEnriched\n--\t\tfrom alignment.customer_address_base a\n--        join alignment.contactbase b\n--        on a.modified_fileName = b.modified_fileName\n--\t\tand a.source_key = b.source_key\n--               where  b.CRM_FLAg = 2 and (b.pe_flag not in ('DIA Review','DIA Approved') \n--\t\t\t\t\tand a.md_flag not in ('DIA Review','DIA Approved'))\n\n\nSELECT 1",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "ADS_Reference_Log",
                                    "schemaname": "audit",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.az_server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.az_database_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Start ETL Audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "501",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Started",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "END ETL Audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "Update enrichment status",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "502",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Completed",
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Delete - configEnrichment_Clean",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Start ETL Audit",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "Delete from config.Enrichment\nwhere purpose_name='EM Marketing'\n\nSelect 1",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "Enrichment",
                                    "schemaname": "config",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.az_server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.az_database_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Get Response Ids",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Delete - configEnrichment_Clean",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "Select distinct trim(a.response_id) response_id from audit.ADS_Reference_Log a\njoin audit.dia_manual b on a.response_id = b.response_id\nwhere ADS_Reference = 1\nand Enrichment <> 1\nand Process_Layer = 'Enrichment'\nand dia_status = 'DE_Started'\nand b.purpose_name = 'EM Marketing'",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "Enrichment_Melissa",
                                    "schemaname": "dbo",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.az_server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.az_database_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Melissa Enrichment Loop",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get Response Ids",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Response Ids').output.value",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 10,
                            "activities": [
                                {
                                    "name": "Melissa Pipeline",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pip-em-melissa-addressenrichment-EMMarketing",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_server_name",
                                                "type": "Expression"
                                            },
                                            "az_database_name": {
                                                "value": "@pipeline().parameters.az_database_name",
                                                "type": "Expression"
                                            },
                                            "response_id": {
                                                "value": "@item().response_id",
                                                "type": "Expression"
                                            },
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "SP - Alignment History Sync MD",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "Melissa Pipeline",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[usp_DE_Update]",
                                        "storedProcedureParameters": {
                                            "Enrichment": {
                                                "value": "Melissa",
                                                "type": "String"
                                            },
                                            "response_id": {
                                                "value": {
                                                    "value": "@item().response_id",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_AzureSqlDB",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_server_name",
                                                "type": "Expression"
                                            },
                                            "az_sql_db": {
                                                "value": "@pipeline().parameters.az_database_name",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Pacific East Enrichment Loop",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Melissa Enrichment Loop",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Response Ids').output.value",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 10,
                            "activities": [
                                {
                                    "name": "Pacific East Pipeline",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pip-em-pacificeast-enrichment_EM_Marketing",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_server_name",
                                                "type": "Expression"
                                            },
                                            "az_database_name": {
                                                "value": "@pipeline().parameters.az_database_name",
                                                "type": "Expression"
                                            },
                                            "response_id": {
                                                "value": "@item().response_id",
                                                "type": "Expression"
                                            },
                                            "purpose_name": "EM Marketing",
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "SP - Alignment History Sync PE",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "Pacific East Pipeline",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[usp_DE_Update]",
                                        "storedProcedureParameters": {
                                            "Enrichment": {
                                                "value": "PacificEast",
                                                "type": "String"
                                            },
                                            "response_id": {
                                                "value": {
                                                    "value": "@item().response_id",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_AzureSqlDB",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_server_name",
                                                "type": "Expression"
                                            },
                                            "az_sql_db": {
                                                "value": "@pipeline().parameters.az_database_name",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Pacific East Enrichment Parallel Loop",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get Response Ids",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Response Ids').output.value",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 10,
                            "activities": [
                                {
                                    "name": "Parallel Pacific East Pipeline",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pip-em-pacificeast-enrichment_EM_Marketing",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_server_name",
                                                "type": "Expression"
                                            },
                                            "az_database_name": {
                                                "value": "@pipeline().parameters.az_database_name",
                                                "type": "Expression"
                                            },
                                            "response_id": {
                                                "value": "@item().response_id",
                                                "type": "Expression"
                                            },
                                            "purpose_name": "EM Marketing",
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "SP - Alignment History Sync PE Parallel",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "Parallel Pacific East Pipeline",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[usp_DE_Update]",
                                        "storedProcedureParameters": {
                                            "Enrichment": {
                                                "value": "PacificEast",
                                                "type": "String"
                                            },
                                            "response_id": {
                                                "value": {
                                                    "value": "@item().response_id",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_AzureSqlDB",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_server_name",
                                                "type": "Expression"
                                            },
                                            "az_sql_db": {
                                                "value": "@pipeline().parameters.az_database_name",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "databricks_workspace_url": {
                        "type": "string"
                    },
                    "databricks_clusterid": {
                        "type": "string"
                    },
                    "vault_url": {
                        "type": "string"
                    },
                    "az_server_name": {
                        "type": "string"
                    },
                    "az_database_name": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Dataenrichment/SubMasterPipelines"
                },
                "annotations": [],
                "lastPublishTime": "2022-08-22T15:01:13Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-em-data-enrichment-master_EMSearchVendorData_Master')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Update enrichment status",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Pacific East Enrichment Loop",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "Pacific East Enrichment Parallel Loop",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "Drop table if Exists #FilesEnriched\n\nSelect modified_fileName \ninto #FilesEnriched\n\t   from (\n\t\t\tSelect modified_fileName\n\t\t\t,Case when MD_addressbase in ('DIA Review','DIA Approved') \n\t\t\t   or PE_Addressbase in ('DIA Review','DIA Approved') \n\t\t\t   or PE_Contactbase in ('DIA Review','DIA Approved') \n\t\t\tThen 1 else 0 end DE_Count\n\t\t\tfrom (\n\t\t\t\t Select count(*) as CNT\n\t\t\t\t ,a.modified_fileName\n\t\t\t\t ,a.md_flag MD_addressbase\n\t\t\t\t ,a.pe_flag PE_Addressbase\n\t\t\t\t ,b.pe_flag PE_Contactbase\n\t\t\t\t from alignment.customer_address_base a\n\t\t\t\t join alignment.contactbase b\n\t\t\t\t on a.modified_fileName = b.modified_fileName\n\t\t\t\t and a.source_key = b.source_key\n\t\t\t\t where  b.CRM_FLAg = 2 \n\t\t\t\t group by a.modified_fileName\n\t\t\t\t ,a.md_flag,a.pe_flag,b.pe_flag\n\t\t\t\t ) drv\n\t\t\t) drv2\n\t\t\tgroup by modified_fileName having sum(DE_Count) = 0\n\n\nUpdate A\n    Set  Enrichment = 1\n        ,DE_Status = 'Enriched'\n        ,insert_datetime = getdate()\n    From audit.ADS_Reference_Log A\n    Where DE_Status <> 'Enriched'\n\tand exists (Select 'X' From #FilesEnriched B\n\t\t\t\t\tWhere A.modified_filename = b.modified_fileName)\n\n\nUpdate A \n    Set  dia_status = 'DE_Completed'\n        ,insert_datetime = getdate()\n    From audit.dia_manual A\n    join audit.ADS_Reference_Log b\n    on a.source_file_name = b.modified_filename\n    Where A.Process_Layer = 'Enrichment'\n    and B.DE_Status = 'Enriched'\n    and A.dia_status = 'DE_Started'\n    and exists (Select 'X' From #FilesEnriched C\n\t\t\t        Where A.source_file_name = C.modified_fileName)\n\n--Drop table if Exists #FilesStillNotEnriched\n\n--Select  distinct a.modified_fileName \n--\t\tinto #FilesStillNotEnriched\n--\t\tfrom alignment.customer_address_base a\n--        join alignment.contactbase b\n--        on a.modified_fileName = b.modified_fileName\n--\t\tand a.source_key = b.source_key\n--               where  b.CRM_FLAg = 2 and (b.pe_flag in ('DIA Review','DIA Approved')  \n--\t\t\t\t\tor a.md_flag in ('DIA Review','DIA Approved'))\n\n\n\n--Select  distinct a.modified_fileName \n--\t\tinto #FilesEnriched\n--\t\tfrom alignment.customer_address_base a\n--        join alignment.contactbase b\n--        on a.modified_fileName = b.modified_fileName\n--\t\tand a.source_key = b.source_key\n--               where  b.CRM_FLAg = 2 and (b.pe_flag not in ('DIA Review','DIA Approved') \n--\t\t\t\t\tand a.md_flag not in ('DIA Review','DIA Approved'))\n\n\nSELECT 1",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "ADS_Reference_Log",
                                    "schemaname": "audit",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.az_server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.az_database_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Start ETL Audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "501",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Started",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "END ETL Audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "Update enrichment status",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "502",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Completed",
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Delete - configEnrichment_Clean",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Start ETL Audit",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "Delete from config.Enrichment\nwhere purpose_name='EM Search Vendor Data'\n\nSelect 1",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "Enrichment",
                                    "schemaname": "config",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.az_server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.az_database_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Get Response Ids",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Delete - configEnrichment_Clean",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "Select distinct trim(a.response_id) response_id from audit.ADS_Reference_Log a\njoin audit.dia_manual b on a.response_id = b.response_id\nwhere ADS_Reference = 1\nand Enrichment <> 1\nand Process_Layer = 'Enrichment'\nand dia_status = 'DE_Started'\nand b.purpose_name = 'EM Search Vendor Data'",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "Enrichment_Melissa",
                                    "schemaname": "dbo",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.az_server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.az_database_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Melissa Enrichment Loop",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get Response Ids",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Response Ids').output.value",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 10,
                            "activities": [
                                {
                                    "name": "Melissa Pipeline",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pip-em-melissa-addressenrichment-EMSearchVendorData",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_server_name",
                                                "type": "Expression"
                                            },
                                            "az_database_name": {
                                                "value": "@pipeline().parameters.az_database_name",
                                                "type": "Expression"
                                            },
                                            "response_id": {
                                                "value": "@item().response_id",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "SP - Alignment History Sync MD",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "Melissa Pipeline",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[usp_DE_Update]",
                                        "storedProcedureParameters": {
                                            "Enrichment": {
                                                "value": "Melissa",
                                                "type": "String"
                                            },
                                            "response_id": {
                                                "value": {
                                                    "value": "@item().response_id",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_AzureSqlDB",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_server_name",
                                                "type": "Expression"
                                            },
                                            "az_sql_db": {
                                                "value": "@pipeline().parameters.az_database_name",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Pacific East Enrichment Loop",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Melissa Enrichment Loop",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Response Ids').output.value",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 10,
                            "activities": [
                                {
                                    "name": "Pacific East Pipeline",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pip-em-pacificeast-enrichment_EM_SearchVendorData",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_server_name",
                                                "type": "Expression"
                                            },
                                            "az_database_name": {
                                                "value": "@pipeline().parameters.az_database_name",
                                                "type": "Expression"
                                            },
                                            "response_id": {
                                                "value": "@item().response_id",
                                                "type": "Expression"
                                            },
                                            "purpose_name": "EM Search Vendor Data",
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "SP - Alignment History Sync PE",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "Pacific East Pipeline",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[usp_DE_Update]",
                                        "storedProcedureParameters": {
                                            "Enrichment": {
                                                "value": "PacificEast",
                                                "type": "String"
                                            },
                                            "response_id": {
                                                "value": {
                                                    "value": "@item().response_id",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_AzureSqlDB",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_server_name",
                                                "type": "Expression"
                                            },
                                            "az_sql_db": {
                                                "value": "@pipeline().parameters.az_database_name",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Pacific East Enrichment Parallel Loop",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get Response Ids",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Response Ids').output.value",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 10,
                            "activities": [
                                {
                                    "name": "Parallel Pacific East Pipeline",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pip-em-pacificeast-enrichment_EM_SearchVendorData",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_server_name",
                                                "type": "Expression"
                                            },
                                            "az_database_name": {
                                                "value": "@pipeline().parameters.az_database_name",
                                                "type": "Expression"
                                            },
                                            "response_id": {
                                                "value": "@item().response_id",
                                                "type": "Expression"
                                            },
                                            "purpose_name": "EM Search Vendor Data",
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "SP - Alignment History Sync PE Parallel",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "Parallel Pacific East Pipeline",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[usp_DE_Update]",
                                        "storedProcedureParameters": {
                                            "Enrichment": {
                                                "value": "PacificEast",
                                                "type": "String"
                                            },
                                            "response_id": {
                                                "value": {
                                                    "value": "@item().response_id",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_AzureSqlDB",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_server_name",
                                                "type": "Expression"
                                            },
                                            "az_sql_db": {
                                                "value": "@pipeline().parameters.az_database_name",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "databricks_workspace_url": {
                        "type": "string"
                    },
                    "databricks_clusterid": {
                        "type": "string"
                    },
                    "vault_url": {
                        "type": "string"
                    },
                    "az_server_name": {
                        "type": "string"
                    },
                    "az_database_name": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Dataenrichment/SubMasterPipelines"
                },
                "annotations": [],
                "lastPublishTime": "2022-08-22T15:01:13Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-generate-parquet_secondary')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy data1",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlServerSource",
                                "sqlReaderQuery": "select * from dbo.contactbase with (nolock)",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "ParquetSink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "ParquetWriteSettings"
                                }
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ds_crm_Dynamic10",
                                "type": "DatasetReference",
                                "parameters": {
                                    "crm_schema": "dbo",
                                    "crm_table": "contactbase",
                                    "crm_servername": "10.200.0.22",
                                    "crm_dbname": "RNLMAP_MSCRM",
                                    "crm_username": "svc_az_ndp",
                                    "vaulturl": "https://rnlndp-prodkeyvault.vault.azure.net/"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ds_parquet",
                                "type": "DatasetReference",
                                "parameters": {
                                    "storageaccountname": "https://rnlndpproddls.dfs.core.windows.net",
                                    "container": "prodcrmsynapse",
                                    "file_path": "crm_to_ads/contactbase",
                                    "file_name": "contactbase.parquet"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "test_pipelines"
                },
                "annotations": [],
                "lastPublishTime": "2022-11-09T17:27:56Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-generate-parquet_third')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy data1",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlServerSource",
                                "sqlReaderQuery": "select * from dbo.ContactBase with (nolock)",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "ParquetSink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "ParquetWriteSettings"
                                }
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ds_crm_Dynamic10",
                                "type": "DatasetReference",
                                "parameters": {
                                    "crm_schema": "dbo",
                                    "crm_table": "ContactBase",
                                    "crm_servername": "10.200.0.23",
                                    "crm_dbname": "RNLMAP_MSCRM",
                                    "crm_username": "svc_az_ndp",
                                    "vaulturl": "https://rnlndp-prodkeyvault.vault.azure.net/"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ds_parquet",
                                "type": "DatasetReference",
                                "parameters": {
                                    "storageaccountname": "https://rnlndpproddls.dfs.core.windows.net",
                                    "container": "prodcrmsynapse",
                                    "file_path": "crm_to_ads/contactbase",
                                    "file_name": "contactbase.parquet"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "test_pipelines"
                },
                "annotations": [],
                "lastPublishTime": "2022-08-13T12:14:10Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-master-parallel-run')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "get_latest_responses",
                        "type": "Script",
                        "dependsOn": [
                            {
                                "activity": "get_previous_run_date",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "linkedServiceName": {
                            "referenceName": "ls_RNLMAP_MSCRM",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "crm_servername": "10.200.0.22",
                                "crm_dbname": "RNLMAP_MSCRM",
                                "crm_username": " svc_az_ndp",
                                "vaulturl": "https://rnlndp-prodkeyvault.vault.azure.net/"
                            }
                        },
                        "typeProperties": {
                            "scripts": [
                                {
                                    "parameters": [
                                        {
                                            "name": "CreatedDate",
                                            "type": "Datetime",
                                            "value": {
                                                "value": "@activity('get_previous_run_date').output.resultSets[0].rows[0].createdOn\r\n",
                                                "type": "Expression"
                                            },
                                            "direction": "Input"
                                        }
                                    ],
                                    "type": "Query",
                                    "text": "\r\n\r\n\r\ndrop table if exists #temp\r\nselect distinct r.popb_responsesId \r\ninto #temp\r\nFROM dbo.popb_responsesBase r\r\ninner join popb_fileuploadmappingBase f \r\non  f.popb_responseid=r.popb_responsesId \r\nINNER join popb_questionnairreBase q on r.popb_questionnaire=q.popb_questionnairreId \r\ninner join popb_responseanswerBase answr on answr.popb_parentresponse=r.popb_responsesid\r\ninner join popb_responsequestionBase rq on rq.popb_responsequestionId=answr.popb_responsequestion\r\ninner join popb_purposeBase p on f.popb_purposeid=p.popb_purposeid\r\nand p.popb_name like 'EM%' \r\nand (r.popb_name not like 'From UNC Path%' or r.popb_name is null)\r\nwhere r.CreatedOn > @CreatedDate   \r\n-- and  r.popb_responsesId   in ('89972a6a-f449-ed11-a9dd-000d3a062608',\r\n--'4974971e-f849-ed11-a9dd-000d3a062608',\r\n--'2807f708-1e4a-ed11-a9dd-000d3a062608')\r\n\r\n -- and  r.popb_responsesId  not in ('f221dfcc-af4f-4c76-8bed-0197a35de6ca')\r\n\r\n\r\n\r\nDECLARE @responses VARCHAR(MAX)\r\nSELECT @responses = COALESCE(@responses+''',''' ,'''') + cast( popb_responsesId as varchar(64))\r\nFROM #temp\r\n\r\nif @responses is null\r\nbegin\r\n    print('no response')\r\n    Select 'no response' as responses\r\nend\r\nelse\r\n    SELECT isnull(@responses +'''','''xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx''') as responses"
                                }
                            ]
                        }
                    },
                    {
                        "name": "get_previous_run_date",
                        "type": "Script",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "linkedServiceName": {
                            "referenceName": "ls_AzureSqlDB",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "az_server_name": "rnlndpprodazsql01.database.windows.net",
                                "az_sql_db": "NDPPRODSQLDB"
                            }
                        },
                        "typeProperties": {
                            "scripts": [
                                {
                                    "type": "Query",
                                    "text": "SELECT isnull(max(createdOn),'2022-08-16 10:30:00.000') as createdOn\nFROM [dbo].[popb_responsesBase_history]\n\n--SELECT isnull(dateadd(hour,-4,max(createdOn)),dateadd(minute,-450,'2022-08-16 10:30:00.000')) as createdOn\n--FROM [dbo].[popb_responsequestionBase_history]"
                                }
                            ]
                        }
                    },
                    {
                        "name": "If responseid is available",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "get_latest_responses",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@not(equals(activity('get_latest_responses').output.resultSets[0].rows[0].responses,'no response'))",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "load_response_history",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [
                                        {
                                            "activity": "insert_responses",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pip-load-history-tables",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {}
                                    }
                                },
                                {
                                    "name": "get_response_data",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pip-get-response-data",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "responses": {
                                                "value": "@activity('get_latest_responses').output.resultSets[0].rows[0].responses",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "insert_responses",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [
                                        {
                                            "activity": "get_response_data",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pip-insert-response",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {}
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "folder": {
                    "name": "parallel-Run"
                },
                "annotations": [],
                "lastPublishTime": "2022-10-12T17:01:40Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-config-crm-to-ads-insert')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "insert_statements",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "dataset": {
                                "referenceName": "ADLS_Output",
                                "type": "DatasetReference",
                                "parameters": {
                                    "ContainerName": {
                                        "value": "@pipeline().parameters.container",
                                        "type": "Expression"
                                    },
                                    "FilePath": {
                                        "value": "@pipeline().parameters.filepath",
                                        "type": "Expression"
                                    },
                                    "FileName": {
                                        "value": "@pipeline().parameters.filename",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "for_each_insert_statement",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "insert_statements",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('insert_statements').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "insert_statement",
                                    "type": "Script",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "linkedServiceName": {
                                        "referenceName": "ls_AzureSynapseAnalyticsCrmDB",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "az_synapse_crm_server": "rnlndpprodcrmsynapse.sql.azuresynapse.net",
                                            "az_synapse_crm_db": "NDPPRODCRMPL1"
                                        }
                                    },
                                    "typeProperties": {
                                        "scripts": [
                                            {
                                                "type": "Query",
                                                "text": {
                                                    "value": "@item().Insert_statement",
                                                    "type": "Expression"
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "container": {
                        "type": "string",
                        "defaultValue": "sse-crmtoads"
                    },
                    "filepath": {
                        "type": "string",
                        "defaultValue": "crm_to_ads"
                    },
                    "filename": {
                        "type": "string",
                        "defaultValue": "crm_to_ads_insert_statement.csv"
                    }
                },
                "folder": {
                    "name": "SSE/CRM_to_Synapse"
                },
                "annotations": [],
                "lastPublishTime": "2022-08-23T05:59:11Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-config-crm-to-ads-ddl_create')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "DDL_statements",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "dataset": {
                                "referenceName": "ADLS_Output14",
                                "type": "DatasetReference",
                                "parameters": {
                                    "ContainerName": {
                                        "value": "@pipeline().parameters.container",
                                        "type": "Expression"
                                    },
                                    "FilePath": {
                                        "value": "@pipeline().parameters.filepath",
                                        "type": "Expression"
                                    },
                                    "FileName": {
                                        "value": "@pipeline().parameters.filename",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "for_each_ddl_statement",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "DDL_statements",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('DDL_statements').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "If Condition1",
                                    "type": "IfCondition",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@equals(pipeline().parameters.load_type,'Initial')",
                                            "type": "Expression"
                                        },
                                        "ifFalseActivities": [
                                            {
                                                "name": "Update_statement",
                                                "type": "Script",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "linkedServiceName": {
                                                    "referenceName": "ls_AzureSynapseAnalytics1",
                                                    "type": "LinkedServiceReference"
                                                },
                                                "typeProperties": {
                                                    "scripts": [
                                                        {
                                                            "type": "Query",
                                                            "text": {
                                                                "value": "Update config.crm_to_ads\nset load_type = 'Delta'\nwhere load_type = 'INITIAL' and last_load_status = 'Success' and is_active = 1 and source_delta_column ='ModifiedOn'",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ],
                                        "ifTrueActivities": [
                                            {
                                                "name": "DDL_statement",
                                                "type": "Script",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "linkedServiceName": {
                                                    "referenceName": "ls_AzureSynapseAnalyticsCrmDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "az_synapse_crm_server": "rnlndpprodcrmsynapse.sql.azuresynapse.net",
                                                        "az_synapse_crm_db": "NDPPRODCRMPL1"
                                                    }
                                                },
                                                "typeProperties": {
                                                    "scripts": [
                                                        {
                                                            "type": "Query",
                                                            "text": {
                                                                "value": "@item().Create_Statement",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "container": {
                        "type": "string",
                        "defaultValue": "sse-crmtoads"
                    },
                    "filepath": {
                        "type": "string",
                        "defaultValue": "crm_to_ads"
                    },
                    "filename": {
                        "type": "string",
                        "defaultValue": "DDL_CRM_to_ADS.csv"
                    },
                    "load_type": {
                        "type": "string",
                        "defaultValue": "Initial"
                    }
                },
                "folder": {
                    "name": "SSE/CRM_to_Synapse"
                },
                "annotations": [],
                "lastPublishTime": "2022-08-23T05:32:36Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-config-ads-to-crm-insert')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "insert_statements",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "dataset": {
                                "referenceName": "ADLS_Output",
                                "type": "DatasetReference",
                                "parameters": {
                                    "ContainerName": {
                                        "value": "@pipeline().parameters.container",
                                        "type": "Expression"
                                    },
                                    "FilePath": {
                                        "value": "@pipeline().parameters.filepath",
                                        "type": "Expression"
                                    },
                                    "FileName": {
                                        "value": "@pipeline().parameters.filename",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "for_each_insert_statement",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "insert_statements",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('insert_statements').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "insert_statement",
                                    "type": "Script",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "linkedServiceName": {
                                        "referenceName": "ls_AzureSynapseAnalytics1",
                                        "type": "LinkedServiceReference"
                                    },
                                    "typeProperties": {
                                        "scripts": [
                                            {
                                                "type": "Query",
                                                "text": {
                                                    "value": "@item().Insert_statement",
                                                    "type": "Expression"
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "container": {
                        "type": "string",
                        "defaultValue": "sse-crmtoads"
                    },
                    "filepath": {
                        "type": "string",
                        "defaultValue": "crm_to_ads"
                    },
                    "filename": {
                        "type": "string",
                        "defaultValue": "ads_to_crm_insert_statement.csv"
                    }
                },
                "folder": {
                    "name": "SSE/CRM_to_Synapse"
                },
                "annotations": [],
                "lastPublishTime": "2022-08-19T10:50:06Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-em-data-enrichment-master_EMScoring_PacificEast')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Start ETL Audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "501",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Started",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "END ETL Audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "SP - Alignment History Sync PE Success",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "502",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Completed",
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Get Response Ids",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Start ETL Audit",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "Select drv.response_id , PE_cnt\ninto #GetResponseId\nfrom (\nSelect count(*) PE_cnt\n,b.Pe_flag\n,a.modified_fileName\n,trim(a.response_id) as response_id \nfrom alignment.customer_address_base (Nolock) a \njoin  alignment.contactbase (Nolock) b\non a.response_id = b.response_id\nand a.source_key = b.source_key\njoin (Select distinct response_id,modified_filename, purpose_name from audit.file_metadata (Nolock)) c\non trim(a.response_id) = trim(c.response_id)\nwhere b.Pe_flag = 'DIA Approved' \nand a.modified_fileName not like '%EMHistorical%' \nand b.crm_flag = 2\nand c.purpose_name = 'EM Scoring'\ngroup by a.modified_fileName, b.Pe_flag , a.response_id\n) Drv join audit.dia_manual (Nolock) b on Drv.response_id = b.response_id\njoin audit.ADS_Reference_Log (Nolock) c on Drv.response_id = c.response_id\nwhere Process_Layer = 'Enrichment'\nand dia_status = 'DE_Started'\nand Enrichment <> 1\n\nDrop table if exists #GetResponseId_Final\n\nSelect top 3 response_id into #GetResponseId_Final from #GetResponseId Order by PE_cnt\nInsert into #GetResponseId_Final\nSelect top 3 response_id from #GetResponseId Order by PE_cnt desc\n\n--Insert into #GetResponseId_Final\n--Select top 1 response_id from #GetResponseId \n--where response_id not in (Select response_id from config.Enrichment_Melissa)\n--Order by MD_cnt desc\n\nSelect distinct response_id from #GetResponseId_Final",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "Enrichment_Melissa",
                                    "schemaname": "dbo",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.az_server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.az_database_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Pacific East Enrichment Loop",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get Response Ids",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Response Ids').output.value",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 10,
                            "activities": [
                                {
                                    "name": "Pacific East Pipeline",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pip-em-pacificeast-enrichment_EM_Scoring",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_server_name",
                                                "type": "Expression"
                                            },
                                            "az_database_name": {
                                                "value": "@pipeline().parameters.az_database_name",
                                                "type": "Expression"
                                            },
                                            "response_id": {
                                                "value": "@item().response_id",
                                                "type": "Expression"
                                            },
                                            "purpose_name": "EM Scoring",
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "SP - Alignment History Sync PE Success",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Pacific East Enrichment Loop",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 360,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[usp_DE_Update_EmScoring]",
                            "storedProcedureParameters": {
                                "Enrichment": {
                                    "value": "PacificEast",
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_AzureSqlDB",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "az_server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "az_sql_db": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "SP - Alignment History Sync PE Failure",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Pacific East Enrichment Loop",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 360,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[usp_DE_Update_EmScoring]",
                            "storedProcedureParameters": {
                                "Enrichment": {
                                    "value": "PacificEast",
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_AzureSqlDB",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "az_server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "az_sql_db": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "END ETL Audit_copy1",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "SP - Alignment History Sync PE Failure",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "502",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Completed",
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "databricks_workspace_url": {
                        "type": "string"
                    },
                    "databricks_clusterid": {
                        "type": "string"
                    },
                    "vault_url": {
                        "type": "string"
                    },
                    "az_server_name": {
                        "type": "string"
                    },
                    "az_database_name": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Dataenrichment/Master Enrichments"
                },
                "annotations": [],
                "lastPublishTime": "2022-11-10T23:21:04Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-em-data-enrichment-master_EMMarketing_Melissa')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Start ETL Audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "504",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Started",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "END ETL Audit Success",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "Audit_Query-Data Enrichment Success",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "505",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Completed",
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Get Response Ids",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Start ETL Audit",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "Select Top 6 drv.response_id  from (\nSelect count(*) MD_cnt\n,md_flag\n,a.modified_fileName\n,trim(a.response_id) as response_id \nfrom alignment.customer_address_base a \njoin alignment.contactbase b \non a.source_key = b.source_key \nand a.modified_fileName = b.modified_fileName\nwhere md_flag = 'DIA Approved' \nand a.modified_fileName not like '%EMHistorical%' \nand b.crm_flag = 2\ngroup by a.modified_fileName, md_flag , a.response_id\n) Drv join audit.dia_manual b on Drv.response_id = b.response_id\njoin audit.ADS_Reference_Log c on Drv.response_id = c.response_id\nwhere Process_Layer = 'Enrichment'\nand dia_status = 'DE_Started'\nand b.purpose_name = 'EM Marketing'\nand Enrichment <> 1\nOrder by MD_cnt ",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "Enrichment_Melissa",
                                    "schemaname": "dbo",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.az_server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.az_database_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Melissa Enrichment Loop",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get Response Ids",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Response Ids').output.value",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 3,
                            "activities": [
                                {
                                    "name": "Melissa Pipeline",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pip-em-melissa-addressenrichment-EMMarketing",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_server_name",
                                                "type": "Expression"
                                            },
                                            "az_database_name": {
                                                "value": "@pipeline().parameters.az_database_name",
                                                "type": "Expression"
                                            },
                                            "response_id": {
                                                "value": "@item().response_id",
                                                "type": "Expression"
                                            },
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Audit_Query-Data Enrichment Success",
                        "description": "Fetching details from customer_address_base for Audit insert",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "SP - Alignment History Sync MD Success",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "DROP TABLE IF EXISTS #temp\nselect distinct  response_id\n                ,mapping_id\n                ,account_name\n                ,modified_fileName\n                --,max(md_received_date) as max_md_received_date\n                ,count(*) RecordCount\n                ,md_flag\nINTO #temp\nfrom alignment.customer_address_base a\n--where md_flag in ('Enriched','Not Enriched')\nwhere md_flag not in ('No Enrichment')\nand not exists (Select 'X' from audit.dia_manual b\n                where a.response_id = b.response_id\n                and a.mapping_id = b.mapping_id\n                and Process_Layer = 'Enrichment'\n                and dia_status = 'DE_Completed')\ngroup by response_id, mapping_id, account_name, modified_fileName,md_flag\n\nMERGE audit.data_Enrichment AS TARGET\nUSING #temp AS SOURCE\nON TARGET.response_id = SOURCE.response_id\nAnd TARGET.mapping_id = SOURCE.mapping_id\nAND TARGET.flags = SOURCE.md_flag\nWHEN MATCHED AND TARGET.Count_MD <> SOURCE.RecordCount\nTHEN UPDATE SET TARGET.Count_MD = SOURCE.RecordCount\nWHEN NOT MATCHED BY TARGET \nTHEN INSERT (response_id\n            ,mapping_id\n            ,account_name\n            ,modified_fileName\n            ,table_name\n            ,process_layer\n            ,count_MD\n            ,flags\n            ,placed_by\n            ,actions_taken\n            ,insert_datetime\n            ,insert_by)\nVALUES (    \n             SOURCE.response_id\n             ,SOURCE.mapping_id\n             ,SOURCE.account_name\n             ,SOURCE.modified_fileName\n             ,'customer_address_base'\n             ,'Enrichment'\n             ,SOURCE.RecordCount\n             ,SOURCE.md_flag\n             ,'External Platform'\n             ,'Enrichment'\n             ,format(getdate(),'yyyy-MM-dd HH:mm:ss')\n             ,'Melissa Pipeline');\n\nSELECT 1",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "customer_address_base",
                                    "schemaname": "alignment",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.az_server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.az_database_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "SP - Alignment History Sync MD Success",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Melissa Enrichment Loop",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 300,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[usp_DE_Update_EmMarketing]",
                            "storedProcedureParameters": {
                                "Enrichment": {
                                    "value": "Melissa",
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_AzureSqlDB",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "az_server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "az_sql_db": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Query-Data Enrichment failure",
                        "description": "Fetching details from customer_address_base for Audit insert",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "SP - Alignment History Sync MD Failure",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "DROP TABLE IF EXISTS #temp\nselect distinct  response_id\n                ,mapping_id\n                ,account_name\n                ,modified_fileName\n                --,max(md_received_date) as max_md_received_date\n                ,count(*) RecordCount\n                ,md_flag\nINTO #temp\nfrom alignment.customer_address_base a\n--where md_flag in ('Enriched','Not Enriched')\nwhere md_flag not in ('No Enrichment')\nand not exists (Select 'X' from audit.dia_manual b\n                where a.response_id = b.response_id\n                and a.mapping_id = b.mapping_id\n                and Process_Layer = 'Enrichment'\n                and dia_status = 'DE_Completed')\ngroup by response_id, mapping_id, account_name, modified_fileName,md_flag\n\nMERGE audit.data_Enrichment AS TARGET\nUSING #temp AS SOURCE\nON TARGET.response_id = SOURCE.response_id\nAnd TARGET.mapping_id = SOURCE.mapping_id\nAND TARGET.flags = SOURCE.md_flag\nWHEN MATCHED AND TARGET.Count_MD <> SOURCE.RecordCount\nTHEN UPDATE SET TARGET.Count_MD = SOURCE.RecordCount\nWHEN NOT MATCHED BY TARGET \nTHEN INSERT (response_id\n            ,mapping_id\n            ,account_name\n            ,modified_fileName\n            ,table_name\n            ,process_layer\n            ,count_MD\n            ,flags\n            ,placed_by\n            ,actions_taken\n            ,insert_datetime\n            ,insert_by)\nVALUES (    \n             SOURCE.response_id\n             ,SOURCE.mapping_id\n             ,SOURCE.account_name\n             ,SOURCE.modified_fileName\n             ,'customer_address_base'\n             ,'Enrichment'\n             ,SOURCE.RecordCount\n             ,SOURCE.md_flag\n             ,'External Platform'\n             ,'Enrichment'\n             ,format(getdate(),'yyyy-MM-dd HH:mm:ss')\n             ,'Melissa Pipeline');\n\nSELECT 1",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "customer_address_base",
                                    "schemaname": "alignment",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.az_server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.az_database_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "SP - Alignment History Sync MD Failure",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Melissa Enrichment Loop",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 300,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[usp_DE_Update_EmMarketing]",
                            "storedProcedureParameters": {
                                "Enrichment": {
                                    "value": "Melissa",
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_AzureSqlDB",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "az_server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "az_sql_db": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "END ETL Audit Failure",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "Audit_Query-Data Enrichment failure",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "506",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Failed",
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "databricks_workspace_url": {
                        "type": "string"
                    },
                    "databricks_clusterid": {
                        "type": "string"
                    },
                    "vault_url": {
                        "type": "string"
                    },
                    "az_server_name": {
                        "type": "string"
                    },
                    "az_database_name": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Dataenrichment/Master Enrichments"
                },
                "annotations": [],
                "lastPublishTime": "2022-09-06T06:51:57Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-em-data-enrichment-master_EMMarketing_PacificEast')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Start ETL Audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "501",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Started",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "END ETL Audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "SP - Alignment History Sync PE Success",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "502",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Completed",
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Get Response Ids",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Start ETL Audit",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "Select drv.response_id , PE_cnt\ninto #GetResponseId\nfrom (\nSelect count(*) PE_cnt\n,Pe_flag\n,modified_fileName\n,trim(response_id) as response_id \nfrom alignment.contactbase (nolock)\nwhere Pe_flag = 'DIA Approved' \nand modified_fileName like 'EMMarketing%' \nand crm_flag = 2\ngroup by modified_fileName, Pe_flag , response_id\n) Drv \n\nDrop table if exists #GetResponseId_Final\n\nSelect top 3 response_id into #GetResponseId_Final from #GetResponseId Order by PE_cnt\nInsert into #GetResponseId_Final\nSelect top 3 response_id from #GetResponseId Order by PE_cnt desc\n\nSelect distinct response_id from #GetResponseId_Final\n",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "Enrichment_Melissa",
                                    "schemaname": "dbo",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.az_server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.az_database_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Pacific East Enrichment Loop",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "If Condition ResponseId",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Response Ids').output.value",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 10,
                            "activities": [
                                {
                                    "name": "Pacific East Pipeline",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pip-em-pacificeast-enrichment_EM_Marketing",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_server_name",
                                                "type": "Expression"
                                            },
                                            "az_database_name": {
                                                "value": "@pipeline().parameters.az_database_name",
                                                "type": "Expression"
                                            },
                                            "response_id": {
                                                "value": "@item().response_id",
                                                "type": "Expression"
                                            },
                                            "purpose_name": "EM Marketing",
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "SP - Alignment History Sync PE Success",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Pacific East Enrichment Loop",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 360,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[usp_DE_Update_EmMarketing]",
                            "storedProcedureParameters": {
                                "Enrichment": {
                                    "value": "PacificEast",
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_AzureSqlDB",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "az_server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "az_sql_db": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "SP - Alignment History Sync PE Failure",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Pacific East Enrichment Loop",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 360,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[usp_DE_Update_EmMarketing]",
                            "storedProcedureParameters": {
                                "Enrichment": {
                                    "value": "PacificEast",
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_AzureSqlDB",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "az_server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "az_sql_db": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "END ETL Audit_copy1",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "SP - Alignment History Sync PE Failure",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "502",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Completed",
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "If Condition ResponseId",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Get Response Ids",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@not(equals(activity('Get Response Ids').output.value,0))",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Dummy_Call",
                                    "description": "Activity to stop enrichment if no Response id to pick",
                                    "type": "Script",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "linkedServiceName": {
                                        "referenceName": "ls_AzureSqlDB",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "az_server_name": "rnlndpprodazsql01.database.windows.net",
                                            "az_sql_db": "NDPPRODSQLDB"
                                        }
                                    },
                                    "typeProperties": {
                                        "scripts": [
                                            {
                                                "type": "Query",
                                                "text": "Select top 1 from dummy_enrichment"
                                            }
                                        ],
                                        "scriptBlockExecutionTimeout": "02:00:00"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "databricks_workspace_url": {
                        "type": "string"
                    },
                    "databricks_clusterid": {
                        "type": "string"
                    },
                    "vault_url": {
                        "type": "string"
                    },
                    "az_server_name": {
                        "type": "string"
                    },
                    "az_database_name": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Dataenrichment/Master Enrichments"
                },
                "annotations": [],
                "lastPublishTime": "2022-11-11T18:36:19Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-em-data-enrichment-master_EMSearchVendorData_Melissa')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Start ETL Audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "504",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Started",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Get Response Ids",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Start ETL Audit",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "Select Top 6 drv.response_id  from (\nSelect count(*) MD_cnt\n,md_flag\n,a.modified_fileName\n,trim(a.response_id) as response_id \nfrom alignment.customer_address_base a \njoin alignment.contactbase b \non a.source_key = b.source_key \nand a.modified_fileName = b.modified_fileName\nwhere md_flag = 'DIA Approved' \nand a.modified_fileName not like '%EMHistorical%' \nand b.crm_flag = 2\ngroup by a.modified_fileName, md_flag , a.response_id\n) Drv join audit.dia_manual b on Drv.response_id = b.response_id\njoin audit.ADS_Reference_Log c on Drv.response_id = c.response_id\nwhere Process_Layer = 'Enrichment'\nand dia_status = 'DE_Started'\nand b.purpose_name = 'EM Search Vendor Data'\nand Enrichment <> 1\nOrder by MD_cnt ",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "Enrichment_Melissa",
                                    "schemaname": "dbo",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.az_server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.az_database_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Melissa Enrichment Loop",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get Response Ids",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Response Ids').output.value",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 6,
                            "activities": [
                                {
                                    "name": "Melissa Pipeline",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pip-em-melissa-addressenrichment-EMSearchVendorData",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_server_name",
                                                "type": "Expression"
                                            },
                                            "az_database_name": {
                                                "value": "@pipeline().parameters.az_database_name",
                                                "type": "Expression"
                                            },
                                            "response_id": {
                                                "value": "@item().response_id",
                                                "type": "Expression"
                                            },
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "END ETL Audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "Audit_Query-Data Enrichment Success",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "505",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Completed",
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "SP - Alignment History Sync MD Success",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Melissa Enrichment Loop",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 360,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[usp_DE_Update_EmSearchVender]",
                            "storedProcedureParameters": {
                                "Enrichment": {
                                    "value": "Melissa",
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_AzureSqlDB",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "az_server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "az_sql_db": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Query-Data Enrichment Success",
                        "description": "Fetching details from customer_address_base for Audit insert",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "SP - Alignment History Sync MD Success",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "DROP TABLE IF EXISTS #temp\nselect distinct  response_id\n                ,mapping_id\n                ,account_name\n                ,modified_fileName\n                --,max(md_received_date) as max_md_received_date\n                ,count(*) RecordCount\n                ,md_flag\nINTO #temp\nfrom alignment.customer_address_base a\n--where md_flag in ('Enriched','Not Enriched')\nwhere md_flag not in ('No Enrichment')\nand not exists (Select 'X' from audit.dia_manual b\n                where a.response_id = b.response_id\n                and a.mapping_id = b.mapping_id\n                and Process_Layer = 'Enrichment'\n                and dia_status = 'DE_Completed')\ngroup by response_id, mapping_id, account_name, modified_fileName,md_flag\n\nMERGE audit.data_Enrichment AS TARGET\nUSING #temp AS SOURCE\nON TARGET.response_id = SOURCE.response_id\nAnd TARGET.mapping_id = SOURCE.mapping_id\nAND TARGET.flags = SOURCE.md_flag\nWHEN MATCHED AND TARGET.Count_MD <> SOURCE.RecordCount\nTHEN UPDATE SET TARGET.Count_MD = SOURCE.RecordCount\nWHEN NOT MATCHED BY TARGET \nTHEN INSERT (response_id\n            ,mapping_id\n            ,account_name\n            ,modified_fileName\n            ,table_name\n            ,process_layer\n            ,count_MD\n            ,flags\n            ,placed_by\n            ,actions_taken\n            ,insert_datetime\n            ,insert_by)\nVALUES (    \n             SOURCE.response_id\n             ,SOURCE.mapping_id\n             ,SOURCE.account_name\n             ,SOURCE.modified_fileName\n             ,'customer_address_base'\n             ,'Enrichment'\n             ,SOURCE.RecordCount\n             ,SOURCE.md_flag\n             ,'External Platform'\n             ,'Enrichment'\n             ,format(getdate(),'yyyy-MM-dd HH:mm:ss')\n             ,'Melissa Pipeline');\n\nSELECT 1",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "customer_address_base",
                                    "schemaname": "alignment",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.az_server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.az_database_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "SP - Alignment History Sync MD Failure",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Melissa Enrichment Loop",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 360,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[usp_DE_Update_EmSearchVender]",
                            "storedProcedureParameters": {
                                "Enrichment": {
                                    "value": "Melissa",
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_AzureSqlDB",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "az_server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "az_sql_db": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Query-Data Enrichment Failure",
                        "description": "Fetching details from customer_address_base for Audit insert",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "SP - Alignment History Sync MD Failure",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "DROP TABLE IF EXISTS #temp\nselect distinct  response_id\n                ,mapping_id\n                ,account_name\n                ,modified_fileName\n                --,max(md_received_date) as max_md_received_date\n                ,count(*) RecordCount\n                ,md_flag\nINTO #temp\nfrom alignment.customer_address_base a\n--where md_flag in ('Enriched','Not Enriched')\nwhere md_flag not in ('No Enrichment')\nand not exists (Select 'X' from audit.dia_manual b\n                where a.response_id = b.response_id\n                and a.mapping_id = b.mapping_id\n                and Process_Layer = 'Enrichment'\n                and dia_status = 'DE_Completed')\ngroup by response_id, mapping_id, account_name, modified_fileName,md_flag\n\nMERGE audit.data_Enrichment AS TARGET\nUSING #temp AS SOURCE\nON TARGET.response_id = SOURCE.response_id\nAnd TARGET.mapping_id = SOURCE.mapping_id\nAND TARGET.flags = SOURCE.md_flag\nWHEN MATCHED AND TARGET.Count_MD <> SOURCE.RecordCount\nTHEN UPDATE SET TARGET.Count_MD = SOURCE.RecordCount\nWHEN NOT MATCHED BY TARGET \nTHEN INSERT (response_id\n            ,mapping_id\n            ,account_name\n            ,modified_fileName\n            ,table_name\n            ,process_layer\n            ,count_MD\n            ,flags\n            ,placed_by\n            ,actions_taken\n            ,insert_datetime\n            ,insert_by)\nVALUES (    \n             SOURCE.response_id\n             ,SOURCE.mapping_id\n             ,SOURCE.account_name\n             ,SOURCE.modified_fileName\n             ,'customer_address_base'\n             ,'Enrichment'\n             ,SOURCE.RecordCount\n             ,SOURCE.md_flag\n             ,'External Platform'\n             ,'Enrichment'\n             ,format(getdate(),'yyyy-MM-dd HH:mm:ss')\n             ,'Melissa Pipeline');\n\nSELECT 1",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "customer_address_base",
                                    "schemaname": "alignment",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.az_server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.az_database_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "END ETL Audit_Failure",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "Audit_Query-Data Enrichment Failure",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "506",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Failed",
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "databricks_workspace_url": {
                        "type": "string"
                    },
                    "databricks_clusterid": {
                        "type": "string"
                    },
                    "vault_url": {
                        "type": "string"
                    },
                    "az_server_name": {
                        "type": "string"
                    },
                    "az_database_name": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Dataenrichment/Master Enrichments"
                },
                "annotations": [],
                "lastPublishTime": "2022-09-06T06:51:57Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-em-data-enrichment-master_EMSuppression_Melissa')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Start ETL Audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "504",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Started",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Get Response Ids",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Start ETL Audit",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "Select Top 6 drv.response_id  from (\nSelect count(*) MD_cnt\n,md_flag\n,a.modified_fileName\n,trim(a.response_id) as response_id \nfrom alignment.customer_address_base a \njoin alignment.contactbase b \non a.source_key = b.source_key \nand a.modified_fileName = b.modified_fileName\nwhere md_flag = 'DIA Approved' \nand a.modified_fileName not like '%EMHistorical%' \nand b.crm_flag = 2\ngroup by a.modified_fileName, md_flag , a.response_id\n) Drv join audit.dia_manual b on Drv.response_id = b.response_id\njoin audit.ADS_Reference_Log c on Drv.response_id = c.response_id\nwhere Process_Layer = 'Enrichment'\nand dia_status = 'DE_Started'\nand b.purpose_name = 'EM Suppression'\nand Enrichment <> 1\nOrder by MD_cnt ",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "Enrichment_Melissa",
                                    "schemaname": "dbo",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.az_server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.az_database_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Melissa Enrichment Loop",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get Response Ids",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Response Ids').output.value",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 6,
                            "activities": [
                                {
                                    "name": "Melissa Pipeline",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pip-em-melissa-addressenrichment-EMSuppression",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_server_name",
                                                "type": "Expression"
                                            },
                                            "az_database_name": {
                                                "value": "@pipeline().parameters.az_database_name",
                                                "type": "Expression"
                                            },
                                            "response_id": {
                                                "value": "@item().response_id",
                                                "type": "Expression"
                                            },
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "END ETL Audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "Audit_Query-Data Enrichment Success",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "505",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Completed",
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "SP - Alignment History Sync MD Success",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Melissa Enrichment Loop",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 360,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[usp_DE_Update_EmSuppression]",
                            "storedProcedureParameters": {
                                "Enrichment": {
                                    "value": "Melissa",
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_AzureSqlDB",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "az_server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "az_sql_db": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Query-Data Enrichment Success",
                        "description": "Fetching details from customer_address_base for Audit insert",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "SP - Alignment History Sync MD Success",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "DROP TABLE IF EXISTS #temp\nselect distinct  response_id\n                ,mapping_id\n                ,account_name\n                ,modified_fileName\n                --,max(md_received_date) as max_md_received_date\n                ,count(*) RecordCount\n                ,md_flag\nINTO #temp\nfrom alignment.customer_address_base a\n--where md_flag in ('Enriched','Not Enriched')\nwhere md_flag not in ('No Enrichment')\nand not exists (Select 'X' from audit.dia_manual b\n                where a.response_id = b.response_id\n                and a.mapping_id = b.mapping_id\n                and Process_Layer = 'Enrichment'\n                and dia_status = 'DE_Completed')\ngroup by response_id, mapping_id, account_name, modified_fileName,md_flag\n\nMERGE audit.data_Enrichment AS TARGET\nUSING #temp AS SOURCE\nON TARGET.response_id = SOURCE.response_id\nAnd TARGET.mapping_id = SOURCE.mapping_id\nAND TARGET.flags = SOURCE.md_flag\nWHEN MATCHED AND TARGET.Count_MD <> SOURCE.RecordCount\nTHEN UPDATE SET TARGET.Count_MD = SOURCE.RecordCount\nWHEN NOT MATCHED BY TARGET \nTHEN INSERT (response_id\n            ,mapping_id\n            ,account_name\n            ,modified_fileName\n            ,table_name\n            ,process_layer\n            ,count_MD\n            ,flags\n            ,placed_by\n            ,actions_taken\n            ,insert_datetime\n            ,insert_by)\nVALUES (    \n             SOURCE.response_id\n             ,SOURCE.mapping_id\n             ,SOURCE.account_name\n             ,SOURCE.modified_fileName\n             ,'customer_address_base'\n             ,'Enrichment'\n             ,SOURCE.RecordCount\n             ,SOURCE.md_flag\n             ,'External Platform'\n             ,'Enrichment'\n             ,format(getdate(),'yyyy-MM-dd HH:mm:ss')\n             ,'Melissa Pipeline');\n\nSELECT 1",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "customer_address_base",
                                    "schemaname": "alignment",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.az_server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.az_database_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "SP - Alignment History Sync MD Failure",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Melissa Enrichment Loop",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 360,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[usp_DE_Update_EmSuppression]",
                            "storedProcedureParameters": {
                                "Enrichment": {
                                    "value": "Melissa",
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_AzureSqlDB",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "az_server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "az_sql_db": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Query-Data Enrichment Failure",
                        "description": "Fetching details from customer_address_base for Audit insert",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "SP - Alignment History Sync MD Failure",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "DROP TABLE IF EXISTS #temp\nselect distinct  response_id\n                ,mapping_id\n                ,account_name\n                ,modified_fileName\n                --,max(md_received_date) as max_md_received_date\n                ,count(*) RecordCount\n                ,md_flag\nINTO #temp\nfrom alignment.customer_address_base a\n--where md_flag in ('Enriched','Not Enriched')\nwhere md_flag not in ('No Enrichment')\nand not exists (Select 'X' from audit.dia_manual b\n                where a.response_id = b.response_id\n                and a.mapping_id = b.mapping_id\n                and Process_Layer = 'Enrichment'\n                and dia_status = 'DE_Completed')\ngroup by response_id, mapping_id, account_name, modified_fileName,md_flag\n\nMERGE audit.data_Enrichment AS TARGET\nUSING #temp AS SOURCE\nON TARGET.response_id = SOURCE.response_id\nAnd TARGET.mapping_id = SOURCE.mapping_id\nAND TARGET.flags = SOURCE.md_flag\nWHEN MATCHED AND TARGET.Count_MD <> SOURCE.RecordCount\nTHEN UPDATE SET TARGET.Count_MD = SOURCE.RecordCount\nWHEN NOT MATCHED BY TARGET \nTHEN INSERT (response_id\n            ,mapping_id\n            ,account_name\n            ,modified_fileName\n            ,table_name\n            ,process_layer\n            ,count_MD\n            ,flags\n            ,placed_by\n            ,actions_taken\n            ,insert_datetime\n            ,insert_by)\nVALUES (    \n             SOURCE.response_id\n             ,SOURCE.mapping_id\n             ,SOURCE.account_name\n             ,SOURCE.modified_fileName\n             ,'customer_address_base'\n             ,'Enrichment'\n             ,SOURCE.RecordCount\n             ,SOURCE.md_flag\n             ,'External Platform'\n             ,'Enrichment'\n             ,format(getdate(),'yyyy-MM-dd HH:mm:ss')\n             ,'Melissa Pipeline');\n\nSELECT 1",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "customer_address_base",
                                    "schemaname": "alignment",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.az_server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.az_database_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "END ETL Audit_Failure",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "Audit_Query-Data Enrichment Failure",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "506",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Failed",
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "databricks_workspace_url": {
                        "type": "string"
                    },
                    "databricks_clusterid": {
                        "type": "string"
                    },
                    "vault_url": {
                        "type": "string"
                    },
                    "az_server_name": {
                        "type": "string"
                    },
                    "az_database_name": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Dataenrichment/Master Enrichments"
                },
                "annotations": [],
                "lastPublishTime": "2022-09-06T06:51:57Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-em-data-enrichment-master_EMGO_Melissa')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Start ETL Audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "504",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Started",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Get Response Ids",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Start ETL Audit",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "Drop table if exists #GetResponseId\n\nSelect drv.response_id , MD_cnt\ninto #GetResponseId\nfrom (\nSelect count(*) MD_cnt\n,md_flag\n,a.modified_fileName\n,trim(a.response_id) as response_id \nfrom alignment.customer_address_base a \njoin alignment.contactbase b \non a.source_key = b.source_key \nand a.modified_fileName = b.modified_fileName\nwhere md_flag = 'DIA Approved' \nand a.modified_fileName not like '%EMHistorical%' \nand b.crm_flag = 2\ngroup by a.modified_fileName, md_flag , a.response_id\n) Drv join audit.dia_manual b on Drv.response_id = b.response_id\njoin audit.ADS_Reference_Log c on Drv.response_id = c.response_id\nwhere Process_Layer = 'Enrichment'\nand dia_status = 'DE_Started'\nand b.purpose_name = 'EM GO'\nand Enrichment <> 1\n\nDrop table if exists #GetResponseId_Final\n\nSelect top 3 response_id into #GetResponseId_Final from #GetResponseId Order by MD_cnt\nInsert into #GetResponseId_Final\nSelect top 3 response_id from #GetResponseId Order by MD_cnt desc\n\nSelect distinct response_id from #GetResponseId_Final",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "Enrichment_Melissa",
                                    "schemaname": "dbo",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.az_server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.az_database_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Melissa Enrichment Loop",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get Response Ids",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Response Ids').output.value",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 3,
                            "activities": [
                                {
                                    "name": "Melissa Pipeline",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pip-em-melissa-addressenrichment-EMGO",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_server_name",
                                                "type": "Expression"
                                            },
                                            "az_database_name": {
                                                "value": "@pipeline().parameters.az_database_name",
                                                "type": "Expression"
                                            },
                                            "response_id": {
                                                "value": "@item().response_id",
                                                "type": "Expression"
                                            },
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "END ETL Audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "Audit_Query-Data Enrichment Success",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "505",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Completed",
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "SP - Alignment History Sync MD Success",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Melissa Enrichment Loop",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 360,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[usp_DE_Update_EmGo]",
                            "storedProcedureParameters": {
                                "Enrichment": {
                                    "value": "Melissa",
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_AzureSqlDB",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "az_server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "az_sql_db": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Query-Data Enrichment Success",
                        "description": "Fetching details from customer_address_base for Audit insert",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "SP - Alignment History Sync MD Success",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "DROP TABLE IF EXISTS #temp\nselect distinct  response_id\n                ,mapping_id\n                ,account_name\n                ,modified_fileName\n                --,max(md_received_date) as max_md_received_date\n                ,count(*) RecordCount\n                ,md_flag\nINTO #temp\nfrom alignment.customer_address_base a\n--where md_flag in ('Enriched','Not Enriched')\nwhere md_flag not in ('No Enrichment')\nand not exists (Select 'X' from audit.dia_manual b\n                where a.response_id = b.response_id\n                and a.mapping_id = b.mapping_id\n                and Process_Layer = 'Enrichment'\n                and dia_status = 'DE_Completed')\ngroup by response_id, mapping_id, account_name, modified_fileName,md_flag\n\nMERGE audit.data_Enrichment AS TARGET\nUSING #temp AS SOURCE\nON TARGET.response_id = SOURCE.response_id\nAnd TARGET.mapping_id = SOURCE.mapping_id\nAND TARGET.flags = SOURCE.md_flag\nWHEN MATCHED AND TARGET.Count_MD <> SOURCE.RecordCount\nTHEN UPDATE SET TARGET.Count_MD = SOURCE.RecordCount\nWHEN NOT MATCHED BY TARGET \nTHEN INSERT (response_id\n            ,mapping_id\n            ,account_name\n            ,modified_fileName\n            ,table_name\n            ,process_layer\n            ,count_MD\n            ,flags\n            ,placed_by\n            ,actions_taken\n            ,insert_datetime\n            ,insert_by)\nVALUES (    \n             SOURCE.response_id\n             ,SOURCE.mapping_id\n             ,SOURCE.account_name\n             ,SOURCE.modified_fileName\n             ,'customer_address_base'\n             ,'Enrichment'\n             ,SOURCE.RecordCount\n             ,SOURCE.md_flag\n             ,'External Platform'\n             ,'Enrichment'\n             ,format(getdate(),'yyyy-MM-dd HH:mm:ss')\n             ,'Melissa Pipeline');\n\nSELECT 1",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "customer_address_base",
                                    "schemaname": "alignment",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.az_server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.az_database_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "SP - Alignment History Sync MD Failure",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Melissa Enrichment Loop",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 360,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[usp_DE_Update_EmGo]",
                            "storedProcedureParameters": {
                                "Enrichment": {
                                    "value": "Melissa",
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_AzureSqlDB",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "az_server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "az_sql_db": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Audit_Query-Data Enrichment Failure",
                        "description": "Fetching details from customer_address_base for Audit insert",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "SP - Alignment History Sync MD Failure",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "DROP TABLE IF EXISTS #temp\nselect distinct  response_id\n                ,mapping_id\n                ,account_name\n                ,modified_fileName\n                --,max(md_received_date) as max_md_received_date\n                ,count(*) RecordCount\n                ,md_flag\nINTO #temp\nfrom alignment.customer_address_base a\n--where md_flag in ('Enriched','Not Enriched')\nwhere md_flag not in ('No Enrichment')\nand not exists (Select 'X' from audit.dia_manual b\n                where a.response_id = b.response_id\n                and a.mapping_id = b.mapping_id\n                and Process_Layer = 'Enrichment'\n                and dia_status = 'DE_Completed')\ngroup by response_id, mapping_id, account_name, modified_fileName,md_flag\n\nMERGE audit.data_Enrichment AS TARGET\nUSING #temp AS SOURCE\nON TARGET.response_id = SOURCE.response_id\nAnd TARGET.mapping_id = SOURCE.mapping_id\nAND TARGET.flags = SOURCE.md_flag\nWHEN MATCHED AND TARGET.Count_MD <> SOURCE.RecordCount\nTHEN UPDATE SET TARGET.Count_MD = SOURCE.RecordCount\nWHEN NOT MATCHED BY TARGET \nTHEN INSERT (response_id\n            ,mapping_id\n            ,account_name\n            ,modified_fileName\n            ,table_name\n            ,process_layer\n            ,count_MD\n            ,flags\n            ,placed_by\n            ,actions_taken\n            ,insert_datetime\n            ,insert_by)\nVALUES (    \n             SOURCE.response_id\n             ,SOURCE.mapping_id\n             ,SOURCE.account_name\n             ,SOURCE.modified_fileName\n             ,'customer_address_base'\n             ,'Enrichment'\n             ,SOURCE.RecordCount\n             ,SOURCE.md_flag\n             ,'External Platform'\n             ,'Enrichment'\n             ,format(getdate(),'yyyy-MM-dd HH:mm:ss')\n             ,'Melissa Pipeline');\n\nSELECT 1",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "customer_address_base",
                                    "schemaname": "alignment",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.az_server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.az_database_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "END ETL Audit_Failure",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "Audit_Query-Data Enrichment Failure",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "506",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Failed",
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "databricks_workspace_url": {
                        "type": "string"
                    },
                    "databricks_clusterid": {
                        "type": "string"
                    },
                    "vault_url": {
                        "type": "string"
                    },
                    "az_server_name": {
                        "type": "string"
                    },
                    "az_database_name": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Dataenrichment/Master Enrichments"
                },
                "annotations": [],
                "lastPublishTime": "2022-09-06T06:51:57Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-em-data-enrichment-master_EMSearchVendorData_PacificEast')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Start ETL Audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "501",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Started",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "END ETL Audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "SP - Alignment History Sync PE Success",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "502",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Completed",
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Get Response Ids",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Start ETL Audit",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "Select drv.response_id , PE_cnt\ninto #GetResponseId\nfrom (\nSelect count(*) PE_cnt\n,Pe_flag\n,modified_fileName\n,trim(response_id) as response_id \nfrom alignment.contactbase (nolock)\nwhere Pe_flag = 'DIA Approved' \nand modified_fileName like 'EMSearchVendorData%' \nand crm_flag = 2\ngroup by modified_fileName, Pe_flag , response_id\n) Drv \n\nDrop table if exists #GetResponseId_Final\n\nSelect top 3 response_id into #GetResponseId_Final from #GetResponseId Order by PE_cnt\nInsert into #GetResponseId_Final\nSelect top 3 response_id from #GetResponseId Order by PE_cnt desc\n\nSelect distinct response_id from #GetResponseId_Final\n",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "Enrichment_Melissa",
                                    "schemaname": "dbo",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.az_server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.az_database_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Pacific East Enrichment Loop",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "If Condition ResponseId",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Response Ids').output.value",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 10,
                            "activities": [
                                {
                                    "name": "Pacific East Pipeline",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pip-em-pacificeast-enrichment_EM_SearchVendorData",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_server_name",
                                                "type": "Expression"
                                            },
                                            "az_database_name": {
                                                "value": "@pipeline().parameters.az_database_name",
                                                "type": "Expression"
                                            },
                                            "response_id": {
                                                "value": "@item().response_id",
                                                "type": "Expression"
                                            },
                                            "purpose_name": "EM Search Vendor Data",
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "SP - Alignment History Sync PE Success",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Pacific East Enrichment Loop",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 360,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[usp_DE_Update_EmSearchVender]",
                            "storedProcedureParameters": {
                                "Enrichment": {
                                    "value": "PacificEast",
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_AzureSqlDB",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "az_server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "az_sql_db": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "SP - Alignment History Sync PE Failure",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Pacific East Enrichment Loop",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 360,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[usp_DE_Update_EmSearchVender]",
                            "storedProcedureParameters": {
                                "Enrichment": {
                                    "value": "PacificEast",
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_AzureSqlDB",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "az_server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "az_sql_db": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "END ETL Audit_copy1",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "SP - Alignment History Sync PE Failure",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "502",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Completed",
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "If Condition ResponseId",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Get Response Ids",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@not(equals(activity('Get Response Ids').output.value,0))",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Dummy_Call",
                                    "description": "Activity to stop enrichment if no Response id to pick",
                                    "type": "Script",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "linkedServiceName": {
                                        "referenceName": "ls_AzureSqlDB",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "az_server_name": "rnlndpprodazsql01.database.windows.net",
                                            "az_sql_db": "NDPPRODSQLDB"
                                        }
                                    },
                                    "typeProperties": {
                                        "scripts": [
                                            {
                                                "type": "Query",
                                                "text": "Select top 1 from dummy_enrichment"
                                            }
                                        ],
                                        "scriptBlockExecutionTimeout": "02:00:00"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "databricks_workspace_url": {
                        "type": "string"
                    },
                    "databricks_clusterid": {
                        "type": "string"
                    },
                    "vault_url": {
                        "type": "string"
                    },
                    "az_server_name": {
                        "type": "string"
                    },
                    "az_database_name": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Dataenrichment/Master Enrichments"
                },
                "annotations": [],
                "lastPublishTime": "2022-11-11T18:38:42Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-em-data-enrichment-master_EMSuppression_PacificEast')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Start ETL Audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "501",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Started",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "END ETL Audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "SP - Alignment History Sync PE Success",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "502",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Completed",
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Get Response Ids",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Start ETL Audit",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "Select drv.response_id , PE_cnt\ninto #GetResponseId\nfrom (\nSelect count(*) PE_cnt\n,Pe_flag\n,modified_fileName\n,trim(response_id) as response_id \nfrom alignment.contactbase (nolock)\nwhere Pe_flag = 'DIA Approved' \nand modified_fileName like 'EMSuppression%' \nand crm_flag = 2\ngroup by modified_fileName, Pe_flag , response_id\n) Drv \n\nDrop table if exists #GetResponseId_Final\n\nSelect top 3 response_id into #GetResponseId_Final from #GetResponseId Order by PE_cnt\nInsert into #GetResponseId_Final\nSelect top 3 response_id from #GetResponseId Order by PE_cnt desc\n\nSelect distinct response_id from #GetResponseId_Final\n",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "Enrichment_Melissa",
                                    "schemaname": "dbo",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.az_server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.az_database_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Pacific East Enrichment Loop",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "If Condition ResponseId",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Response Ids').output.value",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 10,
                            "activities": [
                                {
                                    "name": "Pacific East Pipeline",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pip-em-pacificeast-enrichment_EM_Suppression",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_server_name",
                                                "type": "Expression"
                                            },
                                            "az_database_name": {
                                                "value": "@pipeline().parameters.az_database_name",
                                                "type": "Expression"
                                            },
                                            "response_id": {
                                                "value": "@item().response_id",
                                                "type": "Expression"
                                            },
                                            "purpose_name": "EM Suppression",
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "SP - Alignment History Sync PE Success",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Pacific East Enrichment Loop",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 360,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[usp_DE_Update_EmSuppression]",
                            "storedProcedureParameters": {
                                "Enrichment": {
                                    "value": "PacificEast",
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_AzureSqlDB",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "az_server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "az_sql_db": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "SP - Alignment History Sync PE Failure",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Pacific East Enrichment Loop",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 360,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[usp_DE_Update_EmSuppression]",
                            "storedProcedureParameters": {
                                "Enrichment": {
                                    "value": "PacificEast",
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_AzureSqlDB",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "az_server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "az_sql_db": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "END ETL Audit_copy1",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "SP - Alignment History Sync PE Failure",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "502",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Completed",
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "If Condition ResponseId",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Get Response Ids",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@not(equals(activity('Get Response Ids').output.value,0))",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Dummy_Call",
                                    "description": "Activity to stop enrichment if no Response id to pick",
                                    "type": "Script",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "linkedServiceName": {
                                        "referenceName": "ls_AzureSqlDB",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "az_server_name": "rnlndpprodazsql01.database.windows.net",
                                            "az_sql_db": "NDPPRODSQLDB"
                                        }
                                    },
                                    "typeProperties": {
                                        "scripts": [
                                            {
                                                "type": "Query",
                                                "text": "Select top 1 from dummy_enrichment"
                                            }
                                        ],
                                        "scriptBlockExecutionTimeout": "02:00:00"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "databricks_workspace_url": {
                        "type": "string"
                    },
                    "databricks_clusterid": {
                        "type": "string"
                    },
                    "vault_url": {
                        "type": "string"
                    },
                    "az_server_name": {
                        "type": "string"
                    },
                    "az_database_name": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Dataenrichment/Master Enrichments"
                },
                "annotations": [],
                "lastPublishTime": "2022-11-11T18:38:42Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-em-data-enrichment-master_EMGO_PacificEast')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Start ETL Audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "501",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Started",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "END ETL Audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "SP - Alignment History Sync PE Success",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "502",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Completed",
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Get Response Ids",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Start ETL Audit",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "Select drv.response_id , PE_cnt\ninto #GetResponseId\nfrom (\nSelect count(*) PE_cnt\n,a.Pe_flag\n,a.modified_fileName\n,trim(a.response_id) as response_id \nfrom alignment.contactbase (nolock) a\njoin (Select distinct response_id,modified_filename, purpose_name from audit.file_metadata (nolock)) c\non trim(a.response_id) = trim(c.response_id)\nwhere a.Pe_flag = 'DIA Approved' \nand a.modified_fileName not like '%EMHistorical%' \nand a.crm_flag = 2\nand c.purpose_name = 'EM GO'\ngroup by a.modified_fileName, a.Pe_flag , a.response_id\n) Drv \n\nDrop table if exists #GetResponseId_Final\n\nSelect top 3 response_id into #GetResponseId_Final from #GetResponseId Order by PE_cnt\nInsert into #GetResponseId_Final\nSelect top 3 response_id from #GetResponseId Order by PE_cnt desc\n\nSelect distinct response_id from #GetResponseId_Final\n",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "Enrichment_Melissa",
                                    "schemaname": "dbo",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.az_server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.az_database_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Pacific East Enrichment Loop",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "If Condition ResponseId",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Response Ids').output.value",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 10,
                            "activities": [
                                {
                                    "name": "Pacific East Pipeline",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pip-em-pacificeast-enrichment_EM_GO",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_server_name",
                                                "type": "Expression"
                                            },
                                            "az_database_name": {
                                                "value": "@pipeline().parameters.az_database_name",
                                                "type": "Expression"
                                            },
                                            "response_id": {
                                                "value": "@item().response_id",
                                                "type": "Expression"
                                            },
                                            "purpose_name": "EM GO",
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "SP - Alignment History Sync PE Success",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Pacific East Enrichment Loop",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 360,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[usp_DE_Update_EmGo]",
                            "storedProcedureParameters": {
                                "Enrichment": {
                                    "value": "PacificEast",
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_AzureSqlDB",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "az_server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "az_sql_db": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "SP - Alignment History Sync PE Failure",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Pacific East Enrichment Loop",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 1,
                            "retryIntervalInSeconds": 360,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[usp_DE_Update_EmGo]",
                            "storedProcedureParameters": {
                                "Enrichment": {
                                    "value": "PacificEast",
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_AzureSqlDB",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "az_server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                },
                                "az_sql_db": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "END ETL Audit_copy1",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "SP - Alignment History Sync PE Failure",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "502",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Completed",
                                "database_name": {
                                    "value": "@pipeline().parameters.az_database_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.az_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "If Condition ResponseId",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Get Response Ids",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@not(equals(activity('Get Response Ids').output.value,0))",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Dummy_Call",
                                    "description": "Activity to stop enrichment if no Response id to pick",
                                    "type": "Script",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "linkedServiceName": {
                                        "referenceName": "ls_AzureSqlDB",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "az_server_name": "rnlndpprodazsql01.database.windows.net",
                                            "az_sql_db": "NDPPRODSQLDB"
                                        }
                                    },
                                    "typeProperties": {
                                        "scripts": [
                                            {
                                                "type": "Query",
                                                "text": "Select top 1 from dummy_enrichment"
                                            }
                                        ],
                                        "scriptBlockExecutionTimeout": "02:00:00"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "databricks_workspace_url": {
                        "type": "string"
                    },
                    "databricks_clusterid": {
                        "type": "string"
                    },
                    "vault_url": {
                        "type": "string"
                    },
                    "az_server_name": {
                        "type": "string"
                    },
                    "az_database_name": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Dataenrichment/Master Enrichments"
                },
                "annotations": [],
                "lastPublishTime": "2022-11-11T18:36:19Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-copy-and-delete-dummyfile')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy dummy file",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "DelimitedTextSink",
                                "storeSettings": {
                                    "type": "SftpWriteSettings",
                                    "operationTimeout": "01:00:00",
                                    "useTempFileRename": true
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextWriteSettings",
                                    "quoteAllText": true,
                                    "fileExtension": ".txt"
                                }
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ds_raw_file",
                                "type": "DatasetReference",
                                "parameters": {
                                    "foldername": "raw/donotdelete",
                                    "filename": "dummy",
                                    "storageaccountname": "rnlndpproddls"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ds_sftp_input_file",
                                "type": "DatasetReference",
                                "parameters": {
                                    "folderName": {
                                        "value": "@concat(pipeline().parameters.folder,'/',pipeline().parameters.subfolder)",
                                        "type": "Expression"
                                    },
                                    "fileName": "dummy",
                                    "rnl_sftp_host": "SFTP.RuffaloNL.com",
                                    "rnl_sftp_username": "Brillio_rnl",
                                    "vaulturl": "https://rnlndp-prodkeyvault.vault.azure.net/"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Delete dummy file",
                        "type": "Delete",
                        "dependsOn": [
                            {
                                "activity": "Copy dummy file",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "ds_sftp_input_file",
                                "type": "DatasetReference",
                                "parameters": {
                                    "folderName": {
                                        "value": "@concat(pipeline().parameters.folder,'/',pipeline().parameters.subfolder)",
                                        "type": "Expression"
                                    },
                                    "fileName": "dummy",
                                    "rnl_sftp_host": "SFTP.RuffaloNL.com",
                                    "rnl_sftp_username": "Brillio_rnl",
                                    "vaulturl": "https://rnlndp-prodkeyvault.vault.azure.net/"
                                }
                            },
                            "enableLogging": false,
                            "storeSettings": {
                                "type": "SftpReadSettings",
                                "recursive": true,
                                "enablePartitionDiscovery": false,
                                "disableChunking": false
                            }
                        }
                    },
                    {
                        "name": "update the status as active",
                        "type": "Script",
                        "dependsOn": [
                            {
                                "activity": "Delete dummy file",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "linkedServiceName": {
                            "referenceName": "ls_AzureSqlDB",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "az_server_name": "rnlndpprodazsql01.database.windows.net",
                                "az_sql_db": "NDPPRODSQLDB"
                            }
                        },
                        "typeProperties": {
                            "scripts": [
                                {
                                    "type": "Query",
                                    "text": {
                                        "value": "update lkp.account set [status]='active' where folder='@{pipeline().parameters.folder}' and subfolder ='@{pipeline().parameters.subfolder}'\n",
                                        "type": "Expression"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "folder": {
                        "type": "string"
                    },
                    "subfolder": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Datalanding"
                },
                "annotations": [],
                "lastPublishTime": "2022-09-02T23:30:08Z"
            },
            "dependsOn": []
        }
    ]
}