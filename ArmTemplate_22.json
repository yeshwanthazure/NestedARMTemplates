{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "factoryName": {
            "type": "string",
            "metadata": "Data Factory name",
            "defaultValue": "RNLADFNDPPROD"
        },
        "trg-dqe-staging-historical_properties_pipeline_parameters_Purposename": {
            "type": "string",
            "defaultValue": "EM Historical Data"
        },
        "trg-dqe-staging-historical_properties_pipeline_parameters_ContainerName": {
            "type": "string",
            "defaultValue": "datalanding"
        },
        "trg-dqe-staging-historical_properties_pipeline_parameters_Audit_Type_Pipeline": {
            "type": "string",
            "defaultValue": "ETL"
        },
        "trg-dqe-staging-historical_properties_pipeline_parameters_Audit_Type_File": {
            "type": "string",
            "defaultValue": "File"
        },
        "trg-dqe-staging-historical_properties_pipeline_parameters_Pipeline_Start_Status": {
            "type": "string",
            "defaultValue": "Started"
        },
        "trg-dqe-staging-historical_properties_pipeline_parameters_Pipeline_Complete_Status": {
            "type": "string",
            "defaultValue": "Completed"
        },
        "trg-dqe-staging-historical_properties_pipeline_parameters_Pipeline_Error_Status": {
            "type": "string",
            "defaultValue": "Failed"
        },
        "trg-dqe-staging-historical_properties_pipeline_parameters_File_Location_Status_DQE_Started": {
            "type": "string",
            "defaultValue": "Data Landing- EMInbound(DQE Started)"
        },
        "trg-dqe-staging-historical_properties_pipeline_parameters_Area": {
            "type": "string",
            "defaultValue": "DataTransformation"
        },
        "trg-dqe-staging-historical_properties_pipeline_parameters_InsertBy": {
            "type": "string",
            "defaultValue": "ADF_User"
        },
        "trg-dqe-staging-historical_properties_pipeline_parameters_Inbound": {
            "type": "string",
            "defaultValue": "em_inbound"
        },
        "trg-dqe-staging-historical_properties_pipeline_parameters_File_Location_Status_DQE_Completed": {
            "type": "string",
            "defaultValue": "Data Landing- EMInbound(DQE Completed)"
        },
        "trg-dqe-staging-historical_properties_pipeline_parameters_audit_schemaname": {
            "type": "string",
            "defaultValue": "audit"
        },
        "trg-dqe-staging-historical_properties_pipeline_parameters_file_metadata_table": {
            "type": "string",
            "defaultValue": "file_metadata"
        },
        "trg-dqe-staging-historical_properties_pipeline_parameters_server_name": {
            "type": "string",
            "defaultValue": "rnlndpprodazsql01.database.windows.net"
        },
        "trg-dqe-staging-historical_properties_pipeline_parameters_database_name": {
            "type": "string",
            "defaultValue": "NDPPRODSQLDB"
        },
        "trg-dqe-staging-historical_properties_pipeline_parameters_vaulturl": {
            "type": "string",
            "defaultValue": "https://rnlndp-prodkeyvault.vault.azure.net/"
        },
        "trg-dqe-staging-historical_properties_pipeline_parameters_storageaccountname": {
            "type": "string",
            "defaultValue": "rnlndpproddls"
        },
        "trg-dqe-staging-historical_properties_pipeline_parameters_databricks_workspace_url": {
            "type": "string",
            "defaultValue": "https://adb-6587840185446536.16.azuredatabricks.net"
        },
        "trg-dqe-staging-historical_properties_pipeline_parameters_databricks_clusterid": {
            "type": "string",
            "defaultValue": "0714-203005-9conw1v0"
        },
        "trg-dqe-staging-historical_properties_pipeline_parameters_email_success_url": {
            "type": "string",
            "defaultValue": "https://prod-51.westus.logic.azure.com:443/workflows/5ebd1dba8bbb492e812b84f4e86ba426/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=1oKEwEZsA9W2ZHGi6e1ihm_4mpccHBle9UZjdW1uOkQ"
        },
        "trg-dqe-staging-historical_properties_pipeline_parameters_email_fail_url": {
            "type": "string",
            "defaultValue": "https://prod-142.westus.logic.azure.com:443/workflows/5076b5f623944e73a73d414747a65c6f/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=QRg61OekEK1VZcXvQ400AcHr41s8V4BW3mqk5l_sNEM"
        },
        "trg-historical-modeling_properties_pipeline_parameters_source_adls_location": {
            "type": "string",
            "defaultValue": "prodsynapse/em_historical_data/DIA DS team"
        },
        "trg-historical-modeling_properties_pipeline_parameters_destination_adls_location": {
            "type": "string",
            "defaultValue": "prodsynapse/em_historical_data/Modelling"
        },
        "trg-historical-modeling_properties_pipeline_parameters_folder_list": {
            "type": "array",
            "defaultValue": [
                "Inquiry",
                "Search",
                "Prospect",
                "Admit",
                "Applicant"
            ]
        },
        "trg-historical-modeling_properties_pipeline_parameters_search_list": {
            "type": "array",
            "defaultValue": [
                "INQ",
                "SEA",
                "PRO",
                "ADM",
                "APP"
            ]
        },
        "trg-historical-modeling_properties_pipeline_parameters_azure_sql_database_name": {
            "type": "string",
            "defaultValue": "NDPPRODSQLDB"
        },
        "trg-historical-modeling_properties_pipeline_parameters_azure_sql_server_name": {
            "type": "string",
            "defaultValue": "rnlndpprodazsql01.database.windows.net"
        },
        "trg-historical-modeling_properties_pipeline_parameters_container": {
            "type": "string",
            "defaultValue": "prodsynapse"
        },
        "trg-historical-modeling_properties_pipeline_parameters_source_path": {
            "type": "string",
            "defaultValue": "em_historical_data/DIA DS team"
        },
        "trg-historical-modeling_properties_pipeline_parameters_dest_path": {
            "type": "string",
            "defaultValue": "em_historical_data"
        },
        "trg-historical-modeling_properties_pipeline_parameters_modeling_folder": {
            "type": "string",
            "defaultValue": "Modeling"
        },
        "trg-historical-modeling_properties_pipeline_parameters_databricks_workspace_url": {
            "type": "string",
            "defaultValue": "https://adb-6587840185446536.16.azuredatabricks.net"
        },
        "trg-historical-modeling_properties_pipeline_parameters_databricks_clusterid": {
            "type": "string",
            "defaultValue": "0714-203005-9conw1v0"
        },
        "trg-historical-modeling_properties_pipeline_parameters_vaulturl": {
            "type": "string",
            "defaultValue": "https://rnlndp-prodkeyvault.vault.azure.net/"
        },
        "trg-historical-modeling_properties_pipeline_parameters_storageaccountname": {
            "type": "string",
            "defaultValue": "rnlndpproddls"
        },
        "trg-crm-to-ads-powerbi-load_properties_pip-master-crm-to-crmsynapse-powerbi-load_parameters_crm_servername": {
            "type": "string",
            "defaultValue": "10.200.0.22"
        },
        "trg-crm-to-ads-powerbi-load_properties_pip-master-crm-to-crmsynapse-powerbi-load_parameters_crm_dbname": {
            "type": "string",
            "defaultValue": "RNLMAP_MSCRM"
        },
        "trg-crm-to-ads-powerbi-load_properties_pip-master-crm-to-crmsynapse-powerbi-load_parameters_crm_username": {
            "type": "string",
            "defaultValue": "svc_az_ndp"
        },
        "trg-crm-to-ads-powerbi-load_properties_pip-master-crm-to-crmsynapse-powerbi-load_parameters_vaulturl": {
            "type": "string",
            "defaultValue": "https://rnlndp-prodkeyvault.vault.azure.net/"
        },
        "trg-crm-to-ads-powerbi-load_properties_pip-master-crm-to-crmsynapse-powerbi-load_parameters_storageaccountname": {
            "type": "string",
            "defaultValue": "rnlndpproddls"
        },
        "trg-crm-to-ads-powerbi-load_properties_pip-master-crm-to-crmsynapse-powerbi-load_parameters_databricks_workspace_url": {
            "type": "string",
            "defaultValue": "https://adb-6587840185446536.16.azuredatabricks.net"
        },
        "trg-crm-to-ads-powerbi-load_properties_pip-master-crm-to-crmsynapse-powerbi-load_parameters_databricks_clusterid": {
            "type": "string",
            "defaultValue": "0714-203005-9conw1v0"
        },
        "trg-crm-to-ads-powerbi-load_properties_pip-master-crm-to-crmsynapse-powerbi-load_parameters_az_sql_server_name": {
            "type": "string",
            "defaultValue": "rnlndpprodazsql01.database.windows.net"
        },
        "trg-crm-to-ads-powerbi-load_properties_pip-master-crm-to-crmsynapse-powerbi-load_parameters_az_sql_db_name": {
            "type": "string",
            "defaultValue": "NDPPRODSQLDB"
        },
        "trg-crm-to-ads-powerbi-load_properties_pip-master-crm-to-crmsynapse-powerbi-load_parameters_az_synapse_crm_server": {
            "type": "string",
            "defaultValue": "rnlndpprodcrmsynapse.sql.azuresynapse.net"
        },
        "trg-crm-to-ads-powerbi-load_properties_pip-master-crm-to-crmsynapse-powerbi-load_parameters_az_synapse_crm_db": {
            "type": "string",
            "defaultValue": "NDPPRODCRMPL1"
        }
    },
    "variables": {
        "factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
    },
    "resources": [
        {
            "name": "[concat(parameters('factoryName'), '/pip-master-crm-to-crmsynapse-historical-load')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "load-crm-to-crmsynapse",
                        "description": "Executing load-crm-to-crmsynapse",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "start_etl_audit",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "pip-crm-to-crmsynapse-historical-load",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "parent_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "crm_servername": {
                                    "value": "@pipeline().parameters.crm_servername",
                                    "type": "Expression"
                                },
                                "crm_dbname": {
                                    "value": "@pipeline().parameters.crm_dbname",
                                    "type": "Expression"
                                },
                                "crm_username": {
                                    "value": "@pipeline().parameters.crm_username",
                                    "type": "Expression"
                                },
                                "vaulturl": {
                                    "value": "@pipeline().parameters.vaulturl",
                                    "type": "Expression"
                                },
                                "storageaccountname": {
                                    "value": "@pipeline().parameters.storageaccountname",
                                    "type": "Expression"
                                },
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "az_sql_server_name": {
                                    "value": "@pipeline().parameters.az_sql_server_name",
                                    "type": "Expression"
                                },
                                "az_sql_db_name": {
                                    "value": "@pipeline().parameters.az_sql_db_name",
                                    "type": "Expression"
                                },
                                "az_synapse_crm_server": {
                                    "value": "@pipeline().parameters.az_synapse_crm_server",
                                    "type": "Expression"
                                },
                                "az_synapse_crm_db": {
                                    "value": "@pipeline().parameters.az_synapse_crm_db",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "start_etl_audit",
                        "description": "starting ETL audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "801",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Started",
                                "database_name": {
                                    "value": "@pipeline().parameters.az_sql_db_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.az_sql_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vaulturl",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "end_etl_audit",
                        "description": "ending etl audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "load-crm-to-crmsynapse",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "802",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Completed",
                                "database_name": {
                                    "value": "@pipeline().parameters.az_sql_db_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.az_sql_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vaulturl",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "fail_etl_audit",
                        "description": "ending etl audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "load-crm-to-crmsynapse",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "803",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Failed",
                                "database_name": {
                                    "value": "@pipeline().parameters.az_sql_db_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.az_sql_server_name",
                                    "type": "Expression"
                                },
                                "error_description": {
                                    "value": "@activity('load-crm-to-crmsynapse').Error.Message",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vaulturl",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "concurrency": 3,
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "crm_servername": {
                        "type": "string",
                        "defaultValue": "10.200.0.23"
                    },
                    "crm_dbname": {
                        "type": "string",
                        "defaultValue": "RNLMAP_MSCRM"
                    },
                    "crm_username": {
                        "type": "string",
                        "defaultValue": "svc_az_ndp"
                    },
                    "vaulturl": {
                        "type": "string",
                        "defaultValue": "https://rnlndp-prodkeyvault.vault.azure.net/"
                    },
                    "storageaccountname": {
                        "type": "string",
                        "defaultValue": "rnlndpproddls"
                    },
                    "databricks_workspace_url": {
                        "type": "string",
                        "defaultValue": "https://adb-6587840185446536.16.azuredatabricks.net"
                    },
                    "databricks_clusterid": {
                        "type": "string",
                        "defaultValue": "0714-203005-9conw1v0"
                    },
                    "az_sql_server_name": {
                        "type": "string",
                        "defaultValue": "rnlndpprodazsql01.database.windows.net"
                    },
                    "az_sql_db_name": {
                        "type": "string",
                        "defaultValue": "NDPPRODSQLDB"
                    },
                    "az_synapse_crm_server": {
                        "type": "string",
                        "defaultValue": "rnlndpprodcrmsynapse.sql.azuresynapse.net"
                    },
                    "az_synapse_crm_db": {
                        "type": "string",
                        "defaultValue": "NDPPRODCRMPL1"
                    }
                },
                "folder": {
                    "name": "crm_To_Crmsynapse_Historical"
                },
                "annotations": [],
                "lastPublishTime": "2022-08-11T02:55:43Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-zeemee-fw-default-flow')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "adls Zeemee outbound folder list",
                        "description": "adls zeemee outbound folder list",
                        "type": "GetMetadata",
                        "dependsOn": [
                            {
                                "activity": "File Audit - adls to sftp started",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "ds_pi_adls",
                                "type": "DatasetReference",
                                "parameters": {
                                    "ContainerName": {
                                        "value": "@pipeline().parameters.containerName",
                                        "type": "Expression"
                                    },
                                    "folderName": "partnerintegration/zeemee/outbound",
                                    "storageaccountname": {
                                        "value": "@pipeline().parameters.storageaccountname",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "fieldList": [
                                "childItems"
                            ],
                            "storeSettings": {
                                "type": "AzureBlobFSReadSettings",
                                "recursive": true,
                                "enablePartitionDiscovery": false
                            },
                            "formatSettings": {
                                "type": "DelimitedTextReadSettings"
                            }
                        }
                    },
                    {
                        "name": "ForEach1",
                        "description": "Iterate over adls outbound zeemee slugname folders",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "adls Zeemee outbound folder list",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('adls zeemee outbound folder list').output.childItems",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "sftp Inbound foldername list",
                                    "description": "checking foldername from sftp ",
                                    "type": "GetMetadata",
                                    "dependsOn": [
                                        {
                                            "activity": "itemName",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.00:05:00",
                                        "retry": 3,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "ds_pi_sftp",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "folderName": {
                                                    "value": "@concat('Inbound','/',item().name)",
                                                    "type": "Expression"
                                                },
                                                "zeemee_host": {
                                                    "value": "@pipeline().parameters.zeemee_host",
                                                    "type": "Expression"
                                                },
                                                "zeemee_username": {
                                                    "value": "@pipeline().parameters.zeemee_username",
                                                    "type": "Expression"
                                                },
                                                "vaulturl": {
                                                    "value": "@pipeline().parameters.vault_url",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "fieldList": [
                                            "exists",
                                            "itemName"
                                        ],
                                        "storeSettings": {
                                            "type": "SftpReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false,
                                            "disableChunking": false
                                        },
                                        "formatSettings": {
                                            "type": "DelimitedTextReadSettings"
                                        }
                                    }
                                },
                                {
                                    "name": "Check True or false",
                                    "description": "If true then copy to respective slugname folder in sftp/inbound else copy to default folder",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "sftp Inbound foldername list",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@equals(activity('sftp Inbound foldername list').output.exists,true)",
                                            "type": "Expression"
                                        },
                                        "ifFalseActivities": [
                                            {
                                                "name": "default folderName",
                                                "description": "default folder sftp inbound",
                                                "type": "SetVariable",
                                                "dependsOn": [],
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "name",
                                                    "value": "default"
                                                }
                                            },
                                            {
                                                "name": "Copy to SFTP default",
                                                "description": "Copy file to default folder in SFTP inbound for new slug name ",
                                                "type": "Copy",
                                                "dependsOn": [
                                                    {
                                                        "activity": "default folderName",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "DelimitedTextSource",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSReadSettings",
                                                            "recursive": true,
                                                            "wildcardFolderPath": {
                                                                "value": "@concat('partnerintegration','/','zeemee','/','outbound','/',variables('nnp'))",
                                                                "type": "Expression"
                                                            },
                                                            "wildcardFileName": "*",
                                                            "enablePartitionDiscovery": false
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextReadSettings"
                                                        }
                                                    },
                                                    "sink": {
                                                        "type": "DelimitedTextSink",
                                                        "storeSettings": {
                                                            "type": "SftpWriteSettings",
                                                            "operationTimeout": "01:00:00",
                                                            "useTempFileRename": true
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextWriteSettings",
                                                            "quoteAllText": true,
                                                            "fileExtension": ".csv"
                                                        }
                                                    },
                                                    "enableStaging": false,
                                                    "translator": {
                                                        "type": "TabularTranslator",
                                                        "typeConversion": true,
                                                        "typeConversionSettings": {
                                                            "allowDataTruncation": true,
                                                            "treatBooleanAsNumber": false
                                                        }
                                                    }
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "ds_pi_adls",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "ContainerName": {
                                                                "value": "@pipeline().parameters.containerName",
                                                                "type": "Expression"
                                                            },
                                                            "folderName": "partnerintegration/zeemee/outbound",
                                                            "storageaccountname": {
                                                                "value": "@pipeline().parameters.storageaccountname",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "ds_pi_sftp",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "folderName": {
                                                                "value": "@concat('Inbound','/',variables('name'))",
                                                                "type": "Expression"
                                                            },
                                                            "zeemee_host": {
                                                                "value": "@pipeline().parameters.zeemee_host",
                                                                "type": "Expression"
                                                            },
                                                            "zeemee_username": {
                                                                "value": "@pipeline().parameters.zeemee_username",
                                                                "type": "Expression"
                                                            },
                                                            "vaulturl": {
                                                                "value": "@pipeline().parameters.vault_url",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        ],
                                        "ifTrueActivities": [
                                            {
                                                "name": "Copy to SFTP Inbound",
                                                "description": "Copy file to slug name folder which is already present in SFTP inbound ",
                                                "type": "Copy",
                                                "dependsOn": [
                                                    {
                                                        "activity": "iteName from sftp inbound",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "DelimitedTextSource",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSReadSettings",
                                                            "recursive": true,
                                                            "wildcardFolderPath": {
                                                                "value": "@concat('partnerintegration','/','zeemee','/','outbound','/',variables('name'))",
                                                                "type": "Expression"
                                                            },
                                                            "wildcardFileName": "*",
                                                            "enablePartitionDiscovery": false
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextReadSettings"
                                                        }
                                                    },
                                                    "sink": {
                                                        "type": "DelimitedTextSink",
                                                        "storeSettings": {
                                                            "type": "SftpWriteSettings",
                                                            "operationTimeout": "01:00:00",
                                                            "useTempFileRename": true
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextWriteSettings",
                                                            "quoteAllText": true,
                                                            "fileExtension": ".csv"
                                                        }
                                                    },
                                                    "enableStaging": false,
                                                    "translator": {
                                                        "type": "TabularTranslator",
                                                        "typeConversion": true,
                                                        "typeConversionSettings": {
                                                            "allowDataTruncation": true,
                                                            "treatBooleanAsNumber": false
                                                        }
                                                    }
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "ds_pi_adls",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "ContainerName": {
                                                                "value": "@pipeline().parameters.containerName",
                                                                "type": "Expression"
                                                            },
                                                            "folderName": "partnerintegration/zeemee/outbound",
                                                            "storageaccountname": {
                                                                "value": "@pipeline().parameters.storageaccountname",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "ds_pi_sftp",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "folderName": {
                                                                "value": "@concat('Inbound','/',variables('name'))",
                                                                "type": "Expression"
                                                            },
                                                            "zeemee_host": {
                                                                "value": "@pipeline().parameters.zeemee_host",
                                                                "type": "Expression"
                                                            },
                                                            "zeemee_username": {
                                                                "value": "@pipeline().parameters.zeemee_username",
                                                                "type": "Expression"
                                                            },
                                                            "vaulturl": {
                                                                "value": "@pipeline().parameters.vault_url",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "name": "iteName from sftp inbound",
                                                "description": "This variable holds the itemName list when if condition true ",
                                                "type": "SetVariable",
                                                "dependsOn": [],
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "name",
                                                    "value": {
                                                        "value": "@activity('sftp Inbound foldername list').output.itemName",
                                                        "type": "Expression"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "itemName",
                                    "description": "itemName from foreach ",
                                    "type": "SetVariable",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "nnp",
                                        "value": {
                                            "value": "@item().name",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Lookup to zeemee staging",
                                    "description": "Lookup to zeemee staging table",
                                    "type": "Lookup",
                                    "dependsOn": [
                                        {
                                            "activity": "Check True or false",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "SqlDWSource",
                                            "sqlReaderQuery": {
                                                "value": "select [Account Name] as university_name,count(*) as TotalRecordCount,count([First Name]) as studentcount, 0 as parentcount from \n[etl].[RNLtoZeemee_Staging] where [Slug Name]= '@{variables('nnp')}'\ngroup by [Account Name]",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "ds_pi_synapse",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "tablename": "RNLtoZeemee_Staging",
                                                "schemaname": "etl",
                                                "az_synapse_em_server": {
                                                    "value": "@pipeline().parameters.az_synapse_em_server",
                                                    "type": "Expression"
                                                },
                                                "az_synapse_db": {
                                                    "value": "@pipeline().parameters.az_synapse_db",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "firstRowOnly": true
                                    }
                                },
                                {
                                    "name": "zeemee partner data profiling",
                                    "description": "data profiling audit",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "Lookup to zeemee staging",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[etl].[insert_rows_partner]",
                                        "storedProcedureParameters": {
                                            "parent_count": {
                                                "value": {
                                                    "value": "@activity('Lookup to zeemee staging').output.firstRow['parentcount']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "row_count": {
                                                "value": {
                                                    "value": "@activity('Lookup to zeemee staging').output.firstRow['TotalRecordCount']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "student_count": {
                                                "value": {
                                                    "value": "@activity('Lookup to zeemee staging').output.firstRow['studentcount']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "university_name": {
                                                "value": {
                                                    "value": "@activity('Lookup to zeemee staging').output.firstRow['university_name']",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "partner_name": {
                                                "value": "zeemee",
                                                "type": "String"
                                            },
                                            "flow_type": {
                                                "value": "forward",
                                                "type": "String"
                                            },
                                            "university_file_name": {
                                                "value": {
                                                    "value": "@concat(variables('nnp'),'_',formatDateTime(pipeline().parameters.windowStart,'yyyy'),formatDateTime(pipeline().parameters.windowStart,'MM'),formatDateTime(pipeline().parameters.windowStart,'dd'),'.csv')",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "adf_run_id": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ParentPipelineRunID",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "org": {
                                                "value": {
                                                    "value": "@variables('nnp')",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_AzureSqlDB",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_sql_server_name",
                                                "type": "Expression"
                                            },
                                            "az_sql_db": {
                                                "value": "@pipeline().parameters.az_sql_db_name",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "zeemee_Raw to Outbound Segregated slugwise",
                        "description": "segregating data into adls outbound folder slugwise",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [
                            {
                                "activity": "RNLtoZeemee_Staging",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "1.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "df_zeemee_segregated_slugwise",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "src": {
                                        "tablename": "RNLtoZeemee_Staging",
                                        "schemaname": "etl",
                                        "az_synapse_em_server": {
                                            "value": "@pipeline().parameters.az_synapse_em_server",
                                            "type": "Expression"
                                        },
                                        "az_synapse_db": {
                                            "value": "@pipeline().parameters.az_synapse_db",
                                            "type": "Expression"
                                        }
                                    },
                                    "sink": {
                                        "ContainerName": {
                                            "value": "@pipeline().parameters.containerName",
                                            "type": "Expression"
                                        },
                                        "folderName": "partnerintegration/zeemee/outbound/",
                                        "storageaccountname": {
                                            "value": "@pipeline().parameters.storageaccountname",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    },
                    {
                        "name": "Zeemee_SourceQuery_Data_Fetch",
                        "description": "Using zeemee source query data is fetching from crm and dumping it into raw folder of partnerintegration in adls",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "File Audit - crm to adls started",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 3,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlServerSource",
                                "sqlReaderQuery": {
                                    "value": "/*\n\tZeeMee Export\n*/\n\nSET NOCOUNT ON;\n\nDrop table if exists #StudentList\nDrop table if exists #StudentSchool\ndrop table if exists #ClientIDs\n\n\n/* Contact List \n\tPull most recently created contact if there are duplicates from partition\n*/\n\tSelect \n\t\t* \n\t\tinto #StudentList\n\tfrom (\n\t\tselect\n\t\t\ta.po_applicationId,po_contactid  ,\n\t\t\tcast  (  case when po_flag_enr = 1 then 'Enrolled'  \n                                                when po_flag_con = 1 AND po_flag_can = 1 then 'Commitment Withdrawn'   \n                                                when po_flag_con = 1 then 'Committed'  \n                                                when (po_flagdeny = 'Y' or po_AdmitStatusCode = '936710001') then 'Denied' \n                                                when po_flag_admit = 1 AND po_flag_can = 1 then 'Acceptance Declined'  \n                                                when po_flagdefer = 'Y' AND po_flag_can = 1 then 'Deferred Withdrawn'  \n                                                when po_flagdefer = 'Y' then 'Deferred'  \n                                                when po_flagwait = 'Y'   AND po_flag_can = 1 then 'Waitlisted Withdrawn'  \n                                                when po_flagwait = 'Y' then 'Waitlisted'   \n                                                when po_flag_admit = 1 then 'Accepted'  \n                                                when (((po_flag_app= 1 or po_Date_App is not null) and po_appcode = '936710000') AND po_flag_can = 1) then 'Application Complete Withdrawn' \n                                                when ((po_flag_app = 1 or po_Date_App is not null) and po_appcode = '936710000') then 'Application Complete'            \n                                                when po_flag_app = 1 AND po_flag_can=1 then 'Application Canceled'                                 \n                                                when (po_flag_app = 1 or po_Date_App is not null) then 'Applied'\n                                                when po_flag_inq = 1 AND po_flag_can = 1 then 'Inquired Dropped'    \n                                                when (po_flag_inq=1 or po_Date_INQ is not null) then 'Inquired'    \n                                                when po_flag_pro =1 and (po_flag_inq=0 and po_Date_Inq is null) and po_flag_can=1 then 'Lead Dropped'    \n                                                when po_flag_pro =1 and (po_flag_inq=0 and po_Date_Inq is null) then 'Lead'    else NULL end as nvarchar(50)) as CurrentStatus ,\n\n\t\t\tROW_NUMBER() OVER (PARTITION BY concat(c.ParentCustomerIdName, c.FirstName,c.LastName,c.EMailAddress1,(CONVERT(date,c.BirthDate))) order by c.createdon Desc) AS rn\n\t\t\t, ac.po_zeemeeslugname\n\t\tfrom \n\t\t\tdbo.po_applicationBase  a WITH (NOLOCK)      \n\t\t\tINNER JOIN dbo.contactbase c WITH (NOLOCK)      \n\t\t\t\tON a.po_applicationId = c.po_LatestResponse\n\t\t\tinner join [dbo].[AccountBase] ac WITH (NOLOCK) \n\t\t\t\ton ac.AccountId = c.ParentCustomerId\n\t\t\t\tand ac.po_zeemeeslugname is not null   \n\t\t\t/*Entry Term from Lookup to get RNL code format*/\n\t\t\tLEFT JOIN [dbo].[po_lookup] ET WITH(NOLOCK)\n\t\t\t\tON ET.po_lookupId = a.po_lookupid\n\t\t\t\tAND ET.po_type = 936710004\n\t\t\t/*EntryStatus String Table*/\n\t\t\tLEFT JOIN [dbo].StringMap [po_entrystatusPLTable] WITH(NOLOCK)\n\t\t\t\tON ([po_entrystatusPLTable].AttributeName = 'po_entrystat'\n\t\t\t\tAND [po_entrystatusPLTable].ObjectTypeCode = 10086\n\t\t\t\tAND [po_entrystatusPLTable].AttributeValue = a.po_EntryStat\n\t\t\t\tAND [po_entrystatusPLTable].LangId = 1033)\n\t\t\tinner JOIN (\n\t\t\t\tSelect \n\t\t\t\t\tICR2.po_RNLValue, max(ICR2.po_clientvalue) as po_clientvalue\n\t\t\t\tfrom \n\t\t\t\t\t[dbo].[po_institutioncrossreference] ICR2 WITH(NOLOCK) \n\t\t\t\twhere \n\t\t\t\t\tICR2.po_type = 936710020 \n\t\t\t\t\tAND ICR2.Statuscode = 1 \n\t\t\t\t\tAND ICR2.po_AccountIdName = 'Ruffalo Noel Levitz'\n\t\t\t\tGroup by ICR2.po_RNLValue\n\t\t\t\t) ICR2 ON ICR2.po_RNLValue = po_entrystatusPLTable.Value \n\t\t\twhere \n\t\t\t\t/*c.ParentCustomerIdName = @ClientName and */\n\t\t\t\tC.statuscode=1\n\t\t\t\tAND C.po_contacttype IN (936710000)\n\t\t\t\tand ICR2.po_RNLValue in ('Freshman','Transfer')\n\t\t\t\tand ET.po_Code in ('23 Fall','24 Fall','25 Fall','23 Summer','24 Summer','25 Summer','23 Spring','24 Spring','25 Spring')\t\n\t\t\t\n\t\t\n\t) sub \n\twhere sub.rn=1\n\tand CurrentStatus is not null\n\n/*\n\tSelect count(*) From #StudentList\n\tselect top 5000 * from #StudentList\n*/\n\n\n/* School attendence */\n\tSELECT \n\t\tPO2.po_student \t\t\t    \n\t\t\t, Convert(decimal(10,2),PO2.po_GPA,2) AS po_GPA \t\t\t    \n\t\t\t, YEAR(PO2.po_YearofHighSchoolGraduation) AS po_YearofHighSchoolGraduation \t\t\t    \n\t\t\t, PO2.SIC \t\t\t    \n\t\t\t, PO2.Name    \n\t\tinto #StudentSchool\n\tFROM\n\t\t(  \n\t\tSELECT  \n\t\t\tSA.po_student,SA.po_GPA,SA.po_YearofHighSchoolGraduation,A.SIC,A.Name,   \n\t\t\tROW_NUMBER() OVER (PARTITION BY po_student ORDER BY SA.po_YearofHighSchoolGraduation DESC, SA.ModifiedOn DESC) AS rn       \n\t\tFROM \n\t\t\t[dbo].[po_schoolattendance] AS SA WITH (NOLOCK)     \n\t\t\tLEFT JOIN [dbo].[Accountbase] AS A WITH (NOLOCK)  \n\t\t\t\tON A.accountid = SA.po_accountid       \n\t\t\tinner join #StudentList c \n\t\t\t\ton c.po_contactid = sa.po_Student\n\t\tWHERE  \n\t\t\tSA.statuscode = 1\n\t\t) PO2  \n\tWHERE PO2.rn = 1    \n\n/*Get ID */\n\tSELECT \n\t\tm2.po_contactid, m2.po_lookupidName, m2.po_name\n\t\tinto #ClientIDs\n\tFROM \n\t(\n\t\tSELECT m.po_contactid, m.po_lookupidName, m.po_name, m.modifiedon, \n\t\tROW_NUMBER() OVER (PARTITION BY m.po_contactid ORDER BY m.modifiedon DESC) AS rn        \n\t\tFROM [dbo].[po_id] m WITH(NOLOCK)\n\t\t\tinner join #StudentList s on s.po_contactid = m.po_contactid\n\t\tWHERE po_lookupidName in ('Client ID')\n\t) m2 \n\tWHERE m2.rn = 1\n\n\nSELECT \n\t\n\tISNULL(po_contactnumber,'') AS id,\n\tc.ParentCustomerIdName [Account Name]   ,\n\tcs.po_zeemeeslugname zeemeeslugname, \n\tc.ParentCustomerId [AccountId],\n\tc.ContactId [ContactId],\n\tISNULL(C.FirstName,'') AS FirstName,\n\tISNULL(C.LastName,'') AS LastName,\n\tISNULL(C.EMailAddress1,'') AS EMail,\n\tISNULL(REPLACE(C.MobilePhone, '-',''),'') AS 'Cell Phone',\n\n\treplace(cast(REVERSE(PARSENAME(REPLACE(REVERSE(et.po_name), ' ', '.'), 2)) as nvarchar(50)),',','')\t[Entry Year]  ,  \n\t case when replace(cast(REVERSE(PARSENAME(REPLACE(REVERSE(et.po_name), ' ', '.'), 1)) as nvarchar(50)),',','') = 'Winter' then 'Spring'    \n\telse replace(cast(REVERSE(PARSENAME(REPLACE(REVERSE(et.po_name), ' ', '.'), 1)) as nvarchar(50)),',','') end as\t[Entry Term] ,\n\tisnull(ICR2.po_clientvalue,'')\t'Student Type',\n\tisnull(left(c.MiddleName,1),'') as 'Middle Initial',\n\tcase when c.DoNotBulkEMail = 1 then 'x' else '' end as 'Email Opt Out',\n\tISNULL(C.Address1_Line1,'') AS Address1,\n\tISNULL(C.Address1_City,'') AS City,\n\tISNULL(C.Address1_StateOrProvince,'') AS 'State/Province',\n\tISNULL(C.Address1_PostalCode,'') AS 'Zip Code',\n\tISNULL(C.Address1_Country,'') AS 'Country',\n\tISNULL(REPLACE(c.Telephone2, '-', ''),'') AS 'Home Phone'    \n\t, case when po_SMSallowPLTable.Value = '1' then ' ' else 'x' end AS 'SMS/Text Opt Out'    \n\t, FORMAT(cast(c.BirthDate as date), 'd','us') AS BirthDate  \n\t, '' as 'Race/Ethnicity'    \n\t, '' as 'First Gen Flag'    \n\t, ISNULL(left(GenderCodePLTable.Value,1),'') AS Gender    \n\t, FORMAT(cast(app.po_date_inq as date), 'd','us') as 'Date of Initial Contact'    \n\t, c.po_ClientSourceCode as 'Initial Source Code'    \n\t, '' as 'College Counselor Name/Code'    \n\t, '' as 'College Counselor Email'    \n\t, '' as 'Initial Visit Type'    \n\t, cs.CurrentStatus    \n\t, FORMAT(cast(app.po_campusvisitdate as date), 'd','us') as 'Initial Visit Date'    \n\t, FORMAT(cast(app.po_date_app as date), 'd','us') as 'Application Date'    \n\t, case when app.po_appcode= '936710000' and app.po_date_app is not null      then FORMAT(cast(app.po_date_app as date), 'd','us') \n\telse NULL end as 'Application Completed Date'    \n\t, FORMAT(cast(app.po_datewait as date), 'd','us') as 'Waitlisted Date'    \n\t, FORMAT(cast(app.po_datedeny as date), 'd','us') as 'Denied Date'    \n\t, FORMAT(cast(app.po_Date_Admin as date), 'd','us') as 'Accepted Date'    \n\t, FORMAT(cast(app.po_Date_con as date), 'd','us') as 'Commited Date'    \n\t, FORMAT(cast(app.po_date_canc as date), 'd','us') as 'Withdrawal Date'    \n\t, ISNULL(po.SIC,'') AS 'HS CEEB Code'  \n\t, ISNULL(po.Name,'') AS 'HS Name'\n\t, id.po_name   as ClientID\nFROM \n\t[dbo].[Contact] C WITH(NOLOCK)\n\tinner join #StudentList cs on cs.po_contactid = c.ContactId\n\tINNER JOIN [dbo].[po_applicationbase] App WITH(NOLOCK) \n\t\tON APP.po_applicationId = C.po_LatestResponse\n\t/*Entry Term from Lookup to get RNL code format*/\n\tLEFT JOIN [dbo].[po_lookup] ET WITH(NOLOCK)\n\t\tON ET.po_lookupId = app.po_lookupid\n\t\tAND ET.po_type = 936710004\n\t/*SMS String Table Code to Description*/\n\tLEFT JOIN [dbo].StringMap [po_SMSallowPLTable] WITH(NOLOCK)\n\t\tON ([po_SMSallowPLTable].AttributeName = 'po_smsallow'\n\t\tAND [po_SMSallowPLTable].ObjectTypeCode = 2\n\t\tAND [po_SMSallowPLTable].AttributeValue = C.[po_SMSallow]\n\t\tAND [po_SMSallowPLTable].LangId = 1033)\n\n\t/*Gender String Table Code to Description*/\n\tLEFT JOIN [dbo].StringMap [GenderCodePLTable] WITH(NOLOCK)\n\t\tON ([GenderCodePLTable].AttributeName = 'gendercode'\n\t\tAND [GenderCodePLTable].ObjectTypeCode = 2\n\t\tAND [GenderCodePLTable].AttributeValue = C.[GenderCode]\n\t\tAND [GenderCodePLTable].LangId = 1033)\n\t/*EntryStatus String Table*/\n\tLEFT JOIN [dbo].StringMap [po_entrystatusPLTable] WITH(NOLOCK)\n\t\tON ([po_entrystatusPLTable].AttributeName = 'po_entrystat'\n\t\tAND [po_entrystatusPLTable].ObjectTypeCode = 10086\n\t\tAND [po_entrystatusPLTable].AttributeValue = app.po_EntryStat\n\t\tAND [po_entrystatusPLTable].LangId = 1033)\n\t/*AdmitStatus String Table*/\n\tLEFT JOIN [dbo].StringMap [po_AdmitStatusPLTable] WITH(NOLOCK)\n\t\tON ([po_AdmitStatusPLTable].AttributeName = 'po_admitstatuscode'\n\t\tAND [po_AdmitStatusPLTable].ObjectTypeCode = 10086\n\t\tAND [po_AdmitStatusPLTable].AttributeValue = app.po_AdmitStatusCode\n\t\tAND [po_AdmitStatusPLTable].LangId = 1033)\n\t/*Student Type*/\n\tLEFT JOIN (\n\t\t\tSelect \n\t\t\t\tICR2.po_RNLValue, max(ICR2.po_clientvalue) as po_clientvalue\n\t\t\tfrom \n\t\t\t\t[dbo].[po_institutioncrossreference] ICR2 WITH(NOLOCK) \n\t\t\twhere \n\t\t\t\tICR2.po_type = 936710020 \n\t\t\t\tAND ICR2.Statuscode = 1 \n\t\t\t\tAND ICR2.po_AccountIdName = 'Ruffalo Noel Levitz'\n\t\t\tGroup by ICR2.po_RNLValue\n\t\t\t) ICR2 ON ICR2.po_RNLValue = po_entrystatusPLTable.Value \n\t/*Admit Status Code*/\n\tLEFT JOIN (\n\t\t\tSelect \n\t\t\t\tICR4.po_RNLValue, max(ICR4.po_clientvalue) as po_clientvalue\n\t\t\tfrom [dbo].[po_institutioncrossreference] ICR4 WITH(NOLOCK) \n\t\t\tWhere\n\t\t\t\tICR4.po_type = 936710010 \n\t\t\t\tAND ICR4.Statuscode = 1 \n\t\t\t\tAND ICR4.po_AccountIdName = 'Ruffalo Noel Levitz'\n\t\t\tGroup by ICR4.po_RNLValue\n\t\t) ICR4 ON ICR4.po_RNLValue =  po_AdmitStatusPLTable.Value \n\n\t/*Get only one High School*/\n\tLEFT JOIN \n\t\t#StudentSchool PO ON\tPO.po_student = C.contactid\n\tleft join #ClientIDs id on id.po_contactid = c.ContactId\noption(recompile, maxdop 8);",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "DelimitedTextSink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextWriteSettings",
                                    "quoteAllText": true,
                                    "fileExtension": ".txt"
                                }
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ds_pi_appboostCRM_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "crm_servername": {
                                        "value": "@pipeline().parameters.crm_servername",
                                        "type": "Expression"
                                    },
                                    "crm_dbname": {
                                        "value": "@pipeline().parameters.crm_dbname",
                                        "type": "Expression"
                                    },
                                    "crm_username": {
                                        "value": "@pipeline().parameters.crm_username",
                                        "type": "Expression"
                                    },
                                    "vaulturl": {
                                        "value": "@pipeline().parameters.vault_url",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ds_pi_sourcefile_zeemee",
                                "type": "DatasetReference",
                                "parameters": {
                                    "ContainerName": {
                                        "value": "@pipeline().parameters.containerName",
                                        "type": "Expression"
                                    },
                                    "FilePath": "partnerintegration/raw/outbound",
                                    "Filename": "zeemee.csv",
                                    "storageaccountname": {
                                        "value": "@pipeline().parameters.storageaccountname",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "File Audit - adls to sftp started",
                        "description": "File Audit - adls to sftp started",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "zeemee_Raw to Outbound Segregated slugwise",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-file-processing-log",
                            "baseParameters": {
                                "audit_id": "904",
                                "adf_run_id": {
                                    "value": "@pipeline().parameters.ParentPipelineRunID",
                                    "type": "Expression"
                                },
                                "file_processing_stage": "zeemee sftp inbound copy started",
                                "status": "Started",
                                "row_count": "0",
                                "rejected_row": "0",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_sql_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_sql_db_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "File Audit - adls to sftp completed",
                        "description": "File Audit - adls to sftp completed",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "ForEach1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-file-processing-log",
                            "baseParameters": {
                                "audit_id": "905",
                                "adf_run_id": {
                                    "value": "@pipeline().parameters.ParentPipelineRunID",
                                    "type": "Expression"
                                },
                                "file_processing_stage": "zeemee sftp inbound copy completed",
                                "status": "Completed",
                                "row_count": "0",
                                "rejected_row": "0",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_sql_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_sql_db_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "File Audit - adls to sftp failed",
                        "description": "File Audit - adls to sftp failed",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "ForEach1",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-file-processing-log",
                            "baseParameters": {
                                "audit_id": "906",
                                "adf_run_id": {
                                    "value": "@pipeline().parameters.ParentPipelineRunID",
                                    "type": "Expression"
                                },
                                "file_processing_stage": "zeemee sftp inbound copy failed",
                                "status": "Failed",
                                "row_count": "0",
                                "rejected_row": "0",
                                "error_description": "zeemee sftp inbound copy failed",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_sql_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_sql_db_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "File Audit - crm to adls started",
                        "description": "File Audit - crm to adls started",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "If exists archive",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-file-processing-log",
                            "baseParameters": {
                                "audit_id": "904",
                                "adf_run_id": {
                                    "value": "@pipeline().parameters.ParentPipelineRunID",
                                    "type": "Expression"
                                },
                                "file_processing_stage": "zeemee adls outbound copy started",
                                "status": "Started",
                                "row_count": "0",
                                "rejected_row": "0",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_sql_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_sql_db_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "File Audit - crm to adls completed",
                        "description": "File Audit - crm to adls completed",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "Zeemee_SourceQuery_Data_Fetch",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-file-processing-log",
                            "baseParameters": {
                                "audit_id": "905",
                                "adf_run_id": {
                                    "value": "@pipeline().parameters.ParentPipelineRunID",
                                    "type": "Expression"
                                },
                                "file_processing_stage": "zeemee adls outbound copy completed",
                                "status": "Completed",
                                "row_count": "0",
                                "rejected_row": "0",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_sql_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_sql_db_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "File Audit - crm to adls failed",
                        "description": "File Audit - crm to adls failed",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "Zeemee_SourceQuery_Data_Fetch",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-file-processing-log",
                            "baseParameters": {
                                "audit_id": "906",
                                "adf_run_id": {
                                    "value": "@pipeline().parameters.ParentPipelineRunID",
                                    "type": "Expression"
                                },
                                "file_processing_stage": "zeemee adls outbound copy failed",
                                "status": "Failed",
                                "row_count": "0",
                                "rejected_row": "0",
                                "error_description": "zeemee adls outbound copy failed",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_sql_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_sql_db_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Folder exists or not for archive",
                        "description": "checking folder exists or not in outbound folder",
                        "type": "GetMetadata",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "ds_pi_adls",
                                "type": "DatasetReference",
                                "parameters": {
                                    "ContainerName": {
                                        "value": "@pipeline().parameters.containerName",
                                        "type": "Expression"
                                    },
                                    "folderName": "partnerintegration/zeemee/outbound",
                                    "storageaccountname": {
                                        "value": "@pipeline().parameters.storageaccountname",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "fieldList": [
                                "exists"
                            ],
                            "storeSettings": {
                                "type": "AzureBlobFSReadSettings",
                                "recursive": true,
                                "enablePartitionDiscovery": false
                            },
                            "formatSettings": {
                                "type": "DelimitedTextReadSettings"
                            }
                        }
                    },
                    {
                        "name": "If exists archive",
                        "description": "If folder present then archiving it.",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Folder exists or not for archive",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(activity('Folder exists or not for archive').output.exists,true)",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Archive",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "DelimitedTextSource",
                                            "storeSettings": {
                                                "type": "AzureBlobFSReadSettings",
                                                "recursive": true,
                                                "wildcardFolderPath": "partnerintegration/zeemee/outbound",
                                                "wildcardFileName": "*",
                                                "enablePartitionDiscovery": false
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextReadSettings"
                                            }
                                        },
                                        "sink": {
                                            "type": "DelimitedTextSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextWriteSettings",
                                                "quoteAllText": true,
                                                "fileExtension": ".txt"
                                            }
                                        },
                                        "enableStaging": false
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "ds_pi_adls",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "ContainerName": {
                                                    "value": "@pipeline().parameters.containerName",
                                                    "type": "Expression"
                                                },
                                                "folderName": "partnerintegration/zeemee/outbound",
                                                "storageaccountname": {
                                                    "value": "@pipeline().parameters.storageaccountname",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "ds_pi_adls",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "ContainerName": {
                                                    "value": "@pipeline().parameters.containerName",
                                                    "type": "Expression"
                                                },
                                                "folderName": {
                                                    "value": "@concat('partnerintegration','/','zeemee','/','archive','/','outbound','/',formatDateTime(pipeline().parameters.windowStart,'yyyy'),formatDateTime(pipeline().parameters.windowStart,'MM'),formatDateTime(pipeline().parameters.windowStart,'dd'))",
                                                    "type": "Expression"
                                                },
                                                "storageaccountname": {
                                                    "value": "@pipeline().parameters.storageaccountname",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "Delete Processed files after Archival",
                                    "type": "Delete",
                                    "dependsOn": [
                                        {
                                            "activity": "Archive",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "ds_pi_adls",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "ContainerName": {
                                                    "value": "@pipeline().parameters.containerName",
                                                    "type": "Expression"
                                                },
                                                "folderName": "partnerintegration/zeemee/outbound/",
                                                "storageaccountname": {
                                                    "value": "@pipeline().parameters.storageaccountname",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "enableLogging": false,
                                        "storeSettings": {
                                            "type": "AzureBlobFSReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "RNLtoZeemee_Staging",
                        "description": "dumping data into zeemee staging table\netl.RNLtoZeemee_Staging",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "File Audit - crm to adls completed",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": "truncate table [etl].[RNLtoZeemee_Staging]",
                                "writeBehavior": "Insert",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "AccountId",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "AccountId",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Account Name",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Account Name",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "zeemeeslugname",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Slug Name",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "FirstName",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "First Name",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "LastName",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Last Name",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "EMail",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Email",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Cell Phone",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Cell Phone",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "id",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "ID Number",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Entry Year",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Entry Year",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Entry Term",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Entry Term",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Student Type",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Student Type",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Middle Initial",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Middle Initial",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Email Opt Out",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Email Opt Out",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Address1",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Address1",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "City",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "City",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "State/Province",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "State/Province",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Zip Code",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Zip Code",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Country",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Country",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Home Phone",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Home Phone",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "SMS/Text Opt Out",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "SMS/Text Opt Out",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "CurrentStatus",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Current Status",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "BirthDate",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Date of Birth",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Race/Ethnicity",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Race/Ethnicity",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "First Gen Flag",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "First Gen Flag",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Gender",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Gender",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Date of Initial Contact",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Date of Initial Contact",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Initial Source Code",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Initial Source Code",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "College Counselor Name/Code",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "College Counselor Name/Code",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "College Counselor Email",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "College Counselor Email",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Initial Visit Type",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Initial Visit Type",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Initial Visit Date",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Initial Visit Date",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Application Date",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Application Date",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Application Completed Date",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Application Completed Date",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Waitlisted Date",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Waitlisted Date",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Denied Date",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Denied Date",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Accepted Date",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Accepted Date",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Commited Date",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Committed Date",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Withdrawal Date",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Withdrawal Date",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "HS CEEB Code",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "HS CEEB Code",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "HS Name",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "HS Name",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ClientID",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "ClientID",
                                            "type": "String"
                                        }
                                    }
                                ]
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ds_pi_sourcefile_zeemee",
                                "type": "DatasetReference",
                                "parameters": {
                                    "ContainerName": {
                                        "value": "@pipeline().parameters.containerName",
                                        "type": "Expression"
                                    },
                                    "FilePath": "partnerintegration/raw/outbound",
                                    "Filename": "zeemee.csv",
                                    "storageaccountname": {
                                        "value": "@pipeline().parameters.storageaccountname",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ds_pi_synapse",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "RNLtoZeemee_Staging",
                                    "schemaname": "etl",
                                    "az_synapse_em_server": {
                                        "value": "@pipeline().parameters.az_synapse_em_server",
                                        "type": "Expression"
                                    },
                                    "az_synapse_db": {
                                        "value": "@pipeline().parameters.az_synapse_db",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "Email - adls to sftp successful",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "ForEach1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@pipeline().parameters.SuccessEmailURL",
                                "type": "Expression"
                            },
                            "connectVia": {
                                "referenceName": "AutoResolveIntegrationRuntime",
                                "type": "IntegrationRuntimeReference"
                            },
                            "method": "POST",
                            "headers": {
                                "Content-Type": "application/json"
                            },
                            "body": {
                                "value": "{\n\"DataFactoryName\": \"@{pipeline().DataFactory}\",\n\"EmailTo\": \"Bhushan.Ahire@ruffalonl.com\",\n\"PipelineName\": \"@{pipeline().Pipeline}\",\n\"Subject\": \"File copied to adls to sftp Successful!\"\n}",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Email - Filecopy failed adls to sftp",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "ForEach1",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@pipeline().parameters.FailureEmailURL",
                                "type": "Expression"
                            },
                            "connectVia": {
                                "referenceName": "AutoResolveIntegrationRuntime",
                                "type": "IntegrationRuntimeReference"
                            },
                            "method": "POST",
                            "headers": {
                                "Content-Type": "application/json"
                            },
                            "body": {
                                "value": "{\n\"DataFactoryName\": \"@{pipeline().DataFactory}\",\n\"EmailTo\": \"Bhushan.Ahire@ruffalonl.com\",\n\"ErrorMessage\": \"Filecopy failed adls to sftp\",\n\"PipelineName\": \"@{pipeline().Pipeline}\",\n\"Subject\": \"An error has occurred!\",\n\"ActivityName\": \"Email - Filecopy failed adls to sftp\"\n}",
                                "type": "Expression"
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "windowStart": {
                        "type": "string"
                    },
                    "ParentPipelineName": {
                        "type": "string"
                    },
                    "ParentPipelineRunID": {
                        "type": "string"
                    },
                    "ParentTriggerName": {
                        "type": "string"
                    },
                    "az_sql_server_name": {
                        "type": "string"
                    },
                    "az_sql_db_name": {
                        "type": "string"
                    },
                    "databricks_workspace_url": {
                        "type": "string"
                    },
                    "databricks_clusterid": {
                        "type": "string"
                    },
                    "storageaccountname": {
                        "type": "string"
                    },
                    "containerName": {
                        "type": "string"
                    },
                    "vault_url": {
                        "type": "string"
                    },
                    "crm_servername": {
                        "type": "string"
                    },
                    "crm_dbname": {
                        "type": "string"
                    },
                    "crm_username": {
                        "type": "string"
                    },
                    "az_synapse_em_server": {
                        "type": "string"
                    },
                    "az_synapse_db": {
                        "type": "string"
                    },
                    "zeemee_host": {
                        "type": "string"
                    },
                    "zeemee_username": {
                        "type": "string"
                    },
                    "SuccessEmailURL": {
                        "type": "string"
                    },
                    "FailureEmailURL": {
                        "type": "string"
                    }
                },
                "variables": {
                    "childitem": {
                        "type": "String"
                    },
                    "name": {
                        "type": "String"
                    },
                    "nnp": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "partner-Integration"
                },
                "annotations": [],
                "lastPublishTime": "2022-11-16T07:47:03Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-zeemee-fw-adhoc-flow')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "adls Zeemee outbound folder list",
                        "description": "adls zeemee outbound folder list",
                        "type": "GetMetadata",
                        "dependsOn": [
                            {
                                "activity": "File Audit - adls to sftp started",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "ds_pi_adls",
                                "type": "DatasetReference",
                                "parameters": {
                                    "ContainerName": {
                                        "value": "@pipeline().parameters.containerName",
                                        "type": "Expression"
                                    },
                                    "folderName": "partnerintegration/zeemee/outbound",
                                    "storageaccountname": {
                                        "value": "@pipeline().parameters.storageaccountname",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "fieldList": [
                                "childItems"
                            ],
                            "storeSettings": {
                                "type": "AzureBlobFSReadSettings",
                                "recursive": true,
                                "enablePartitionDiscovery": false
                            },
                            "formatSettings": {
                                "type": "DelimitedTextReadSettings"
                            }
                        }
                    },
                    {
                        "name": "ForEach1",
                        "description": "Iterate over adls outbound zeemee slugname folders",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "adls Zeemee outbound folder list",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('adls zeemee outbound folder list').output.childItems",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "sftp Inbound foldername list",
                                    "description": "checking foldername from sftp ",
                                    "type": "GetMetadata",
                                    "dependsOn": [
                                        {
                                            "activity": "itemName",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.00:05:00",
                                        "retry": 3,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "ds_pi_sftp",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "folderName": {
                                                    "value": "@concat('testQA','/','Inbound','/',item().name)",
                                                    "type": "Expression"
                                                },
                                                "zeemee_host": {
                                                    "value": "@pipeline().parameters.zeemee_host",
                                                    "type": "Expression"
                                                },
                                                "zeemee_username": {
                                                    "value": "@pipeline().parameters.zeemee_username",
                                                    "type": "Expression"
                                                },
                                                "vaulturl": {
                                                    "value": "@pipeline().parameters.vault_url",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "fieldList": [
                                            "exists",
                                            "itemName"
                                        ],
                                        "storeSettings": {
                                            "type": "SftpReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false,
                                            "disableChunking": false
                                        },
                                        "formatSettings": {
                                            "type": "DelimitedTextReadSettings"
                                        }
                                    }
                                },
                                {
                                    "name": "Check True or false",
                                    "description": "If true then copy to respective slugname folder in sftp/inbound else copy to default folder",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "sftp Inbound foldername list",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@equals(activity('sftp Inbound foldername list').output.exists,true)",
                                            "type": "Expression"
                                        },
                                        "ifFalseActivities": [
                                            {
                                                "name": "default folderName",
                                                "description": "default folder sftp inbound",
                                                "type": "SetVariable",
                                                "dependsOn": [],
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "name",
                                                    "value": "default"
                                                }
                                            },
                                            {
                                                "name": "Copy to SFTP default",
                                                "description": "Copy file to default folder in SFTP inbound for new slug name ",
                                                "type": "Copy",
                                                "dependsOn": [
                                                    {
                                                        "activity": "default folderName",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "DelimitedTextSource",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSReadSettings",
                                                            "recursive": true,
                                                            "wildcardFolderPath": {
                                                                "value": "@concat('partnerintegration','/','zeemee','/','outbound','/',variables('nnp'))",
                                                                "type": "Expression"
                                                            },
                                                            "wildcardFileName": "*",
                                                            "enablePartitionDiscovery": false
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextReadSettings"
                                                        }
                                                    },
                                                    "sink": {
                                                        "type": "DelimitedTextSink",
                                                        "storeSettings": {
                                                            "type": "SftpWriteSettings",
                                                            "operationTimeout": "01:00:00",
                                                            "useTempFileRename": true
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextWriteSettings",
                                                            "quoteAllText": true,
                                                            "fileExtension": ".csv"
                                                        }
                                                    },
                                                    "enableStaging": false,
                                                    "translator": {
                                                        "type": "TabularTranslator",
                                                        "typeConversion": true,
                                                        "typeConversionSettings": {
                                                            "allowDataTruncation": true,
                                                            "treatBooleanAsNumber": false
                                                        }
                                                    }
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "ds_pi_adls",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "ContainerName": {
                                                                "value": "@pipeline().parameters.containerName",
                                                                "type": "Expression"
                                                            },
                                                            "folderName": {
                                                                "value": "partnerintegration/zeemee/outbound",
                                                                "type": "Expression"
                                                            },
                                                            "storageaccountname": {
                                                                "value": "@pipeline().parameters.storageaccountname",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "ds_pi_sftp",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "folderName": {
                                                                "value": "@concat('testQA','/','Inbound','/',variables('name'))",
                                                                "type": "Expression"
                                                            },
                                                            "zeemee_host": {
                                                                "value": "@pipeline().parameters.zeemee_host",
                                                                "type": "Expression"
                                                            },
                                                            "zeemee_username": {
                                                                "value": "@pipeline().parameters.zeemee_username",
                                                                "type": "Expression"
                                                            },
                                                            "vaulturl": {
                                                                "value": "@pipeline().parameters.vault_url",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        ],
                                        "ifTrueActivities": [
                                            {
                                                "name": "Copy to SFTP Inbound",
                                                "description": "Copy file to slug name folder which is already present in SFTP inbound ",
                                                "type": "Copy",
                                                "dependsOn": [
                                                    {
                                                        "activity": "iteName from sftp inbound",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "DelimitedTextSource",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSReadSettings",
                                                            "recursive": true,
                                                            "wildcardFolderPath": {
                                                                "value": "@concat('partnerintegration','/','zeemee','/','outbound','/',variables('name'))",
                                                                "type": "Expression"
                                                            },
                                                            "wildcardFileName": "*",
                                                            "enablePartitionDiscovery": false
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextReadSettings"
                                                        }
                                                    },
                                                    "sink": {
                                                        "type": "DelimitedTextSink",
                                                        "storeSettings": {
                                                            "type": "SftpWriteSettings",
                                                            "operationTimeout": "01:00:00",
                                                            "useTempFileRename": true
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextWriteSettings",
                                                            "quoteAllText": true,
                                                            "fileExtension": ".csv"
                                                        }
                                                    },
                                                    "enableStaging": false,
                                                    "translator": {
                                                        "type": "TabularTranslator",
                                                        "typeConversion": true,
                                                        "typeConversionSettings": {
                                                            "allowDataTruncation": true,
                                                            "treatBooleanAsNumber": false
                                                        }
                                                    }
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "ds_pi_adls",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "ContainerName": {
                                                                "value": "@pipeline().parameters.containerName",
                                                                "type": "Expression"
                                                            },
                                                            "folderName": {
                                                                "value": "partnerintegration/zeemee/outbound",
                                                                "type": "Expression"
                                                            },
                                                            "storageaccountname": {
                                                                "value": "@pipeline().parameters.storageaccountname",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "ds_pi_sftp",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "folderName": {
                                                                "value": "@concat('testQA','/','Inbound','/',variables('name'))",
                                                                "type": "Expression"
                                                            },
                                                            "zeemee_host": {
                                                                "value": "@pipeline().parameters.zeemee_host",
                                                                "type": "Expression"
                                                            },
                                                            "zeemee_username": {
                                                                "value": "@pipeline().parameters.zeemee_username",
                                                                "type": "Expression"
                                                            },
                                                            "vaulturl": {
                                                                "value": "@pipeline().parameters.vault_url",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "name": "iteName from sftp inbound",
                                                "description": "This variable holds the itemName list when if condition true ",
                                                "type": "SetVariable",
                                                "dependsOn": [],
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "name",
                                                    "value": {
                                                        "value": "@activity('sftp Inbound foldername list').output.itemName",
                                                        "type": "Expression"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "itemName",
                                    "description": "itemName from foreach ",
                                    "type": "SetVariable",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "nnp",
                                        "value": {
                                            "value": "@item().name",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Lookup to zeemee staging",
                                    "description": "Lookup to zeemee staging table",
                                    "type": "Lookup",
                                    "dependsOn": [
                                        {
                                            "activity": "Check True or false",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "SqlDWSource",
                                            "sqlReaderQuery": {
                                                "value": "select [Account Name] as university_name,count(*) as TotalRecordCount,count([First Name]) as studentcount, 0 as parentcount from \n[etl].[RNLtoZeemee_Staging] where [Slug Name]= '@{variables('nnp')}'\ngroup by [Account Name]",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "ds_pi_synapse",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "tablename": "RNLtoZeemee_Staging",
                                                "schemaname": "etl",
                                                "az_synapse_em_server": {
                                                    "value": "@pipeline().parameters.az_synapse_em_server",
                                                    "type": "Expression"
                                                },
                                                "az_synapse_db": {
                                                    "value": "@pipeline().parameters.az_synapse_db",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "firstRowOnly": true
                                    }
                                },
                                {
                                    "name": "zeemee partner data profiling",
                                    "description": "data profiling audit",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "Lookup to zeemee staging",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[etl].[insert_rows_partner]",
                                        "storedProcedureParameters": {
                                            "parent_count": {
                                                "value": {
                                                    "value": "@activity('Lookup to zeemee staging').output.firstRow['parentcount']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "row_count": {
                                                "value": {
                                                    "value": "@activity('Lookup to zeemee staging').output.firstRow['TotalRecordCount']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "student_count": {
                                                "value": {
                                                    "value": "@activity('Lookup to zeemee staging').output.firstRow['studentcount']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "university_name": {
                                                "value": {
                                                    "value": "@activity('Lookup to zeemee staging').output.firstRow['university_name']",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "partner_name": {
                                                "value": "zeemee",
                                                "type": "String"
                                            },
                                            "flow_type": {
                                                "value": "forward",
                                                "type": "String"
                                            },
                                            "university_file_name": {
                                                "value": {
                                                    "value": "@concat(variables('nnp'),'_',formatDateTime(pipeline().parameters.windowStart,'yyyy'),formatDateTime(pipeline().parameters.windowStart,'MM'),formatDateTime(pipeline().parameters.windowStart,'dd'),'.csv')",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "adf_run_id": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ParentPipelineRunID",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "org": {
                                                "value": {
                                                    "value": "@variables('nnp')",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_AzureSqlDB",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_sql_server_name",
                                                "type": "Expression"
                                            },
                                            "az_sql_db": {
                                                "value": "@pipeline().parameters.az_sql_db_name",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "zeemee_Raw to Outbound Segregated slugwise",
                        "description": "segregating data into adls outbound folder slugwise",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [
                            {
                                "activity": "RNLtoZeemee_Staging",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "1.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "df_zeemee_segregated_slugwise",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "src": {
                                        "tablename": "RNLtoZeemee_Staging",
                                        "schemaname": "etl",
                                        "az_synapse_em_server": {
                                            "value": "@pipeline().parameters.az_synapse_em_server",
                                            "type": "Expression"
                                        },
                                        "az_synapse_db": {
                                            "value": "@pipeline().parameters.az_synapse_db",
                                            "type": "Expression"
                                        }
                                    },
                                    "sink": {
                                        "ContainerName": {
                                            "value": "@pipeline().parameters.containerName",
                                            "type": "Expression"
                                        },
                                        "folderName": "partnerintegration/zeemee/outbound/",
                                        "storageaccountname": {
                                            "value": "@pipeline().parameters.storageaccountname",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    },
                    {
                        "name": "Zeemee_SourceQuery_Data_Fetch",
                        "description": "Using zeemee source query data is fetching from crm and dumping it into raw folder of partnerintegration in adls",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "File Audit - crm to adls started",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 3,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlServerSource",
                                "sqlReaderQuery": {
                                    "value": "Drop table if exists #StudentList\nDrop table if exists #StudentSchool\ndrop table if exists #ClientIDs\n\n\n/* Contact List \n\tPull most recently created contact if there are duplicates from partition\n*/\n\tSelect \n\t\t* \n\t\tinto #StudentList\n\tfrom (\n\t\tselect\n\t\t\ta.po_applicationId,po_contactid  ,\n\t\t\tcast  (  case when po_flag_enr = 1 then 'Enrolled'  \n\t\t\twhen po_flag_con = 1 AND po_flag_can = 1 then 'Commitment Withdrawn'   \n\t\t\twhen po_flag_con = 1 then 'Committed'  \n\t\t\twhen po_flag_admit = 1 AND po_flag_can = 1 then 'Acceptance Declined'  \n\t\t\twhen po_flag_admit = 1 then 'Accepted'    \n\t\t\twhen po_flagdefer = 'Y' AND po_flag_can = 1 then 'Deferred Withdrawn'  \n\t\t\twhen po_flagdefer = 'Y' then 'Deferred'  \n\t\t\twhen po_flagwait = 'Y'   AND po_flag_can = 1 then 'Waitlisted Withdrawn'  \n\t\t\twhen po_flagwait = 'Y' then 'Waitlisted'  \n\t\t\twhen po_flagdeny = 'Y' then 'Denied'    \n\t\t\twhen (((po_flag_app= 1 or po_Date_App is not null) and po_appcode = '936710000') AND po_flag_can = 1) then 'Application Complete Withdrawn' \n\t\t\twhen ((po_flag_app = 1 or po_Date_App is not null) and po_appcode = '936710000') then 'Application Complete' \t\n\t\t\twhen ((po_flag_app = 1 or po_Date_App is not null) and po_appcode = '936710001' AND po_flag_can = 1) then 'Application Started Canceled' \t\t\n\t\t\twhen ((po_flag_app = 1 or po_Date_App is not null) and po_appcode = '936710001') then 'Application Started' \n\t\t\twhen po_flag_app = 1 AND po_flag_can=1 then 'Application Canceled' \t\t\n\t\t\twhen (po_flag_app = 1 or po_Date_App is not null) then 'Applied'\n\t\t\twhen po_flag_inq = 1 AND po_flag_can = 1 then 'Inquired Dropped'    \n\t\t\twhen (po_flag_inq=1 or po_Date_INQ is not null) then 'Inquired'    \n\t\t\twhen po_flag_pro =1 and (po_flag_inq=0 and po_Date_Inq is null) and po_flag_can=1 then 'Lead Dropped'    \n\t\t\twhen po_flag_pro =1 and (po_flag_inq=0 and po_Date_Inq is null) then 'Lead'    else NULL end as nvarchar(50)) as CurrentStatus , \n\n\n\n\t\t\tROW_NUMBER() OVER (PARTITION BY concat(c.ParentCustomerIdName, c.FirstName,c.LastName,c.EMailAddress1,(CONVERT(date,c.BirthDate))) order by c.createdon Desc) AS rn\n\t\t\t, ac.po_zeemeeslugname\n\t\tfrom \n\t\t\tdbo.po_applicationBase  a WITH (NOLOCK)      \n\t\t\tINNER JOIN dbo.contactbase c WITH (NOLOCK)      \n\t\t\t\tON a.po_applicationId = c.po_LatestResponse\n\t\t\tinner join [dbo].[AccountBase] ac WITH (NOLOCK) \n\t\t\t\ton ac.AccountId = c.ParentCustomerId\n\t\t\t\tand ac.po_zeemeeslugname is not null   \n\t\t\t/*Entry Term from Lookup to get RNL code format*/\n\t\t\tLEFT JOIN [dbo].[po_lookup] ET WITH(NOLOCK)\n\t\t\t\tON ET.po_lookupId = a.po_lookupid\n\t\t\t\tAND ET.po_type = 936710004\n\t\t\t/*EntryStatus String Table*/\n\t\t\tLEFT JOIN [dbo].StringMap [po_entrystatusPLTable] WITH(NOLOCK)\n\t\t\t\tON ([po_entrystatusPLTable].AttributeName = 'po_entrystat'\n\t\t\t\tAND [po_entrystatusPLTable].ObjectTypeCode = 10086\n\t\t\t\tAND [po_entrystatusPLTable].AttributeValue = a.po_EntryStat\n\t\t\t\tAND [po_entrystatusPLTable].LangId = 1033)\n\t\t\tinner JOIN (\n\t\t\t\tSelect \n\t\t\t\t\tICR2.po_RNLValue, max(ICR2.po_clientvalue) as po_clientvalue\n\t\t\t\tfrom \n\t\t\t\t\t[dbo].[po_institutioncrossreference] ICR2 WITH(NOLOCK) \n\t\t\t\twhere \n\t\t\t\t\tICR2.po_type = 936710020 \n\t\t\t\t\tAND ICR2.Statuscode = 1 \n\t\t\t\t\tAND ICR2.po_AccountIdName = 'Ruffalo Noel Levitz'\n\t\t\t\tGroup by ICR2.po_RNLValue\n\t\t\t\t) ICR2 ON ICR2.po_RNLValue = po_entrystatusPLTable.Value \n\t\t\twhere \n\t\t\t\t/*c.ParentCustomerIdName = @ClientName and */\n\t\t\t\tC.statuscode=1\n\t\t\t\tAND C.po_contacttype IN (936710000)\n\t\t\t\tand ICR2.po_RNLValue in ('Freshman','Transfer')\n\t\t\t\tand ET.po_Code in ('22 Fall','23 Fall','24 Fall','25 Fall','22 Summer','23 Summer','24 Summer','25 Summer','22 Spring','23 Spring','24 Spring','25 Spring')\t\n\t\t\t\n\t\t\n\t) sub \n\twhere sub.rn=1\n\tand CurrentStatus is not null\n\n/*\n\tSelect count(*) From #StudentList\n\tselect top 5000 * from #StudentList\n*/\n\n\n/* School attendence */\n\tSELECT \n\t\tPO2.po_student \t\t\t    \n\t\t\t, Convert(decimal(10,2),PO2.po_GPA,2) AS po_GPA \t\t\t    \n\t\t\t, YEAR(PO2.po_YearofHighSchoolGraduation) AS po_YearofHighSchoolGraduation \t\t\t    \n\t\t\t, PO2.SIC \t\t\t    \n\t\t\t, PO2.Name    \n\t\tinto #StudentSchool\n\tFROM\n\t\t(  \n\t\tSELECT  \n\t\t\tSA.po_student,SA.po_GPA,SA.po_YearofHighSchoolGraduation,A.SIC,A.Name,   \n\t\t\tROW_NUMBER() OVER (PARTITION BY po_student ORDER BY SA.po_YearofHighSchoolGraduation DESC, SA.ModifiedOn DESC) AS rn       \n\t\tFROM \n\t\t\t[dbo].[po_schoolattendance] AS SA WITH (NOLOCK)     \n\t\t\tLEFT JOIN [dbo].[Accountbase] AS A WITH (NOLOCK)  \n\t\t\t\tON A.accountid = SA.po_accountid       \n\t\t\tinner join #StudentList c \n\t\t\t\ton c.po_contactid = sa.po_Student\n\t\tWHERE  \n\t\t\tSA.statuscode = 1\n\t\t) PO2  \n\tWHERE PO2.rn = 1    \n\n/*Get ID */\n\tSELECT \n\t\tm2.po_contactid, m2.po_lookupidName, m2.po_name\n\t\tinto #ClientIDs\n\tFROM \n\t(\n\t\tSELECT m.po_contactid, m.po_lookupidName, m.po_name, m.modifiedon, \n\t\tROW_NUMBER() OVER (PARTITION BY m.po_contactid ORDER BY m.modifiedon DESC) AS rn        \n\t\tFROM [dbo].[po_id] m WITH(NOLOCK)\n\t\t\tinner join #StudentList s on s.po_contactid = m.po_contactid\n\t\tWHERE po_lookupidName in ('Client ID')\n\t) m2 \n\tWHERE m2.rn = 1\n\n\nSELECT \n\t\n\tISNULL(po_contactnumber,'') AS id,\n\tc.ParentCustomerIdName [Account Name]   ,\n\tcs.po_zeemeeslugname zeemeeslugname, \n\tc.ParentCustomerId [AccountId],\n\tc.ContactId [ContactId],\n\tISNULL(C.FirstName,'') AS FirstName,\n\tISNULL(C.LastName,'') AS LastName,\n\tISNULL(C.EMailAddress1,'') AS EMail,\n\tISNULL(REPLACE(C.MobilePhone, '-',''),'') AS 'Cell Phone',\n\n\treplace(cast(REVERSE(PARSENAME(REPLACE(REVERSE(et.po_name), ' ', '.'), 2)) as nvarchar(50)),',','')\t[Entry Year]  ,  \n\t case when replace(cast(REVERSE(PARSENAME(REPLACE(REVERSE(et.po_name), ' ', '.'), 1)) as nvarchar(50)),',','') = 'Winter' then 'Spring'    \n\telse replace(cast(REVERSE(PARSENAME(REPLACE(REVERSE(et.po_name), ' ', '.'), 1)) as nvarchar(50)),',','') end as\t[Entry Term] ,\n\tisnull(ICR2.po_clientvalue,'')\t'Student Type',\n\tisnull(left(c.MiddleName,1),'') as 'Middle Initial',\n\tcase when c.DoNotBulkEMail = 1 then 'x' else '' end as 'Email Opt Out',\n\tISNULL(C.Address1_Line1,'') AS Address1,\n\tISNULL(C.Address1_City,'') AS City,\n\tISNULL(C.Address1_StateOrProvince,'') AS 'State/Province',\n\tISNULL(C.Address1_PostalCode,'') AS 'Zip Code',\n\tISNULL(C.Address1_Country,'') AS 'Country',\n\tISNULL(REPLACE(c.Telephone2, '-', ''),'') AS 'Home Phone'    \n\t, case when po_SMSallowPLTable.Value = '1' then ' ' else 'x' end AS 'SMS/Text Opt Out'    \n\t, FORMAT(cast(c.BirthDate as date), 'd','us') AS BirthDate  \n\t, '' as 'Race/Ethnicity'    \n\t, '' as 'First Gen Flag'    \n\t, ISNULL(left(GenderCodePLTable.Value,1),'') AS Gender    \n\t, FORMAT(cast(app.po_date_inq as date), 'd','us') as 'Date of Initial Contact'    \n\t, c.po_ClientSourceCode as 'Initial Source Code'    \n\t, '' as 'College Counselor Name/Code'    \n\t, '' as 'College Counselor Email'    \n\t, '' as 'Initial Visit Type'    \n\t, cs.CurrentStatus    \n\t, FORMAT(cast(app.po_campusvisitdate as date), 'd','us') as 'Initial Visit Date'    \n\t, FORMAT(cast(app.po_date_app as date), 'd','us') as 'Application Date'    \n\t, case when app.po_appcode= '936710000' and app.po_date_app is not null      then FORMAT(cast(app.po_date_app as date), 'd','us') \n\telse NULL end as 'Application Completed Date'    \n\t, FORMAT(cast(app.po_datewait as date), 'd','us') as 'Waitlisted Date'    \n\t, FORMAT(cast(app.po_datedeny as date), 'd','us') as 'Denied Date'    \n\t, FORMAT(cast(app.po_Date_Admin as date), 'd','us') as 'Accepted Date'    \n\t, FORMAT(cast(app.po_Date_con as date), 'd','us') as 'Commited Date'    \n\t, FORMAT(cast(app.po_date_canc as date), 'd','us') as 'Withdrawal Date'    \n\t, ISNULL(po.SIC,'') AS 'HS CEEB Code'  \n\t, ISNULL(po.Name,'') AS 'HS Name'\n\t, id.po_name   as ClientID\n\n--into dbo.tempsource\nFROM \n\t[dbo].[Contact] C WITH(NOLOCK)\n\tinner join #StudentList cs on cs.po_contactid = c.ContactId\n\tINNER JOIN [dbo].[po_applicationbase] App WITH(NOLOCK) \n\t\tON APP.po_applicationId = C.po_LatestResponse\n\t/*Entry Term from Lookup to get RNL code format*/\n\tLEFT JOIN [dbo].[po_lookup] ET WITH(NOLOCK)\n\t\tON ET.po_lookupId = app.po_lookupid\n\t\tAND ET.po_type = 936710004\n\t/*SMS String Table Code to Description*/\n\tLEFT JOIN [dbo].StringMap [po_SMSallowPLTable] WITH(NOLOCK)\n\t\tON ([po_SMSallowPLTable].AttributeName = 'po_smsallow'\n\t\tAND [po_SMSallowPLTable].ObjectTypeCode = 2\n\t\tAND [po_SMSallowPLTable].AttributeValue = C.[po_SMSallow]\n\t\tAND [po_SMSallowPLTable].LangId = 1033)\n\n\t/*Gender String Table Code to Description*/\n\tLEFT JOIN [dbo].StringMap [GenderCodePLTable] WITH(NOLOCK)\n\t\tON ([GenderCodePLTable].AttributeName = 'gendercode'\n\t\tAND [GenderCodePLTable].ObjectTypeCode = 2\n\t\tAND [GenderCodePLTable].AttributeValue = C.[GenderCode]\n\t\tAND [GenderCodePLTable].LangId = 1033)\n\t/*EntryStatus String Table*/\n\tLEFT JOIN [dbo].StringMap [po_entrystatusPLTable] WITH(NOLOCK)\n\t\tON ([po_entrystatusPLTable].AttributeName = 'po_entrystat'\n\t\tAND [po_entrystatusPLTable].ObjectTypeCode = 10086\n\t\tAND [po_entrystatusPLTable].AttributeValue = app.po_EntryStat\n\t\tAND [po_entrystatusPLTable].LangId = 1033)\n\t/*AdmitStatus String Table*/\n\tLEFT JOIN [dbo].StringMap [po_AdmitStatusPLTable] WITH(NOLOCK)\n\t\tON ([po_AdmitStatusPLTable].AttributeName = 'po_admitstatuscode'\n\t\tAND [po_AdmitStatusPLTable].ObjectTypeCode = 10086\n\t\tAND [po_AdmitStatusPLTable].AttributeValue = app.po_AdmitStatusCode\n\t\tAND [po_AdmitStatusPLTable].LangId = 1033)\n\t/*Student Type*/\n\tLEFT JOIN (\n\t\t\tSelect \n\t\t\t\tICR2.po_RNLValue, max(ICR2.po_clientvalue) as po_clientvalue\n\t\t\tfrom \n\t\t\t\t[dbo].[po_institutioncrossreference] ICR2 WITH(NOLOCK) \n\t\t\twhere \n\t\t\t\tICR2.po_type = 936710020 \n\t\t\t\tAND ICR2.Statuscode = 1 \n\t\t\t\tAND ICR2.po_AccountIdName = 'Ruffalo Noel Levitz'\n\t\t\tGroup by ICR2.po_RNLValue\n\t\t\t) ICR2 ON ICR2.po_RNLValue = po_entrystatusPLTable.Value \n\t/*Admit Status Code*/\n\tLEFT JOIN (\n\t\t\tSelect \n\t\t\t\tICR4.po_RNLValue, max(ICR4.po_clientvalue) as po_clientvalue\n\t\t\tfrom [dbo].[po_institutioncrossreference] ICR4 WITH(NOLOCK) \n\t\t\tWhere\n\t\t\t\tICR4.po_type = 936710010 \n\t\t\t\tAND ICR4.Statuscode = 1 \n\t\t\t\tAND ICR4.po_AccountIdName = 'Ruffalo Noel Levitz'\n\t\t\tGroup by ICR4.po_RNLValue\n\t\t) ICR4 ON ICR4.po_RNLValue =  po_AdmitStatusPLTable.Value \n\n\t/*Get only one High School*/\n\tLEFT JOIN \n\t\t#StudentSchool PO ON\tPO.po_student = C.contactid\n\tleft join #ClientIDs id on id.po_contactid = c.ContactId\n\twhere po_zeemeeslugname='@{variables('slugname')}'\noption(recompile, maxdop 8);",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "DelimitedTextSink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextWriteSettings",
                                    "quoteAllText": true,
                                    "fileExtension": ".txt"
                                }
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ds_pi_appboostCRM_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "crm_servername": {
                                        "value": "@pipeline().parameters.crm_servername",
                                        "type": "Expression"
                                    },
                                    "crm_dbname": {
                                        "value": "@pipeline().parameters.crm_dbname",
                                        "type": "Expression"
                                    },
                                    "crm_username": {
                                        "value": "@pipeline().parameters.crm_username",
                                        "type": "Expression"
                                    },
                                    "vaulturl": {
                                        "value": "@pipeline().parameters.vault_url",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ds_pi_sourcefile_zeemee",
                                "type": "DatasetReference",
                                "parameters": {
                                    "ContainerName": {
                                        "value": "@pipeline().parameters.containerName",
                                        "type": "Expression"
                                    },
                                    "FilePath": {
                                        "value": "partnerintegration/raw/outbound",
                                        "type": "Expression"
                                    },
                                    "Filename": {
                                        "value": "zeemee.csv",
                                        "type": "Expression"
                                    },
                                    "storageaccountname": {
                                        "value": "@pipeline().parameters.storageaccountname",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "slugname",
                        "description": "incoming slugname placeholder",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "slugname",
                            "value": {
                                "value": "@pipeline().parameters.inputslug",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "File Audit - adls to sftp started",
                        "description": "File Audit - adls to sftp started",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "zeemee_Raw to Outbound Segregated slugwise",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-file-processing-log",
                            "baseParameters": {
                                "audit_id": "904",
                                "adf_run_id": {
                                    "value": "@pipeline().parameters.ParentPipelineRunID",
                                    "type": "Expression"
                                },
                                "file_processing_stage": "zeemee sftp inbound copy started",
                                "status": "Started",
                                "row_count": "0",
                                "rejected_row": "0",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_sql_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_sql_db_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "File Audit - adls to sftp completed",
                        "description": "File Audit - adls to sftp completed",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "ForEach1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-file-processing-log",
                            "baseParameters": {
                                "audit_id": "905",
                                "adf_run_id": {
                                    "value": "@pipeline().parameters.ParentPipelineRunID",
                                    "type": "Expression"
                                },
                                "file_processing_stage": "zeemee sftp inbound copy completed",
                                "status": "Completed",
                                "row_count": "0",
                                "rejected_row": "0",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_sql_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_sql_db_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "File Audit - adls to sftp failed",
                        "description": "File Audit - adls to sftp failed",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "ForEach1",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-file-processing-log",
                            "baseParameters": {
                                "audit_id": "906",
                                "adf_run_id": {
                                    "value": "@pipeline().parameters.ParentPipelineRunID",
                                    "type": "Expression"
                                },
                                "file_processing_stage": "zeemee sftp inbound copy failed",
                                "status": "Failed",
                                "row_count": "0",
                                "rejected_row": "0",
                                "error_description": "zeemee sftp inbound copy failed",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_sql_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_sql_db_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "File Audit - crm to adls started",
                        "description": "File Audit - crm to adls started",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "If exists archive",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-file-processing-log",
                            "baseParameters": {
                                "audit_id": "904",
                                "adf_run_id": {
                                    "value": "@pipeline().parameters.ParentPipelineRunID",
                                    "type": "Expression"
                                },
                                "file_processing_stage": "zeemee adls outbound copy started",
                                "status": "Started",
                                "row_count": "0",
                                "rejected_row": "0",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_sql_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_sql_db_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "File Audit - crm to adls completed",
                        "description": "File Audit - crm to adls completed",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "Zeemee_SourceQuery_Data_Fetch",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-file-processing-log",
                            "baseParameters": {
                                "audit_id": "905",
                                "adf_run_id": {
                                    "value": "@pipeline().parameters.ParentPipelineRunID",
                                    "type": "Expression"
                                },
                                "file_processing_stage": "zeemee adls outbound copy completed",
                                "status": "Completed",
                                "row_count": "0",
                                "rejected_row": "0",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_sql_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_sql_db_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "File Audit - crm to adls failed",
                        "description": "File Audit - crm to adls failed",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "Zeemee_SourceQuery_Data_Fetch",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-file-processing-log",
                            "baseParameters": {
                                "audit_id": "906",
                                "adf_run_id": {
                                    "value": "@pipeline().parameters.ParentPipelineRunID",
                                    "type": "Expression"
                                },
                                "file_processing_stage": "zeemee adls outbound copy failed",
                                "status": "Failed",
                                "row_count": "0",
                                "rejected_row": "0",
                                "error_description": "zeemee adls outbound copy failed",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_sql_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_sql_db_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Folder exists or not for archive",
                        "description": "checking folder exists or not in outbound folder",
                        "type": "GetMetadata",
                        "dependsOn": [
                            {
                                "activity": "slugname",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "ds_pi_adls",
                                "type": "DatasetReference",
                                "parameters": {
                                    "ContainerName": {
                                        "value": "@pipeline().parameters.containerName",
                                        "type": "Expression"
                                    },
                                    "folderName": "partnerintegration/zeemee/outbound",
                                    "storageaccountname": {
                                        "value": "@pipeline().parameters.storageaccountname",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "fieldList": [
                                "exists"
                            ],
                            "storeSettings": {
                                "type": "AzureBlobFSReadSettings",
                                "recursive": true,
                                "enablePartitionDiscovery": false
                            },
                            "formatSettings": {
                                "type": "DelimitedTextReadSettings"
                            }
                        }
                    },
                    {
                        "name": "If exists archive",
                        "description": "If folder present then archiving it.",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Folder exists or not for archive",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(activity('Folder exists or not for archive').output.exists,true)",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Archive",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "DelimitedTextSource",
                                            "storeSettings": {
                                                "type": "AzureBlobFSReadSettings",
                                                "recursive": true,
                                                "wildcardFolderPath": "partnerintegration/zeemee/outbound",
                                                "wildcardFileName": "*",
                                                "enablePartitionDiscovery": false
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextReadSettings"
                                            }
                                        },
                                        "sink": {
                                            "type": "DelimitedTextSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextWriteSettings",
                                                "quoteAllText": true,
                                                "fileExtension": ".txt"
                                            }
                                        },
                                        "enableStaging": false
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "ds_pi_adls",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "ContainerName": {
                                                    "value": "@pipeline().parameters.containerName",
                                                    "type": "Expression"
                                                },
                                                "folderName": "partnerintegration/zeemee/outbound",
                                                "storageaccountname": {
                                                    "value": "@pipeline().parameters.storageaccountname",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "ds_pi_adls",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "ContainerName": {
                                                    "value": "@pipeline().parameters.containerName",
                                                    "type": "Expression"
                                                },
                                                "folderName": {
                                                    "value": "@concat('partnerintegration','/','zeemee','/','archive','/','outbound','/',formatDateTime(pipeline().parameters.windowStart,'yyyy'),formatDateTime(pipeline().parameters.windowStart,'MM'),formatDateTime(pipeline().parameters.windowStart,'dd'))",
                                                    "type": "Expression"
                                                },
                                                "storageaccountname": {
                                                    "value": "@pipeline().parameters.storageaccountname",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "Delete Processed files after Archival",
                                    "type": "Delete",
                                    "dependsOn": [
                                        {
                                            "activity": "Archive",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "ds_pi_adls",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "ContainerName": {
                                                    "value": "@pipeline().parameters.containerName",
                                                    "type": "Expression"
                                                },
                                                "folderName": {
                                                    "value": "partnerintegration/zeemee/outbound/",
                                                    "type": "Expression"
                                                },
                                                "storageaccountname": {
                                                    "value": "@pipeline().parameters.storageaccountname",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "enableLogging": false,
                                        "storeSettings": {
                                            "type": "AzureBlobFSReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "RNLtoZeemee_Staging",
                        "description": "dumping data into zeemee staging table\netl.RNLtoZeemee_Staging",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "File Audit - crm to adls completed",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": "truncate table [etl].[RNLtoZeemee_Staging]",
                                "writeBehavior": "Insert",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "AccountId",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "AccountId",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Account Name",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Account Name",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "zeemeeslugname",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Slug Name",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "FirstName",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "First Name",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "LastName",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Last Name",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "EMail",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Email",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Cell Phone",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Cell Phone",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "id",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "ID Number",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Entry Year",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Entry Year",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Entry Term",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Entry Term",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Student Type",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Student Type",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Middle Initial",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Middle Initial",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Email Opt Out",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Email Opt Out",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Address1",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Address1",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "City",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "City",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "State/Province",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "State/Province",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Zip Code",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Zip Code",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Country",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Country",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Home Phone",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Home Phone",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "SMS/Text Opt Out",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "SMS/Text Opt Out",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "CurrentStatus",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Current Status",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "BirthDate",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Date of Birth",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Race/Ethnicity",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Race/Ethnicity",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "First Gen Flag",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "First Gen Flag",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Gender",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Gender",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Date of Initial Contact",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Date of Initial Contact",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Initial Source Code",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Initial Source Code",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "College Counselor Name/Code",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "College Counselor Name/Code",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "College Counselor Email",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "College Counselor Email",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Initial Visit Type",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Initial Visit Type",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Initial Visit Date",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Initial Visit Date",
                                            "type": "DateTime"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Application Date",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Application Date",
                                            "type": "DateTime"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Application Completed Date",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Application Completed Date",
                                            "type": "DateTime"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Waitlisted Date",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Waitlisted Date",
                                            "type": "DateTime"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Denied Date",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Denied Date",
                                            "type": "DateTime"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Accepted Date",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Accepted Date",
                                            "type": "DateTime"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Commited Date",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Committed Date",
                                            "type": "DateTime"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Withdrawal Date",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Withdrawal Date",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "HS CEEB Code",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "HS CEEB Code",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "HS Name",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "HS Name",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ClientID",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "ClientID",
                                            "type": "String"
                                        }
                                    }
                                ]
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ds_pi_sourcefile_zeemee",
                                "type": "DatasetReference",
                                "parameters": {
                                    "ContainerName": {
                                        "value": "@pipeline().parameters.containerName",
                                        "type": "Expression"
                                    },
                                    "FilePath": "partnerintegration/raw/outbound",
                                    "Filename": {
                                        "value": "zeemee.csv",
                                        "type": "Expression"
                                    },
                                    "storageaccountname": {
                                        "value": "@pipeline().parameters.storageaccountname",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ds_pi_synapse",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "RNLtoZeemee_Staging",
                                    "schemaname": "etl",
                                    "az_synapse_em_server": {
                                        "value": "@pipeline().parameters.az_synapse_em_server",
                                        "type": "Expression"
                                    },
                                    "az_synapse_db": {
                                        "value": "@pipeline().parameters.az_synapse_db",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "Email - Filecopy failed adls to sftp",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "ForEach1",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@pipeline().parameters.FailureEmailURL",
                                "type": "Expression"
                            },
                            "connectVia": {
                                "referenceName": "AutoResolveIntegrationRuntime",
                                "type": "IntegrationRuntimeReference"
                            },
                            "method": "POST",
                            "headers": {
                                "Content-Type": "application/json"
                            },
                            "body": {
                                "value": "{\n\"DataFactoryName\": \"@{pipeline().DataFactory}\",\n\"EmailTo\": \"Bhushan.Ahire@ruffalonl.com\",\n\"ErrorMessage\": \"Filecopy failed adls to sftp\",\n\"PipelineName\": \"@{pipeline().Pipeline}\",\n\"Subject\": \"An error has occurred!\",\n\"ActivityName\": \"Email - Filecopy failed adls to sftp\"\n}",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Email - adls to sftp successful",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "ForEach1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@pipeline().parameters.SuccessEmailURL",
                                "type": "Expression"
                            },
                            "connectVia": {
                                "referenceName": "AutoResolveIntegrationRuntime",
                                "type": "IntegrationRuntimeReference"
                            },
                            "method": "POST",
                            "headers": {
                                "Content-Type": "application/json"
                            },
                            "body": {
                                "value": "{\n\"DataFactoryName\": \"@{pipeline().DataFactory}\",\n\"EmailTo\": \"Bhushan.Ahire@ruffalonl.com\",\n\"PipelineName\": \"@{pipeline().Pipeline}\",\n\"Subject\": \"File copied to adls to sftp Successful!\"\n}",
                                "type": "Expression"
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "windowStart": {
                        "type": "string"
                    },
                    "inputslug": {
                        "type": "string"
                    },
                    "ParentPipelineName": {
                        "type": "string"
                    },
                    "ParentPipelineRunID": {
                        "type": "string"
                    },
                    "ParentTriggerName": {
                        "type": "string"
                    },
                    "databricks_workspace_url": {
                        "type": "string"
                    },
                    "databricks_clusterid": {
                        "type": "string"
                    },
                    "crm_servername": {
                        "type": "string"
                    },
                    "crm_dbname": {
                        "type": "string"
                    },
                    "crm_username": {
                        "type": "string"
                    },
                    "az_sql_server_name": {
                        "type": "string"
                    },
                    "az_sql_db_name": {
                        "type": "string"
                    },
                    "vault_url": {
                        "type": "string"
                    },
                    "az_synapse_em_server": {
                        "type": "string"
                    },
                    "az_synapse_db": {
                        "type": "string"
                    },
                    "storageaccountname": {
                        "type": "string"
                    },
                    "zeemee_host": {
                        "type": "string"
                    },
                    "zeemee_username": {
                        "type": "string"
                    },
                    "containerName": {
                        "type": "string"
                    },
                    "SuccessEmailURL": {
                        "type": "string"
                    },
                    "FailureEmailURL": {
                        "type": "string"
                    }
                },
                "variables": {
                    "childitem": {
                        "type": "String"
                    },
                    "name": {
                        "type": "String"
                    },
                    "nnp": {
                        "type": "String"
                    },
                    "slugname": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "partner-Integration"
                },
                "annotations": [],
                "lastPublishTime": "2022-11-16T07:47:03Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-campusesp-fw-default-flow')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "ForEach1",
                        "description": "Iterate over adls outbound CampusESP slugname folders",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "adls CampusESP outbound folder list",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('adls CampusESP outbound folder list').output.childItems",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "itemName",
                                    "description": "itemName from foreach ",
                                    "type": "SetVariable",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "nnp",
                                        "value": {
                                            "value": "@item().name",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Copy to SFTP Inbound",
                                    "description": "Copy files to SFTP inbound ",
                                    "type": "Copy",
                                    "dependsOn": [
                                        {
                                            "activity": "itemName",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.02:00:00",
                                        "retry": 5,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "DelimitedTextSource",
                                            "storeSettings": {
                                                "type": "AzureBlobFSReadSettings",
                                                "recursive": true,
                                                "wildcardFolderPath": {
                                                    "value": "@concat('partnerintegration','/','campusesp','/','outbound','/',variables('nnp'))",
                                                    "type": "Expression"
                                                },
                                                "wildcardFileName": {
                                                    "value": "@concat(variables('nnp'),'.csv')",
                                                    "type": "Expression"
                                                },
                                                "enablePartitionDiscovery": false
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextReadSettings"
                                            }
                                        },
                                        "sink": {
                                            "type": "DelimitedTextSink",
                                            "storeSettings": {
                                                "type": "SftpWriteSettings",
                                                "operationTimeout": "01:00:00",
                                                "useTempFileRename": true
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextWriteSettings",
                                                "quoteAllText": true,
                                                "fileExtension": ".csv"
                                            }
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "typeConversion": true,
                                            "typeConversionSettings": {
                                                "allowDataTruncation": true,
                                                "treatBooleanAsNumber": false
                                            }
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "ds_pi_adls",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "ContainerName": {
                                                    "value": "@pipeline().parameters.containerName",
                                                    "type": "Expression"
                                                },
                                                "folderName": {
                                                    "value": "partnerintegration/campusesp/outbound",
                                                    "type": "Expression"
                                                },
                                                "storageaccountname": {
                                                    "value": "@pipeline().parameters.storageaccountname",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "ds_pi_sftp_campusesp",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "folderName": {
                                                    "value": "@concat('incoming','/')",
                                                    "type": "Expression"
                                                },
                                                "campuse_esp_host": {
                                                    "value": "@pipeline().parameters.campuse_esp_host",
                                                    "type": "Expression"
                                                },
                                                "campus_esp_username": {
                                                    "value": "@variables('nnp')",
                                                    "type": "Expression"
                                                },
                                                "vaulturl": {
                                                    "value": "@pipeline().parameters.vault_url",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "Lookup to campusesp staging",
                                    "description": "Lookup to zeemee staging table",
                                    "type": "Lookup",
                                    "dependsOn": [
                                        {
                                            "activity": "Copy to SFTP Inbound",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "SqlDWSource",
                                            "sqlReaderQuery": {
                                                "value": "select [Account Name] as university_name,count(*) as TotalRecordCount,count([Student Email]) as studentcount, count([Parent Email]) as parentcount from \n[etl].[RNLtoCampusESP_Staging] where [SlugName]= '@{variables('nnp')}'\ngroup by [Account Name]",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "ds_pi_synapse",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "tablename": {
                                                    "value": "RNLtoCampusESP_Staging",
                                                    "type": "Expression"
                                                },
                                                "schemaname": {
                                                    "value": "etl",
                                                    "type": "Expression"
                                                },
                                                "az_synapse_em_server": {
                                                    "value": "@pipeline().parameters.az_synapse_em_server",
                                                    "type": "Expression"
                                                },
                                                "az_synapse_db": {
                                                    "value": "@pipeline().parameters.az_synapse_db",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "firstRowOnly": true
                                    }
                                },
                                {
                                    "name": "campusesp partner data profiling",
                                    "description": "data profiling audit",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "Lookup to campusesp staging",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[etl].[insert_rows_partner]",
                                        "storedProcedureParameters": {
                                            "parent_count": {
                                                "value": {
                                                    "value": "@activity('Lookup to campusesp staging').output.firstRow['parentcount']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "row_count": {
                                                "value": {
                                                    "value": "@activity('Lookup to campusesp staging').output.firstRow['TotalRecordCount']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "student_count": {
                                                "value": {
                                                    "value": "@activity('Lookup to campusesp staging').output.firstRow['studentcount']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "university_name": {
                                                "value": {
                                                    "value": "@activity('Lookup to campusesp staging').output.firstRow['university_name']",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "partner_name": {
                                                "value": "campusesp",
                                                "type": "String"
                                            },
                                            "flow_type": {
                                                "value": "forward",
                                                "type": "String"
                                            },
                                            "university_file_name": {
                                                "value": {
                                                    "value": "@concat(variables('nnp'),'.csv')",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "adf_run_id": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ParentPipelineRunID",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "org": {
                                                "value": {
                                                    "value": "@variables('nnp')",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_AzureSqlDB",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_sql_server_name",
                                                "type": "Expression"
                                            },
                                            "az_sql_db": {
                                                "value": "@pipeline().parameters.az_sql_db_name",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "Email",
                                    "type": "WebActivity",
                                    "dependsOn": [
                                        {
                                            "activity": "Copy to SFTP Inbound",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "url": {
                                            "value": "@pipeline().parameters.FailureEmailURL",
                                            "type": "Expression"
                                        },
                                        "connectVia": {
                                            "referenceName": "AutoResolveIntegrationRuntime",
                                            "type": "IntegrationRuntimeReference"
                                        },
                                        "method": "POST",
                                        "headers": {
                                            "Content-Type": "application/json"
                                        },
                                        "body": {
                                            "value": "{\n\"DataFactoryName\": \"@{pipeline().DataFactory}\",\n\"EmailTo\": \"Rushikesh.Shirgoankar@ruffalonl.com\",\n\"ErrorMessage\": \"\nHi CampusESP Team -\nSlugname-@{variables('nnp')}\nWarning-A public key corresponding to the supplied private key was not \naccepted by the server or the user name is incorrect. \n(Status: OperationFailure, Code: UnknownError). \nPlease whitelist the above mention Account from your side.\nRegrads-\nRNL Team\n\",\n\"PipelineName\": \"@{pipeline().Pipeline}\",\n\"Subject\": \"Unable to login\",\n\"ActivityName\": \"Email - Login failed to @{variables('nnp')} sftp\"\n}",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "adls CampusESP outbound folder list",
                        "description": "adls campusesp outbound folder list",
                        "type": "GetMetadata",
                        "dependsOn": [
                            {
                                "activity": "File Audit - adls to sftp started",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "ds_pi_adls",
                                "type": "DatasetReference",
                                "parameters": {
                                    "ContainerName": {
                                        "value": "@pipeline().parameters.containerName",
                                        "type": "Expression"
                                    },
                                    "folderName": {
                                        "value": "partnerintegration/campusesp/outbound",
                                        "type": "Expression"
                                    },
                                    "storageaccountname": {
                                        "value": "@pipeline().parameters.storageaccountname",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "fieldList": [
                                "childItems"
                            ],
                            "storeSettings": {
                                "type": "AzureBlobFSReadSettings",
                                "recursive": true,
                                "enablePartitionDiscovery": false
                            },
                            "formatSettings": {
                                "type": "DelimitedTextReadSettings"
                            }
                        }
                    },
                    {
                        "name": "CampusESP_SourceQuery_Data_Fetch",
                        "description": "Using campusesp source query data is fetching from crm and dumping it into raw folder of partnerintegration in adls",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "File Audit - crm to adls started",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "02:00:00",
                            "retry": 3,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlServerSource",
                                "sqlReaderQuery": {
                                    "value": "with cte_AccountinCampaign as \n(select distinct acb.accountId,acb.[Name],acb.po_campusespslugname from \n[dbo].[AccountBase] acb WITH(NOLOCK) where acb.po_campusespslugname is not null),\n\n\nCTE_stg AS (\nselect po_contactid,cast (\n    case\n        when (po_flag_enr = 1 or po_Date_Enr is not null) then 'Enrolled'\n        when (po_flag_con = 1 or po_Date_con is not null) then\n            case\n                when (po_flag_can = 1 or po_Date_Canc is not null) then 'Deposited Withdrawn'\n                Else 'Deposited'\n            End\n\twhen (icr.po_RNLCode= 'D') then 'Application Denied'\n        when (po_flag_admit = 1 or po_Date_Admin is not null) then\n            case\n                when (po_flag_can = 1 or po_Date_Canc is not null)  then 'Admitted Withdrawn'\n                Else 'Admitted'\n            End\n        when (po_flag_app= 1 or po_Date_App is not null) then\n            case\n                when (icr.po_RNLCode= 'D' and po_appcode= '936710000' ) then\n                    case\n                        when (po_flag_can = 1 or po_Date_Canc is not null) then 'Application Complete Withdrawn'\n                        Else 'Application Complete Denied'\n                    End\n                when (icr.po_RNLCode = 'D' and po_appcode= '936710001') then\n                    case\n                        when (po_flag_can = 1 or po_Date_Canc is not null) then 'Application Started Withdrawn'\n                        Else 'Application Started Denied'\n                    End\n                when (po_appcode= '936710000')  then 'Application Complete'\n                when (po_appcode= '936710001') then 'Application Started'\n\t\t\t\twhen (po_flag_can = 1 or po_Date_Canc is not null) then 'Application Cancelled'\n\t\t\t\twhen (icr.po_RNLCode= 'D') then 'Application Denied'\n\t\t\t\tElse 'Applied'\n            End\n        when (po_flag_inq = 1 or po_Date_Inq is not null) then\n            case\n                when (po_flag_can = 1 or po_Date_Canc is not null) then 'Prospect/Inquiry Cancelled'\n                Else 'Prospect/Inquiry'\n            End\n\t\twhen (po_flag_pro = 1 or  po_Date_Pro is not null) then\n            case\n                when (po_flag_can = 1 or po_Date_Canc is not null) then 'Lead Cancelled'\n                Else 'Lead'\n\t    End\n    End as nvarchar(50)) as CurrentStatus\n       from dbo.po_applicationBase ab WITH(NOLOCK)\n    inner join dbo.contactbase cb WITH(NOLOCK) on ab.po_applicationId = Cb.po_LatestResponse\n\tLEFT JOIN StringMap [po_AdmitStatusPLTable] WITH(NOLOCK)\n\t\tON ([po_AdmitStatusPLTable].AttributeName = 'po_admitstatuscode'\n\t\tAND [po_AdmitStatusPLTable].ObjectTypeCode = 10086\n\t\tAND [po_AdmitStatusPLTable].AttributeValue = ab.po_AdmitStatusCode\n\t\tAND [po_AdmitStatusPLTable].LangId = 1033)\n\tLEFT JOIN [po_institutioncrossreference] ICR WITH(NOLOCK) ON ICR.po_RNLValue =  po_AdmitStatusPLTable.Value and  ICR.po_type = 936710010 AND ICR.Statuscode = 1 AND ICR.po_AccountIdName = 'Ruffalo Noel Levitz'\n\t where po_contactid is not null)\n\n\nselect distinct \n\nstg.CurrentStatus,\n\nacb.[Name] [Account Name],\nacb.AccountId [AccountId],\nac_cmp.po_campusespslugname\t[CampusESPSlugName],  \nc.ContactId [ParentContactId],\ncb.ContactId [StudentContactId] ,\nc.firstname [First Name],\nc.lastname [Last Name], \ncb.FirstName [Student First Name],\ncb.LastName [Student Last Name], \ncb.EMailAddress1 [Student Email],\nc.emailaddress1 [Email],  \nc.po_contacttype [Contact Type], \nc.Telephone2 [Phone],\n cb.po_Contactnumber [Student ID Number],  \n c.po_Contactnumber [Parent ID Number] , \n cast(REVERSE(PARSENAME(REPLACE(REVERSE(lb.po_name), ' ', '.'), 2)) as nvarchar(100)) [Entry Year] ,\n cast(REVERSE(PARSENAME(REPLACE(REVERSE(lb.po_name), ' ', '.'), 1)) as nvarchar(100)) [Entry Term],\n es.Code [Entry Stat],\n replace(cast(CONCAT(cab.line1,isnull(' '+cab.line2,null),isnull(' '+cab.line3,null)) as nvarchar(50)),',','') [Address1],  \n replace(cast(cab.city as nvarchar(50)),',','') [City],\n replace(cast(cab.Stateorprovince as nvarchar(50)),',','') [State/Province] , \n replace(cast(cab.postalcode as nvarchar(50)),',','') [Zip Code], \n replace(cast(cab.country as nvarchar(50)),',','') [Country] ,\n case when isnull(ab.po_flag_international,'')= 1 then 'Y' else '' end as 'Flag_International',\n cb.CreatedOn from   \n (SELECT contactid ,createdon ,po_Contactnumber ,po_LatestResponse ,cb.Telephone2 ,\n po_contacttype ,ParentCustomerId ,ParentCustomerIdName ,FirstName ,LastName ,\n EMailAddress1 , CONVERT(VARCHAR(10),BirthDate, 101) as 'Birthdate' , \n ROW_NUMBER() OVER (PARTITION BY concat(ParentCustomerIdName,EMailAddress1) order by createdon asc) AS rn \n FROM [dbo].[contactbase] cb WITH(NOLOCK) where cb.po_contacttype= 936710000 ) CB \n left join [dbo].[customeraddressbase] cab WITH(NOLOCK) on cab.parentid=cb.ContactId  \n inner join (SELECT cb1.ParentCustomerId ,cb1.ContactId  ,\n cb1.po_Contactnumber ,cb1.ParentCustomerIdName ,cb1.FirstName ,\n cb1.LastName ,cb1.EMailAddress1 ,cb1.po_contacttype ,cb1.Telephone2 ,  \n ROW_NUMBER() OVER (PARTITION BY concat(cb1.ParentCustomerId,cb1.FirstName ,\n cb1.LastName,cb1.EMailAddress1) order by cb1.createdon asc) AS rn FROM \n [dbo].[contactbase] Cb1 WITH(NOLOCK) where cb1.po_contacttype=936710001 and cb1.EMailAddress1 is not null )  As c \n on cb.ContactId=c.ParentCustomerId  AND c.rn = 1 left join [dbo].[AccountBase] acb WITH(NOLOCK) on\n  acb.AccountId=cb.ParentCustomerId inner Join cte_AccountinCampaign ac_cmp WITH(NOLOCK) \n on ac_cmp.accountId=cb.parentcustomerid \n \n inner join CTE_stg stg WITH(NOLOCK)\n on stg.po_contactid=cb.ContactId\n \n\n left join [dbo].[po_applicationBase] ab WITH(NOLOCK)\n on ab.po_applicationId = cb.po_LatestResponse  left join [dbo].[po_lookupBase] lb WITH(NOLOCK) \n on lb.po_lookupid=ab.po_lookupid  left join (SELECT AttributeValue as Value,s.Value as 'Code' FROM dbo.StringMapbase s WITH(NOLOCK) \n JOIN dbo.EntityLogicalView e on s.ObjectTypeCode = e.ObjectTypeCode \n WHERE AttributeName = 'po_entrystat' AND e.Name = 'po_application')  es \n on es.Value= ab.po_EntryStat WHERE cb.rn=1  and cab.AddressNumber=1  \n and lb.po_code in ('22 Fall','23 Fall','24 Fall','25 Fall','22 Summer',\n '23 Summer','24 Summer','25 Summer','22 Spring','23 Spring','24 Spring','25 Spring')",
                                    "type": "Expression"
                                },
                                "queryTimeout": "03:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "DelimitedTextSink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextWriteSettings",
                                    "quoteAllText": true,
                                    "fileExtension": ".txt"
                                }
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "CurrentStatus",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "CurrentStatus",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Account Name",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "Account Name",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "AccountId",
                                            "type": "Guid",
                                            "physicalType": "uniqueidentifier"
                                        },
                                        "sink": {
                                            "name": "AccountId",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "CampusESPSlugName",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "CampusESPSlugName",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ParentContactId",
                                            "type": "Guid",
                                            "physicalType": "uniqueidentifier"
                                        },
                                        "sink": {
                                            "name": "ParentContactId",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "StudentContactId",
                                            "type": "Guid",
                                            "physicalType": "uniqueidentifier"
                                        },
                                        "sink": {
                                            "name": "StudentContactId",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "First Name",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "First Name",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Last Name",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "Last Name",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Student First Name",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "Student First Name",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Student Last Name",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "Student Last Name",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Student Email",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "Student Email",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Email",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "Email",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Contact Type",
                                            "type": "Int32",
                                            "physicalType": "int"
                                        },
                                        "sink": {
                                            "name": "Contact Type",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Phone",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "Phone",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Student ID Number",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "Student ID Number",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Parent ID Number",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "Parent ID Number",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Entry Year",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "Entry Year",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Entry Term",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "Entry Term",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Entry Stat",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "Entry Stat",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Address1",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "Address1",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "City",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "City",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "State/Province",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "State/Province",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Zip Code",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "Zip Code",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Country",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "Country",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Flag_International",
                                            "type": "String",
                                            "physicalType": "varchar"
                                        },
                                        "sink": {
                                            "name": "Flag_International",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "CreatedOn",
                                            "type": "DateTime",
                                            "physicalType": "datetime"
                                        },
                                        "sink": {
                                            "name": "CreatedOn",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ds_pi_appboostCRM_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "crm_servername": {
                                        "value": "@pipeline().parameters.crm_servername",
                                        "type": "Expression"
                                    },
                                    "crm_dbname": {
                                        "value": "@pipeline().parameters.crm_dbname",
                                        "type": "Expression"
                                    },
                                    "crm_username": {
                                        "value": "@pipeline().parameters.crm_username",
                                        "type": "Expression"
                                    },
                                    "vaulturl": {
                                        "value": "@pipeline().parameters.vault_url",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ds_pi_sourcefile_campusesp",
                                "type": "DatasetReference",
                                "parameters": {
                                    "ContainerName": {
                                        "value": "@pipeline().parameters.containerName",
                                        "type": "Expression"
                                    },
                                    "FilePath": {
                                        "value": "partnerintegration/raw/outbound",
                                        "type": "Expression"
                                    },
                                    "Filename": {
                                        "value": "campusesp.csv",
                                        "type": "Expression"
                                    },
                                    "storageaccountname": {
                                        "value": "@pipeline().parameters.storageaccountname",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "CampusESP_Raw to Outbound Segregated slugwise",
                        "description": "segregating data into adls outbound folder slugwise",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [
                            {
                                "activity": "RNLtoCampusESP_Staging",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "1.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "df_campusesp_segregated_slugwise",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "source": {
                                        "tablename": "RNLtoCampusESP_Staging",
                                        "schemaname": "etl",
                                        "az_synapse_em_server": {
                                            "value": "@pipeline().parameters.az_synapse_em_server",
                                            "type": "Expression"
                                        },
                                        "az_synapse_db": {
                                            "value": "@pipeline().parameters.az_synapse_db",
                                            "type": "Expression"
                                        }
                                    },
                                    "sink": {
                                        "ContainerName": {
                                            "value": "@pipeline().parameters.containerName",
                                            "type": "Expression"
                                        },
                                        "folderName": "partnerintegration/campusesp/outbound/",
                                        "storageaccountname": {
                                            "value": "@pipeline().parameters.storageaccountname",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    },
                    {
                        "name": "File Audit - adls to sftp started",
                        "description": "File Audit - adls to sftp started",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "CampusESP_Raw to Outbound Segregated slugwise",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-file-processing-log",
                            "baseParameters": {
                                "audit_id": "910",
                                "adf_run_id": {
                                    "value": "@pipeline().parameters.ParentPipelineRunID",
                                    "type": "Expression"
                                },
                                "file_processing_stage": "campusesp sftp inbound copy started",
                                "status": "Started",
                                "row_count": "0",
                                "rejected_row": "0",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_sql_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_sql_db_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "File Audit - adls to sftp completed",
                        "description": "File Audit - adls to sftp completed",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "ForEach1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-file-processing-log",
                            "baseParameters": {
                                "audit_id": "911",
                                "adf_run_id": {
                                    "value": "@pipeline().parameters.ParentPipelineRunID",
                                    "type": "Expression"
                                },
                                "file_processing_stage": "campusesp sftp inbound copy completed",
                                "status": "Completed",
                                "row_count": "0",
                                "rejected_row": "0",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_sql_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_sql_db_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "File Audit - adls to sftp failed",
                        "description": "File Audit - adls to sftp failed",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "ForEach1",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-file-processing-log",
                            "baseParameters": {
                                "audit_id": "912",
                                "adf_run_id": {
                                    "value": "@pipeline().parameters.ParentPipelineRunID",
                                    "type": "Expression"
                                },
                                "file_processing_stage": "campusesp sftp inbound copy failed",
                                "status": "Failed",
                                "row_count": "0",
                                "rejected_row": "0",
                                "error_description": "campusesp sftp inbound copy failed",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_sql_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_sql_db_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "File Audit - crm to adls completed",
                        "description": "File Audit - crm to adls completed",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "CampusESP_SourceQuery_Data_Fetch",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-file-processing-log",
                            "baseParameters": {
                                "audit_id": "911",
                                "adf_run_id": {
                                    "value": "@pipeline().parameters.ParentPipelineRunID",
                                    "type": "Expression"
                                },
                                "file_processing_stage": "campusesp adls outbound copy completed",
                                "status": "Completed",
                                "row_count": "0",
                                "rejected_row": "0",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_sql_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_sql_db_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "File Audit - crm to adls failed",
                        "description": "File Audit - crm to adls failed",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "CampusESP_SourceQuery_Data_Fetch",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-file-processing-log",
                            "baseParameters": {
                                "audit_id": "912",
                                "adf_run_id": {
                                    "value": "@pipeline().parameters.ParentPipelineRunID",
                                    "type": "Expression"
                                },
                                "file_processing_stage": "campusesp adls outbound copy failed",
                                "status": "Failed",
                                "row_count": "0",
                                "rejected_row": "0",
                                "error_description": "campusesp adls outbound copy failed",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_sql_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_sql_db_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Folder exists or not for archive",
                        "description": "checking folder exists or not in outbound folder",
                        "type": "GetMetadata",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "ds_pi_adls",
                                "type": "DatasetReference",
                                "parameters": {
                                    "ContainerName": {
                                        "value": "@pipeline().parameters.containerName",
                                        "type": "Expression"
                                    },
                                    "folderName": {
                                        "value": "partnerintegration/campusesp/outbound",
                                        "type": "Expression"
                                    },
                                    "storageaccountname": {
                                        "value": "@pipeline().parameters.storageaccountname",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "fieldList": [
                                "exists"
                            ],
                            "storeSettings": {
                                "type": "AzureBlobFSReadSettings",
                                "recursive": true,
                                "enablePartitionDiscovery": false
                            },
                            "formatSettings": {
                                "type": "DelimitedTextReadSettings"
                            }
                        }
                    },
                    {
                        "name": "If exists archive",
                        "description": "If folder present then archiving it.",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Folder exists or not for archive",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(activity('Folder exists or not for archive').output.exists,true)",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Archive",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "DelimitedTextSource",
                                            "storeSettings": {
                                                "type": "AzureBlobFSReadSettings",
                                                "recursive": true,
                                                "wildcardFolderPath": "partnerintegration/campusesp/outbound",
                                                "wildcardFileName": "*",
                                                "enablePartitionDiscovery": false
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextReadSettings"
                                            }
                                        },
                                        "sink": {
                                            "type": "DelimitedTextSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextWriteSettings",
                                                "quoteAllText": true,
                                                "fileExtension": ".txt"
                                            }
                                        },
                                        "enableStaging": false
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "ds_pi_adls",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "ContainerName": {
                                                    "value": "@pipeline().parameters.containerName",
                                                    "type": "Expression"
                                                },
                                                "folderName": {
                                                    "value": "partnerintegration/campusesp/outbound",
                                                    "type": "Expression"
                                                },
                                                "storageaccountname": {
                                                    "value": "@pipeline().parameters.storageaccountname",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "ds_pi_adls",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "ContainerName": {
                                                    "value": "@pipeline().parameters.containerName",
                                                    "type": "Expression"
                                                },
                                                "folderName": {
                                                    "value": "@concat('partnerintegration','/','campusesp','/','archive','/','outbound','/',formatDateTime(pipeline().parameters.windowStart,'yyyy'),formatDateTime(pipeline().parameters.windowStart,'MM'),formatDateTime(pipeline().parameters.windowStart,'dd'))",
                                                    "type": "Expression"
                                                },
                                                "storageaccountname": {
                                                    "value": "@pipeline().parameters.storageaccountname",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "Delete Processed files after Archival",
                                    "type": "Delete",
                                    "dependsOn": [
                                        {
                                            "activity": "Archive",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "ds_pi_adls",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "ContainerName": {
                                                    "value": "@pipeline().parameters.containerName",
                                                    "type": "Expression"
                                                },
                                                "folderName": {
                                                    "value": "partnerintegration/campusesp/outbound/",
                                                    "type": "Expression"
                                                },
                                                "storageaccountname": {
                                                    "value": "@pipeline().parameters.storageaccountname",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "enableLogging": false,
                                        "storeSettings": {
                                            "type": "AzureBlobFSReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "File Audit - crm to adls started",
                        "description": "File Audit - crm to adls started",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "If exists archive",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-file-processing-log",
                            "baseParameters": {
                                "audit_id": "910",
                                "adf_run_id": {
                                    "value": "@pipeline().parameters.ParentPipelineRunID",
                                    "type": "Expression"
                                },
                                "file_processing_stage": "campusesp adls outbound copy started",
                                "status": "Started",
                                "row_count": "0",
                                "rejected_row": "0",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_sql_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_sql_db_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "RNLtoCampusESP_Staging",
                        "description": "dumping data into campusesp staging table\netl.RNLtoCampusESP_Staging",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "File Audit - crm to adls completed",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": "Truncate Table [etl].[RNLtoCampusESP_Staging]",
                                "writeBehavior": "Insert",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "Account Name",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Account Name",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "CampusESPSlugName",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "SlugName",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "AccountId",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Account ID",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Parent ID Number",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Parent ID Number",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "First Name",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Parent First Name",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Last Name",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Parent Last Name",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Email",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Parent Email",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Student ID Number",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Student ID Number",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Student First Name",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Student First Name",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Student Last Name",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Student Last Name",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Student Email",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Student Email",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Address1",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Address1",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "City",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "City",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "State/Province",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "State/Province",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Zip Code",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Zip Code",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Country",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Country",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Phone",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Phone",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Entry Term",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Entry Term",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Entry Year",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Entry Year",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Entry Stat",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Student Type",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "CurrentStatus",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Stage",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Flag_International",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Flag_International",
                                            "type": "String"
                                        }
                                    }
                                ]
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ds_pi_sourcefile_campusesp",
                                "type": "DatasetReference",
                                "parameters": {
                                    "ContainerName": {
                                        "value": "@pipeline().parameters.containerName",
                                        "type": "Expression"
                                    },
                                    "FilePath": {
                                        "value": "partnerintegration/raw/outbound",
                                        "type": "Expression"
                                    },
                                    "Filename": {
                                        "value": "campusesp.csv",
                                        "type": "Expression"
                                    },
                                    "storageaccountname": {
                                        "value": "@pipeline().parameters.storageaccountname",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ds_pi_synapse",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": {
                                        "value": "RNLtoCampusESP_Staging",
                                        "type": "Expression"
                                    },
                                    "schemaname": {
                                        "value": "etl",
                                        "type": "Expression"
                                    },
                                    "az_synapse_em_server": {
                                        "value": "@pipeline().parameters.az_synapse_em_server",
                                        "type": "Expression"
                                    },
                                    "az_synapse_db": {
                                        "value": "@pipeline().parameters.az_synapse_db",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "Email - adls to sftp successful",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "ForEach1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@pipeline().parameters.SuccessEmailURL",
                                "type": "Expression"
                            },
                            "connectVia": {
                                "referenceName": "AutoResolveIntegrationRuntime",
                                "type": "IntegrationRuntimeReference"
                            },
                            "method": "POST",
                            "headers": {
                                "Content-Type": "application/json"
                            },
                            "body": {
                                "value": "{\n\"DataFactoryName\": \"@{pipeline().DataFactory}\",\n\"EmailTo\": \"Bhushan.Ahire@ruffalonl.com\",\n\"PipelineName\": \"@{pipeline().Pipeline}\",\n\"Subject\": \"File copied to adls to sftp Successful!\"\n}",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Email - Filecopy failed adls to sftp",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "ForEach1",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@pipeline().parameters.FailureEmailURL",
                                "type": "Expression"
                            },
                            "connectVia": {
                                "referenceName": "AutoResolveIntegrationRuntime",
                                "type": "IntegrationRuntimeReference"
                            },
                            "method": "POST",
                            "headers": {
                                "Content-Type": "application/json"
                            },
                            "body": {
                                "value": "{\n\"DataFactoryName\": \"@{pipeline().DataFactory}\",\n\"EmailTo\": \"Bhushan.Ahire@ruffalonl.com\",\n\"ErrorMessage\": \"Filecopy failed adls to sftp\",\n\"PipelineName\": \"@{pipeline().Pipeline}\",\n\"Subject\": \"An error has occurred!\",\n\"ActivityName\": \"Email - Filecopy failed adls to sftp\"\n}",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "send mail campusesp",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "ForEach1",
                                "dependencyConditions": [
                                    "Failed",
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "pip-send-email-campusesp",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "windowStart": {
                        "type": "string"
                    },
                    "ParentPipelineName": {
                        "type": "string"
                    },
                    "ParentPipelineRunID": {
                        "type": "string"
                    },
                    "ParentTriggerName": {
                        "type": "string"
                    },
                    "az_sql_server_name": {
                        "type": "string"
                    },
                    "az_sql_db_name": {
                        "type": "string"
                    },
                    "containerName": {
                        "type": "string"
                    },
                    "databricks_workspace_url": {
                        "type": "string"
                    },
                    "databricks_clusterid": {
                        "type": "string"
                    },
                    "crm_servername": {
                        "type": "string"
                    },
                    "crm_dbname": {
                        "type": "string"
                    },
                    "crm_username": {
                        "type": "string"
                    },
                    "vault_url": {
                        "type": "string"
                    },
                    "storageaccountname": {
                        "type": "string"
                    },
                    "campuse_esp_host": {
                        "type": "string"
                    },
                    "az_synapse_em_server": {
                        "type": "string"
                    },
                    "az_synapse_db": {
                        "type": "string"
                    },
                    "SuccessEmailURL": {
                        "type": "string"
                    },
                    "FailureEmailURL": {
                        "type": "string"
                    }
                },
                "variables": {
                    "childitem": {
                        "type": "String"
                    },
                    "name": {
                        "type": "String"
                    },
                    "nnp": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "partner-Integration"
                },
                "annotations": [],
                "lastPublishTime": "2022-11-17T19:10:47Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-campusesp-fw-adhoc-flow')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "ForEach1",
                        "description": "Iterate over adls outbound CampusESP slugname folders",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "adls CampusESP outbound folder list",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('adls CampusESP outbound folder list').output.childItems",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "itemName",
                                    "description": "itemName from foreach ",
                                    "type": "SetVariable",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "nnp",
                                        "value": {
                                            "value": "@item().name",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Copy to SFTP Inbound",
                                    "description": "Copy files to SFTP inbound ",
                                    "type": "Copy",
                                    "dependsOn": [
                                        {
                                            "activity": "itemName",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.02:00:00",
                                        "retry": 5,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "DelimitedTextSource",
                                            "storeSettings": {
                                                "type": "AzureBlobFSReadSettings",
                                                "recursive": true,
                                                "wildcardFolderPath": {
                                                    "value": "@concat('partnerintegration','/','campusesp','/','outbound','/',variables('nnp'))",
                                                    "type": "Expression"
                                                },
                                                "wildcardFileName": {
                                                    "value": "@concat(variables('nnp'),'.csv')",
                                                    "type": "Expression"
                                                },
                                                "enablePartitionDiscovery": false
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextReadSettings"
                                            }
                                        },
                                        "sink": {
                                            "type": "DelimitedTextSink",
                                            "storeSettings": {
                                                "type": "SftpWriteSettings",
                                                "operationTimeout": "01:00:00",
                                                "useTempFileRename": true
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextWriteSettings",
                                                "quoteAllText": true,
                                                "fileExtension": ".csv"
                                            }
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "typeConversion": true,
                                            "typeConversionSettings": {
                                                "allowDataTruncation": true,
                                                "treatBooleanAsNumber": false
                                            }
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "ds_pi_adls",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "ContainerName": {
                                                    "value": "@pipeline().parameters.containerName",
                                                    "type": "Expression"
                                                },
                                                "folderName": {
                                                    "value": "partnerintegration/campusesp/outbound",
                                                    "type": "Expression"
                                                },
                                                "storageaccountname": {
                                                    "value": "@pipeline().parameters.storageaccountname",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "ds_pi_sftp_campusesp",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "folderName": {
                                                    "value": "@concat('incoming','/')",
                                                    "type": "Expression"
                                                },
                                                "campuse_esp_host": {
                                                    "value": "@pipeline().parameters.campuse_esp_host",
                                                    "type": "Expression"
                                                },
                                                "campus_esp_username": {
                                                    "value": "@variables('nnp')",
                                                    "type": "Expression"
                                                },
                                                "vaulturl": {
                                                    "value": "@pipeline().parameters.vault_url",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "Lookup to campusesp staging",
                                    "description": "Lookup to zeemee staging table",
                                    "type": "Lookup",
                                    "dependsOn": [
                                        {
                                            "activity": "Copy to SFTP Inbound",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "SqlDWSource",
                                            "sqlReaderQuery": {
                                                "value": "select [Account Name] as university_name,count(*) as TotalRecordCount,count([Student Email]) as studentcount, count([Parent Email]) as parentcount from \n[etl].[RNLtoCampusESP_Staging] where [SlugName]= '@{variables('nnp')}'\ngroup by [Account Name]",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "ds_pi_synapse",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "tablename": {
                                                    "value": "RNLtoCampusESP_Staging",
                                                    "type": "Expression"
                                                },
                                                "schemaname": {
                                                    "value": "etl",
                                                    "type": "Expression"
                                                },
                                                "az_synapse_em_server": {
                                                    "value": "@pipeline().parameters.az_synapse_em_server",
                                                    "type": "Expression"
                                                },
                                                "az_synapse_db": {
                                                    "value": "@pipeline().parameters.az_synapse_db",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "firstRowOnly": true
                                    }
                                },
                                {
                                    "name": "campusesp partner data profiling",
                                    "description": "data profiling audit",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "Lookup to campusesp staging",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[etl].[insert_rows_partner]",
                                        "storedProcedureParameters": {
                                            "parent_count": {
                                                "value": {
                                                    "value": "@activity('Lookup to campusesp staging').output.firstRow['parentcount']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "row_count": {
                                                "value": {
                                                    "value": "@activity('Lookup to campusesp staging').output.firstRow['TotalRecordCount']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "student_count": {
                                                "value": {
                                                    "value": "@activity('Lookup to campusesp staging').output.firstRow['studentcount']",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            },
                                            "university_name": {
                                                "value": {
                                                    "value": "@activity('Lookup to campusesp staging').output.firstRow['university_name']",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "partner_name": {
                                                "value": "campusesp",
                                                "type": "String"
                                            },
                                            "flow_type": {
                                                "value": "forward",
                                                "type": "String"
                                            },
                                            "university_file_name": {
                                                "value": {
                                                    "value": "@concat(variables('nnp'),'.csv')",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "adf_run_id": {
                                                "value": {
                                                    "value": "@pipeline().parameters.ParentPipelineRunID",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "org": {
                                                "value": {
                                                    "value": "@variables('nnp')",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_AzureSqlDB",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "az_server_name": {
                                                "value": "@pipeline().parameters.az_sql_server_name",
                                                "type": "Expression"
                                            },
                                            "az_sql_db": {
                                                "value": "@pipeline().parameters.az_sql_db_name",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "Email",
                                    "type": "WebActivity",
                                    "dependsOn": [
                                        {
                                            "activity": "Copy to SFTP Inbound",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "url": {
                                            "value": "@pipeline().parameters.FailureEmailURL",
                                            "type": "Expression"
                                        },
                                        "connectVia": {
                                            "referenceName": "AutoResolveIntegrationRuntime",
                                            "type": "IntegrationRuntimeReference"
                                        },
                                        "method": "POST",
                                        "headers": {
                                            "Content-Type": "application/json"
                                        },
                                        "body": {
                                            "value": "{\n\"DataFactoryName\": \"@{pipeline().DataFactory}\",\n\"EmailTo\": \"Bhushan.Ahire@ruffalonl.com\",\n\"ErrorMessage\": \"\nHi CampusESP Team -\nSlugname-@{variables('nnp')}\nWarning-A public key corresponding to the supplied private key was not \naccepted by the server or the user name is incorrect. \n(Status: OperationFailure, Code: UnknownError). \nPlease whitelist the above mention Account from your side.\nRegrads-\nRNL Team\n\",\n\"PipelineName\": \"@{pipeline().Pipeline}\",\n\"Subject\": \"Unable to login\",\n\"ActivityName\": \"Email - Login failed to @{variables('nnp')} sftp\"\n}",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "adls CampusESP outbound folder list",
                        "type": "GetMetadata",
                        "dependsOn": [
                            {
                                "activity": "File Audit - adls to sftp started",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "ds_pi_adls",
                                "type": "DatasetReference",
                                "parameters": {
                                    "ContainerName": {
                                        "value": "@pipeline().parameters.containerName",
                                        "type": "Expression"
                                    },
                                    "folderName": {
                                        "value": "partnerintegration/campusesp/outbound",
                                        "type": "Expression"
                                    },
                                    "storageaccountname": {
                                        "value": "@pipeline().parameters.storageaccountname",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "fieldList": [
                                "childItems"
                            ],
                            "storeSettings": {
                                "type": "AzureBlobFSReadSettings",
                                "recursive": true,
                                "enablePartitionDiscovery": false
                            },
                            "formatSettings": {
                                "type": "DelimitedTextReadSettings"
                            }
                        }
                    },
                    {
                        "name": "CampusESP_SourceQuery_Data_Fetch",
                        "description": "Using campusesp source query data is fetching from crm and dumping it into raw folder of partnerintegration in adls",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "File Audit - crm to adls started",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "02:00:00",
                            "retry": 3,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlServerSource",
                                "sqlReaderQuery": {
                                    "value": "with cte_AccountinCampaign as \n(select distinct acb.accountId,acb.[Name],acb.po_campusespslugname from \n[dbo].[AccountBase] acb WITH(NOLOCK) where acb.po_campusespslugname is not null),\n\n\nCTE_stg AS (\nselect po_contactid,cast (\n    case\n        when (po_flag_enr = 1 or po_Date_Enr is not null) then 'Enrolled'\n        when (po_flag_con = 1 or po_Date_con is not null) then\n            case\n                when (po_flag_can = 1 or po_Date_Canc is not null) then 'Deposited Withdrawn'\n                Else 'Deposited'\n            End\n\twhen (icr.po_RNLCode= 'D') then 'Application Denied'\n        when (po_flag_admit = 1 or po_Date_Admin is not null) then\n            case\n                when (po_flag_can = 1 or po_Date_Canc is not null)  then 'Admitted Withdrawn'\n                Else 'Admitted'\n            End\n        when (po_flag_app= 1 or po_Date_App is not null) then\n            case\n                when (icr.po_RNLCode= 'D' and po_appcode= '936710000' ) then\n                    case\n                        when (po_flag_can = 1 or po_Date_Canc is not null) then 'Application Complete Withdrawn'\n                        Else 'Application Complete Denied'\n                    End\n                when (icr.po_RNLCode = 'D' and po_appcode= '936710001') then\n                    case\n                        when (po_flag_can = 1 or po_Date_Canc is not null) then 'Application Started Withdrawn'\n                        Else 'Application Started Denied'\n                    End\n                when (po_appcode= '936710000')  then 'Application Complete'\n                when (po_appcode= '936710001') then 'Application Started'\n\t\t\t\twhen (po_flag_can = 1 or po_Date_Canc is not null) then 'Application Cancelled'\n\t\t\t\twhen (icr.po_RNLCode= 'D') then 'Application Denied'\n\t\t\t\tElse 'Applied'\n            End\n        when (po_flag_inq = 1 or po_Date_Inq is not null) then\n            case\n                when (po_flag_can = 1 or po_Date_Canc is not null) then 'Prospect/Inquiry Cancelled'\n                Else 'Prospect/Inquiry'\n            End\n\t\twhen (po_flag_pro = 1 or  po_Date_Pro is not null) then\n            case\n                when (po_flag_can = 1 or po_Date_Canc is not null) then 'Lead Cancelled'\n                Else 'Lead'\n\t    End\n    End as nvarchar(50)) as CurrentStatus\n       from dbo.po_applicationBase ab WITH(NOLOCK)\n    inner join dbo.contactbase cb WITH(NOLOCK) on ab.po_applicationId = Cb.po_LatestResponse\n\tLEFT JOIN StringMap [po_AdmitStatusPLTable] WITH(NOLOCK)\n\t\tON ([po_AdmitStatusPLTable].AttributeName = 'po_admitstatuscode'\n\t\tAND [po_AdmitStatusPLTable].ObjectTypeCode = 10086\n\t\tAND [po_AdmitStatusPLTable].AttributeValue = ab.po_AdmitStatusCode\n\t\tAND [po_AdmitStatusPLTable].LangId = 1033)\n\tLEFT JOIN [po_institutioncrossreference] ICR WITH(NOLOCK) ON ICR.po_RNLValue =  po_AdmitStatusPLTable.Value and  ICR.po_type = 936710010 AND ICR.Statuscode = 1 AND ICR.po_AccountIdName = 'Ruffalo Noel Levitz'\n\t where po_contactid is not null)\n\n\nselect distinct \n\nstg.CurrentStatus,\n\nacb.[Name] [Account Name],\nacb.AccountId [AccountId],\nac_cmp.po_campusespslugname\t[CampusESPSlugName],  \nc.ContactId [ParentContactId],\ncb.ContactId [StudentContactId] ,\nc.firstname [First Name],\nc.lastname [Last Name], \ncb.FirstName [Student First Name],\ncb.LastName [Student Last Name], \ncb.EMailAddress1 [Student Email],\nc.emailaddress1 [Email],  \nc.po_contacttype [Contact Type], \nc.Telephone2 [Phone],\n cb.po_Contactnumber [Student ID Number],  \n c.po_Contactnumber [Parent ID Number] , \n cast(REVERSE(PARSENAME(REPLACE(REVERSE(lb.po_name), ' ', '.'), 2)) as nvarchar(100)) [Entry Year] ,\n cast(REVERSE(PARSENAME(REPLACE(REVERSE(lb.po_name), ' ', '.'), 1)) as nvarchar(100)) [Entry Term],\n es.Code [Entry Stat],\n replace(cast(CONCAT(cab.line1,isnull(' '+cab.line2,null),isnull(' '+cab.line3,null)) as nvarchar(50)),',','') [Address1],  \n replace(cast(cab.city as nvarchar(50)),',','') [City],\n replace(cast(cab.Stateorprovince as nvarchar(50)),',','') [State/Province] , \n replace(cast(cab.postalcode as nvarchar(50)),',','') [Zip Code], \n replace(cast(cab.country as nvarchar(50)),',','') [Country] ,\n case when isnull(ab.po_flag_international,'')= 1 then 'Y' else '' end as 'Flag_International',\n cb.CreatedOn from   \n (SELECT contactid ,createdon ,po_Contactnumber ,po_LatestResponse ,cb.Telephone2 ,\n po_contacttype ,ParentCustomerId ,ParentCustomerIdName ,FirstName ,LastName ,\n EMailAddress1 , CONVERT(VARCHAR(10),BirthDate, 101) as 'Birthdate' , \n ROW_NUMBER() OVER (PARTITION BY concat(ParentCustomerIdName,EMailAddress1) order by createdon asc) AS rn \n FROM [dbo].[contactbase] cb WITH(NOLOCK) where cb.po_contacttype= 936710000 ) CB \n left join [dbo].[customeraddressbase] cab WITH(NOLOCK) on cab.parentid=cb.ContactId  \n inner join (SELECT cb1.ParentCustomerId ,cb1.ContactId  ,\n cb1.po_Contactnumber ,cb1.ParentCustomerIdName ,cb1.FirstName ,\n cb1.LastName ,cb1.EMailAddress1 ,cb1.po_contacttype ,cb1.Telephone2 ,  \n ROW_NUMBER() OVER (PARTITION BY concat(cb1.ParentCustomerId,cb1.FirstName ,\n cb1.LastName,cb1.EMailAddress1) order by cb1.createdon asc) AS rn FROM \n [dbo].[contactbase] Cb1 WITH(NOLOCK) where cb1.po_contacttype=936710001 and cb1.EMailAddress1 is not null )  As c \n on cb.ContactId=c.ParentCustomerId  AND c.rn = 1 left join [dbo].[AccountBase] acb WITH(NOLOCK) on\n  acb.AccountId=cb.ParentCustomerId inner Join cte_AccountinCampaign ac_cmp WITH(NOLOCK) \n on ac_cmp.accountId=cb.parentcustomerid \n \n inner join CTE_stg stg WITH(NOLOCK)\n on stg.po_contactid=cb.ContactId\n \n\n left join [dbo].[po_applicationBase] ab WITH(NOLOCK)\n on ab.po_applicationId = cb.po_LatestResponse  left join [dbo].[po_lookupBase] lb WITH(NOLOCK) \n on lb.po_lookupid=ab.po_lookupid  left join (SELECT AttributeValue as Value,s.Value as 'Code' FROM dbo.StringMapbase s WITH(NOLOCK) \n JOIN dbo.EntityLogicalView e on s.ObjectTypeCode = e.ObjectTypeCode \n WHERE AttributeName = 'po_entrystat' AND e.Name = 'po_application')  es \n on es.Value= ab.po_EntryStat WHERE cb.rn=1  and cab.AddressNumber=1  \n and lb.po_code in ('22 Fall','23 Fall','24 Fall','25 Fall','22 Summer',\n '23 Summer','24 Summer','25 Summer','22 Spring','23 Spring','24 Spring','25 Spring')\n and acb.po_campusespslugname='@{variables('slugname')}'",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "DelimitedTextSink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextWriteSettings",
                                    "quoteAllText": true,
                                    "fileExtension": ".txt"
                                }
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "CurrentStatus",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "CurrentStatus",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Account Name",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "Account Name",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "AccountId",
                                            "type": "Guid",
                                            "physicalType": "uniqueidentifier"
                                        },
                                        "sink": {
                                            "name": "AccountId",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "CampusESPSlugName",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "CampusESPSlugName",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ParentContactId",
                                            "type": "Guid",
                                            "physicalType": "uniqueidentifier"
                                        },
                                        "sink": {
                                            "name": "ParentContactId",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "StudentContactId",
                                            "type": "Guid",
                                            "physicalType": "uniqueidentifier"
                                        },
                                        "sink": {
                                            "name": "StudentContactId",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "First Name",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "First Name",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Last Name",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "Last Name",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Student First Name",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "Student First Name",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Student Last Name",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "Student Last Name",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Student Email",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "Student Email",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Email",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "Email",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Contact Type",
                                            "type": "Int32",
                                            "physicalType": "int"
                                        },
                                        "sink": {
                                            "name": "Contact Type",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Phone",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "Phone",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Student ID Number",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "Student ID Number",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Parent ID Number",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "Parent ID Number",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Entry Year",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "Entry Year",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Entry Term",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "Entry Term",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Entry Stat",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "Entry Stat",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Address1",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "Address1",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "City",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "City",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "State/Province",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "State/Province",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Zip Code",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "Zip Code",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Country",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "Country",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Flag_International",
                                            "type": "String",
                                            "physicalType": "varchar"
                                        },
                                        "sink": {
                                            "name": "Flag_International",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "CreatedOn",
                                            "type": "DateTime",
                                            "physicalType": "datetime"
                                        },
                                        "sink": {
                                            "name": "CreatedOn",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ds_pi_appboostCRM_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "crm_servername": {
                                        "value": "@pipeline().parameters.crm_servername",
                                        "type": "Expression"
                                    },
                                    "crm_dbname": {
                                        "value": "@pipeline().parameters.crm_dbname",
                                        "type": "Expression"
                                    },
                                    "crm_username": {
                                        "value": "@pipeline().parameters.crm_username",
                                        "type": "Expression"
                                    },
                                    "vaulturl": {
                                        "value": "@pipeline().parameters.vault_url",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ds_pi_sourcefile_campusesp",
                                "type": "DatasetReference",
                                "parameters": {
                                    "ContainerName": {
                                        "value": "@pipeline().parameters.containerName",
                                        "type": "Expression"
                                    },
                                    "FilePath": {
                                        "value": "partnerintegration/raw/outbound",
                                        "type": "Expression"
                                    },
                                    "Filename": {
                                        "value": "campusesp.csv",
                                        "type": "Expression"
                                    },
                                    "storageaccountname": {
                                        "value": "@pipeline().parameters.storageaccountname",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "CampusESP_Raw to Outbound Segregated slugwise",
                        "description": "segregating data into adls outbound folder slugwise",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [
                            {
                                "activity": "RNLtoCampusESP_Staging",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "1.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "df_campusesp_segregated_slugwise",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "source": {
                                        "tablename": "RNLtoCampusESP_Staging",
                                        "schemaname": "etl",
                                        "az_synapse_em_server": {
                                            "value": "@pipeline().parameters.az_synapse_em_server",
                                            "type": "Expression"
                                        },
                                        "az_synapse_db": {
                                            "value": "@pipeline().parameters.az_synapse_db",
                                            "type": "Expression"
                                        }
                                    },
                                    "sink": {
                                        "ContainerName": {
                                            "value": "@pipeline().parameters.containerName",
                                            "type": "Expression"
                                        },
                                        "folderName": "partnerintegration/campusesp/outbound/",
                                        "storageaccountname": {
                                            "value": "@pipeline().parameters.storageaccountname",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    },
                    {
                        "name": "slugname",
                        "description": "incoming slugname placeholder",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "slugname",
                            "value": {
                                "value": "@pipeline().parameters.inputslug",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "File Audit - adls to sftp started",
                        "description": "File Audit - adls to sftp started",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "CampusESP_Raw to Outbound Segregated slugwise",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-file-processing-log",
                            "baseParameters": {
                                "audit_id": "910",
                                "adf_run_id": {
                                    "value": "@pipeline().parameters.ParentPipelineRunID",
                                    "type": "Expression"
                                },
                                "file_processing_stage": "campusesp sftp inbound copy started",
                                "status": "Started",
                                "row_count": "0",
                                "rejected_row": "0",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_sql_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_sql_db_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "File Audit - adls to sftp completed",
                        "description": "File Audit - adls to sftp completed",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "ForEach1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-file-processing-log",
                            "baseParameters": {
                                "audit_id": "911",
                                "adf_run_id": {
                                    "value": "@pipeline().parameters.ParentPipelineRunID",
                                    "type": "Expression"
                                },
                                "file_processing_stage": "campusesp sftp inbound copy completed",
                                "status": "Completed",
                                "row_count": "0",
                                "rejected_row": "0",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_sql_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_sql_db_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "File Audit - adls to sftp failed",
                        "description": "File Audit - adls to sftp failed",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "ForEach1",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-file-processing-log",
                            "baseParameters": {
                                "audit_id": "912",
                                "adf_run_id": {
                                    "value": "@pipeline().parameters.ParentPipelineRunID",
                                    "type": "Expression"
                                },
                                "file_processing_stage": "campusesp sftp inbound copy failed",
                                "status": "Failed",
                                "row_count": "0",
                                "rejected_row": "0",
                                "error_description": "campusesp sftp inbound copy failed",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_sql_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_sql_db_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "File Audit - crm to adls started",
                        "description": "File Audit - crm to adls started",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "If exists archive",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-file-processing-log",
                            "baseParameters": {
                                "audit_id": "910",
                                "adf_run_id": {
                                    "value": "@pipeline().parameters.ParentPipelineRunID",
                                    "type": "Expression"
                                },
                                "file_processing_stage": "campusesp adls outbound copy started",
                                "status": "Started",
                                "row_count": "0",
                                "rejected_row": "0",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_sql_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_sql_db_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "File Audit - crm to adls completed",
                        "description": "File Audit - crm to adls completed",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "CampusESP_SourceQuery_Data_Fetch",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-file-processing-log",
                            "baseParameters": {
                                "audit_id": "911",
                                "adf_run_id": {
                                    "value": "@pipeline().parameters.ParentPipelineRunID",
                                    "type": "Expression"
                                },
                                "file_processing_stage": "campusesp adls outbound copy completed",
                                "status": "Completed",
                                "row_count": "0",
                                "rejected_row": "0",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_sql_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_sql_db_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "File Audit - crm to adls failed",
                        "description": "File Audit - crm to adls failed",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "CampusESP_SourceQuery_Data_Fetch",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-file-processing-log",
                            "baseParameters": {
                                "audit_id": "912",
                                "adf_run_id": {
                                    "value": "@pipeline().parameters.ParentPipelineRunID",
                                    "type": "Expression"
                                },
                                "file_processing_stage": "campusesp adls outbound copy failed",
                                "status": "Failed",
                                "row_count": "0",
                                "rejected_row": "0",
                                "error_description": "campusesp adls outbound copy failed",
                                "server_name": {
                                    "value": "@pipeline().parameters.az_sql_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.az_sql_db_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Folder exists or not for archive",
                        "description": "checking folder exists or not in outbound folder",
                        "type": "GetMetadata",
                        "dependsOn": [
                            {
                                "activity": "slugname",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "ds_pi_adls",
                                "type": "DatasetReference",
                                "parameters": {
                                    "ContainerName": {
                                        "value": "@pipeline().parameters.containerName",
                                        "type": "Expression"
                                    },
                                    "folderName": {
                                        "value": "partnerintegration/campusesp/outbound",
                                        "type": "Expression"
                                    },
                                    "storageaccountname": {
                                        "value": "@pipeline().parameters.storageaccountname",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "fieldList": [
                                "exists"
                            ],
                            "storeSettings": {
                                "type": "AzureBlobFSReadSettings",
                                "recursive": true,
                                "enablePartitionDiscovery": false
                            },
                            "formatSettings": {
                                "type": "DelimitedTextReadSettings"
                            }
                        }
                    },
                    {
                        "name": "If exists archive",
                        "description": "If folder present then archiving it.",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Folder exists or not for archive",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(activity('Folder exists or not for archive').output.exists,true)",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Archive",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "DelimitedTextSource",
                                            "storeSettings": {
                                                "type": "AzureBlobFSReadSettings",
                                                "recursive": true,
                                                "wildcardFolderPath": "partnerintegration/campusesp/outbound",
                                                "wildcardFileName": "*",
                                                "enablePartitionDiscovery": false
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextReadSettings"
                                            }
                                        },
                                        "sink": {
                                            "type": "DelimitedTextSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextWriteSettings",
                                                "quoteAllText": true,
                                                "fileExtension": ".txt"
                                            }
                                        },
                                        "enableStaging": false
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "ds_pi_adls",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "ContainerName": {
                                                    "value": "@pipeline().parameters.containerName",
                                                    "type": "Expression"
                                                },
                                                "folderName": {
                                                    "value": "partnerintegration/campusesp/outbound",
                                                    "type": "Expression"
                                                },
                                                "storageaccountname": {
                                                    "value": "@pipeline().parameters.storageaccountname",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "ds_pi_adls",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "ContainerName": {
                                                    "value": "@pipeline().parameters.containerName",
                                                    "type": "Expression"
                                                },
                                                "folderName": {
                                                    "value": "@concat('partnerintegration','/','campusesp','/','archive','/','outbound','/',formatDateTime(pipeline().parameters.windowStart,'yyyy'),formatDateTime(pipeline().parameters.windowStart,'MM'),formatDateTime(pipeline().parameters.windowStart,'dd'))",
                                                    "type": "Expression"
                                                },
                                                "storageaccountname": {
                                                    "value": "@pipeline().parameters.storageaccountname",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "Delete Processed files after Archival",
                                    "type": "Delete",
                                    "dependsOn": [
                                        {
                                            "activity": "Archive",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "ds_pi_adls",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "ContainerName": {
                                                    "value": "@pipeline().parameters.containerName",
                                                    "type": "Expression"
                                                },
                                                "folderName": {
                                                    "value": "partnerintegration/campusesp/outbound/",
                                                    "type": "Expression"
                                                },
                                                "storageaccountname": {
                                                    "value": "@pipeline().parameters.storageaccountname",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "enableLogging": false,
                                        "storeSettings": {
                                            "type": "AzureBlobFSReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "RNLtoCampusESP_Staging",
                        "description": "dumping data into campusesp staging table\netl.RNLtoCampusESP_Staging",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "File Audit - crm to adls completed",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": "Truncate Table [etl].[RNLtoCampusESP_Staging]",
                                "writeBehavior": "Insert",
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "Account Name",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Account Name",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "CampusESPSlugName",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "SlugName",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "AccountId",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Account ID",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Parent ID Number",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Parent ID Number",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "First Name",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Parent First Name",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Last Name",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Parent Last Name",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Email",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Parent Email",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Student ID Number",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Student ID Number",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Student First Name",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Student First Name",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Student Last Name",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Student Last Name",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Student Email",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Student Email",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Address1",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Address1",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "City",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "City",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "State/Province",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "State/Province",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Zip Code",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Zip Code",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Country",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Country",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Phone",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Phone",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Entry Term",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Entry Term",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Entry Year",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Entry Year",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Entry Stat",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Student Type",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "CurrentStatus",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Stage",
                                            "type": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Flag_International",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Flag_International",
                                            "type": "String"
                                        }
                                    }
                                ]
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ds_pi_sourcefile_campusesp",
                                "type": "DatasetReference",
                                "parameters": {
                                    "ContainerName": {
                                        "value": "@pipeline().parameters.containerName",
                                        "type": "Expression"
                                    },
                                    "FilePath": {
                                        "value": "partnerintegration/raw/outbound",
                                        "type": "Expression"
                                    },
                                    "Filename": {
                                        "value": "campusesp.csv",
                                        "type": "Expression"
                                    },
                                    "storageaccountname": {
                                        "value": "@pipeline().parameters.storageaccountname",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ds_pi_synapse",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": {
                                        "value": "RNLtoCampusESP_Staging",
                                        "type": "Expression"
                                    },
                                    "schemaname": {
                                        "value": "etl",
                                        "type": "Expression"
                                    },
                                    "az_synapse_em_server": {
                                        "value": "@pipeline().parameters.az_synapse_em_server",
                                        "type": "Expression"
                                    },
                                    "az_synapse_db": {
                                        "value": "@pipeline().parameters.az_synapse_db",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "Email - adls to sftp successful",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "ForEach1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@pipeline().parameters.SuccessEmailURL",
                                "type": "Expression"
                            },
                            "connectVia": {
                                "referenceName": "AutoResolveIntegrationRuntime",
                                "type": "IntegrationRuntimeReference"
                            },
                            "method": "POST",
                            "headers": {
                                "Content-Type": "application/json"
                            },
                            "body": {
                                "value": "{\n\"DataFactoryName\": \"@{pipeline().DataFactory}\",\n\"EmailTo\": \"Bhushan.Ahire@ruffalonl.com\",\n\"PipelineName\": \"@{pipeline().Pipeline}\",\n\"Subject\": \"File copied to adls to sftp Successful!\"\n}",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Email - Filecopy failed adls to sftp",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "ForEach1",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@pipeline().parameters.FailureEmailURL",
                                "type": "Expression"
                            },
                            "connectVia": {
                                "referenceName": "AutoResolveIntegrationRuntime",
                                "type": "IntegrationRuntimeReference"
                            },
                            "method": "POST",
                            "headers": {
                                "Content-Type": "application/json"
                            },
                            "body": {
                                "value": "{\n\"DataFactoryName\": \"@{pipeline().DataFactory}\",\n\"EmailTo\": \"Bhushan.Ahire@ruffalonl.com\",\n\"ErrorMessage\": \"Filecopy failed adls to sftp\",\n\"PipelineName\": \"@{pipeline().Pipeline}\",\n\"Subject\": \"An error has occurred!\",\n\"ActivityName\": \"Email - Filecopy failed adls to sftp\"\n}",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "send mail campusesp",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Email - adls to sftp successful",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "pip-send-email-campusesp",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "windowStart": {
                        "type": "string"
                    },
                    "inputslug": {
                        "type": "string"
                    },
                    "ParentPipelineName": {
                        "type": "string"
                    },
                    "ParentPipelineRunID": {
                        "type": "string"
                    },
                    "ParentTriggerName": {
                        "type": "string"
                    },
                    "az_sql_server_name": {
                        "type": "string"
                    },
                    "az_sql_db_name": {
                        "type": "string"
                    },
                    "campuse_esp_host": {
                        "type": "string"
                    },
                    "vault_url": {
                        "type": "string"
                    },
                    "storageaccountname": {
                        "type": "string"
                    },
                    "containerName": {
                        "type": "string"
                    },
                    "crm_servername": {
                        "type": "string"
                    },
                    "crm_dbname": {
                        "type": "string"
                    },
                    "crm_username": {
                        "type": "string"
                    },
                    "az_synapse_em_server": {
                        "type": "string"
                    },
                    "az_synapse_db": {
                        "type": "string"
                    },
                    "databricks_workspace_url": {
                        "type": "string"
                    },
                    "databricks_clusterid": {
                        "type": "string"
                    },
                    "SuccessEmailURL": {
                        "type": "string"
                    },
                    "FailureEmailURL": {
                        "type": "string"
                    }
                },
                "variables": {
                    "childitem": {
                        "type": "String"
                    },
                    "name": {
                        "type": "String"
                    },
                    "nnp": {
                        "type": "String"
                    },
                    "slugname": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "partner-Integration"
                },
                "annotations": [],
                "lastPublishTime": "2022-09-23T12:45:46Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-em_dqe_dia_automation_historical')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "DQE DIA Automation",
                "activities": [
                    {
                        "name": "process_files",
                        "description": "DQE Process for each responseid fetched",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "get_response_id",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('get_response_id').output.Value",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 10,
                            "activities": [
                                {
                                    "name": "file_metadata",
                                    "description": "Fetch file metadata for the retrieved responseid",
                                    "type": "Lookup",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.00:10:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "AzureSqlSource",
                                            "sqlReaderQuery": {
                                                "value": "select (case \nwhen purpose_name = 'EM Scoring' then 'staging.em_scoring' \nwhen purpose_name = 'EM Search Vendor Data' then 'staging.em_search_vendor_data' \nwhen purpose_name = 'EM Suppression' then 'staging.em_suppression' \nwhen purpose_name = 'EM GO' then 'staging.em_aog' \nwhen purpose_name = 'EM Marketing' then 'staging.em_marketing' \nwhen purpose_name = 'EM Historical Data' then 'staging.em_historical_data' end) staging_table,\n * from [audit].[file_metadata]\nwhere modified_filename = '@{item().modified_filename}'",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "ds_azure_sql",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "tablename": "file_metadata",
                                                "schemaname": "audit",
                                                "az_server_name": {
                                                    "value": "@pipeline().parameters.server_name",
                                                    "type": "Expression"
                                                },
                                                "az_sql_db": {
                                                    "value": "@pipeline().parameters.database_name",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "check responseid in staging table",
                                    "type": "Lookup",
                                    "dependsOn": [
                                        {
                                            "activity": "file_metadata",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "AzureSqlSource",
                                            "sqlReaderQuery": {
                                                "value": "select count(*) as count from @{activity('file_metadata').output.firstRow.staging_table} where response_id='@{item().response_id}'",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "ds_azure_sql",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "tablename": {
                                                    "value": "@split(activity('file_metadata').output.firstRow.staging_table,'.')[1]",
                                                    "type": "Expression"
                                                },
                                                "schemaname": "staging",
                                                "az_server_name": {
                                                    "value": "@pipeline().parameters.server_name",
                                                    "type": "Expression"
                                                },
                                                "az_sql_db": {
                                                    "value": "@pipeline().parameters.database_name",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "if responseid not in staging table",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "auditfile_dqe_start",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@equals(activity('check responseid in staging table').output.firstRow.count,0)",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "run_em_dqe_notebook",
                                                "description": "Invoke pipeline to execute DQE Script in Databricks Notebook",
                                                "type": "ExecutePipeline",
                                                "dependsOn": [],
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "pipeline": {
                                                        "referenceName": "pip-dqe_em_notebook",
                                                        "type": "PipelineReference"
                                                    },
                                                    "waitOnCompletion": true,
                                                    "parameters": {
                                                        "adlsName": {
                                                            "value": "@pipeline().parameters.storageaccountname",
                                                            "type": "Expression"
                                                        },
                                                        "manualFlag": "automated",
                                                        "mountPath": "/mnt/datalanding",
                                                        "containerName": "datalanding",
                                                        "outboundFolder": {
                                                            "value": "em_inbound/dqe/em_outbound",
                                                            "type": "Expression"
                                                        },
                                                        "currentYear": "2022",
                                                        "ruleFlag": "exclude",
                                                        "fileQueueFileType": "EM_File_Queue",
                                                        "inboundFolder": {
                                                            "value": "@concat('em_inbound/',activity('file_metadata').output.firstRow.purpose_name)",
                                                            "type": "Expression"
                                                        },
                                                        "executionTimeStoreFolder": "em_inbound/dqe/em_execution",
                                                        "intermediateOutboundFolder": "em_inbound/dqe/em_intermediate",
                                                        "fileQueueFileName": "em_file_queue",
                                                        "responseid": {
                                                            "value": "@item().response_id",
                                                            "type": "Expression"
                                                        },
                                                        "purposeName": {
                                                            "value": "@item().purposename",
                                                            "type": "Expression"
                                                        },
                                                        "authority": "https://login.microsoftonline.com/",
                                                        "staging_table": {
                                                            "value": "@activity('file_metadata').output.firstRow.staging_table",
                                                            "type": "Expression"
                                                        },
                                                        "database_name": {
                                                            "value": "@pipeline().parameters.database_name",
                                                            "type": "Expression"
                                                        },
                                                        "jdbc_url": "jdbc:sqlserver://rnlndpprodazsql01.database.windows.net:1433",
                                                        "databricks_workspace_url": {
                                                            "value": "@pipeline().parameters.databricks_workspace_url",
                                                            "type": "Expression"
                                                        },
                                                        "databricks_clusterid": {
                                                            "value": "@pipeline().parameters.databricks_clusterid",
                                                            "type": "Expression"
                                                        },
                                                        "vault_url": {
                                                            "value": "@pipeline().parameters.vaulturl",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "dqe_profiling_audit",
                                                "description": "DQE Data profiling audit",
                                                "type": "ExecutePipeline",
                                                "dependsOn": [
                                                    {
                                                        "activity": "run_em_dqe_notebook",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "pipeline": {
                                                        "referenceName": "pip-dqe_profiling_log",
                                                        "type": "PipelineReference"
                                                    },
                                                    "waitOnCompletion": true,
                                                    "parameters": {
                                                        "responseid": {
                                                            "value": "@activity('file_metadata').output.firstRow.response_id",
                                                            "type": "Expression"
                                                        },
                                                        "purposename": {
                                                            "value": "@activity('file_metadata').output.firstRow.purpose_name",
                                                            "type": "Expression"
                                                        },
                                                        "staging_table": {
                                                            "value": "@activity('file_metadata').output.firstRow.staging_table",
                                                            "type": "Expression"
                                                        },
                                                        "az_server_name": {
                                                            "value": "@pipeline().parameters.server_name",
                                                            "type": "Expression"
                                                        },
                                                        "az_database_name": {
                                                            "value": "@pipeline().parameters.database_name",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "dqe_data_enrichment_audit",
                                                "description": "Data enrichment flag audit",
                                                "type": "ExecutePipeline",
                                                "dependsOn": [
                                                    {
                                                        "activity": "dqe_profiling_audit",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "pipeline": {
                                                        "referenceName": "pip-dqe_data_enrichment_audit",
                                                        "type": "PipelineReference"
                                                    },
                                                    "waitOnCompletion": true,
                                                    "parameters": {
                                                        "responseid": {
                                                            "value": "@activity('file_metadata').output.firstRow.response_id",
                                                            "type": "Expression"
                                                        },
                                                        "purposename": {
                                                            "value": "@activity('file_metadata').output.firstRow.purpose_name",
                                                            "type": "Expression"
                                                        },
                                                        "staging_table": {
                                                            "value": "@activity('file_metadata').output.firstRow.staging_table",
                                                            "type": "Expression"
                                                        },
                                                        "az_server_name": {
                                                            "value": "@pipeline().parameters.server_name",
                                                            "type": "Expression"
                                                        },
                                                        "az_database_name": {
                                                            "value": "@pipeline().parameters.database_name",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "get_tablename_for_storedprocedure",
                                                "description": "Fetch file metadata for the retrieved responseid",
                                                "type": "Lookup",
                                                "dependsOn": [
                                                    {
                                                        "activity": "dqe_data_enrichment_audit",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "0.00:10:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "select (case \nwhen purpose_name = 'EM Scoring' then 'EM_Scoring' \nwhen purpose_name = 'EM Search Vendor Data' then 'EM_Search_Vendor_Data' \nwhen purpose_name = 'EM Suppression' then 'EM_Suppression' \nwhen purpose_name = 'EM GO' then 'EM_Aog' \nwhen purpose_name = 'EM Marketing' then 'EM_Marketing' \nwhen purpose_name = 'EM Historical Data' then 'EM_Historical_Data' end) TableName,\n * from [audit].[file_metadata] where response_id = '@{item().response_id}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_azure_sql",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "tablename": "file_metadata",
                                                            "schemaname": "audit",
                                                            "az_server_name": {
                                                                "value": "@pipeline().parameters.server_name",
                                                                "type": "Expression"
                                                            },
                                                            "az_sql_db": {
                                                                "value": "@pipeline().parameters.database_name",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    },
                                                    "firstRowOnly": true
                                                }
                                            },
                                            {
                                                "name": "execute_em_historical_staging_dia_ds_team",
                                                "type": "ExecutePipeline",
                                                "dependsOn": [
                                                    {
                                                        "activity": "get_tablename_for_storedprocedure",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "pipeline": {
                                                        "referenceName": "pip-em-historical-staging-dia-ds-team",
                                                        "type": "PipelineReference"
                                                    },
                                                    "waitOnCompletion": true,
                                                    "parameters": {
                                                        "azure_sql_database_name": {
                                                            "value": "@pipeline().parameters.database_name",
                                                            "type": "Expression"
                                                        },
                                                        "azure_sql_server_name": {
                                                            "value": "@pipeline().parameters.server_name",
                                                            "type": "Expression"
                                                        },
                                                        "response_id": {
                                                            "value": "@item().response_id",
                                                            "type": "Expression"
                                                        },
                                                        "purpose_name": {
                                                            "value": "@item().purposename",
                                                            "type": "Expression"
                                                        },
                                                        "container": "prodsynapse",
                                                        "file_path": "em_historical_data/DIA DS team",
                                                        "file_name": {
                                                            "value": "@item().modified_filename",
                                                            "type": "Expression"
                                                        },
                                                        "accountname": {
                                                            "value": "@item().account_name",
                                                            "type": "Expression"
                                                        },
                                                        "databricks_workspace_url": {
                                                            "value": "@pipeline().parameters.databricks_workspace_url",
                                                            "type": "Expression"
                                                        },
                                                        "databricks_clusterid": {
                                                            "value": "@pipeline().parameters.databricks_clusterid",
                                                            "type": "Expression"
                                                        },
                                                        "vaulturl": {
                                                            "value": "@pipeline().parameters.vaulturl",
                                                            "type": "Expression"
                                                        },
                                                        "storageaccountname": {
                                                            "value": "@pipeline().parameters.storageaccountname",
                                                            "type": "Expression"
                                                        },
                                                        "original_filename": {
                                                            "value": "@activity('get_tablename_for_storedprocedure').output.firstRow.original_filename",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "auditfile_dqe_start",
                                    "description": "File audit for DQE DIA Automation with status as Started",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [
                                        {
                                            "activity": "check responseid in staging table",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.00:10:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": "/audit-Framework/dbn-file-processing-log",
                                        "baseParameters": {
                                            "audit_id": "301",
                                            "adf_run_id": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "response_id": {
                                                "value": "@item().response_id",
                                                "type": "Expression"
                                            },
                                            "mapping_id": {
                                                "value": "@activity('file_metadata').output.firstRow.mapping_id",
                                                "type": "Expression"
                                            },
                                            "purpose_file_name": {
                                                "value": "@item().purpose_file_name",
                                                "type": "Expression"
                                            },
                                            "account_name": {
                                                "value": "@activity('file_metadata').output.firstRow.account_name",
                                                "type": "Expression"
                                            },
                                            "file_processing_stage": "em_inbound",
                                            "status": "DQE and DIA automation Started",
                                            "row_count": {
                                                "value": "@string(item().row_count)",
                                                "type": "Expression"
                                            },
                                            "rejected_row": {
                                                "value": "@string(item().rejected_row)",
                                                "type": "Expression"
                                            },
                                            "server_name": {
                                                "value": "@pipeline().parameters.server_name",
                                                "type": "Expression"
                                            },
                                            "database_name": {
                                                "value": "@pipeline().parameters.database_name",
                                                "type": "Expression"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_NDPdatabricks",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vaulturl",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "email_em_dqe_notebook_failure",
                                    "description": "Email Notification if DQE notebook execution fails",
                                    "type": "WebActivity",
                                    "dependsOn": [
                                        {
                                            "activity": "auditfile_dqe_failure",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.00:10:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "url": {
                                            "value": "@pipeline().parameters.email_fail_url",
                                            "type": "Expression"
                                        },
                                        "connectVia": {
                                            "referenceName": "AutoResolveIntegrationRuntime",
                                            "type": "IntegrationRuntimeReference"
                                        },
                                        "method": "POST",
                                        "headers": {
                                            "Content-Type": "application/json"
                                        },
                                        "body": {
                                            "value": "{\n\"DataFactoryName\": \"@{pipeline().DataFactory}\",\n\"EmailTo\": \"ganesh.gawli@ruffalonl.com\",\n\"ErrorMessage\": \"DQE Script - DQE Script Execution Failed\",\n\"PipelineName\": \"@{pipeline().Pipeline}\",\n\"Subject\": \"An error has occurred!\",\n\"ActivityName\": \"run_em_dqe_notebook\"\n}",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "auditfile_dqe_failure",
                                    "description": "File audit for DQE DIA Automation with status as DQE and DIA automation Failed",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [
                                        {
                                            "activity": "if responseid not in staging table",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.00:10:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": "/audit-Framework/dbn-file-processing-log",
                                        "baseParameters": {
                                            "audit_id": "303",
                                            "adf_run_id": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "response_id": {
                                                "value": "@item().response_id",
                                                "type": "Expression"
                                            },
                                            "mapping_id": {
                                                "value": "@activity('file_metadata').output.firstRow.mapping_id",
                                                "type": "Expression"
                                            },
                                            "purpose_file_name": {
                                                "value": "@item().purpose_file_name",
                                                "type": "Expression"
                                            },
                                            "account_name": {
                                                "value": "@activity('file_metadata').output.firstRow.account_name",
                                                "type": "Expression"
                                            },
                                            "file_processing_stage": "Staging",
                                            "status": "DQE and DIA automation Failed",
                                            "row_count": {
                                                "value": "@string(item().row_count)",
                                                "type": "Expression"
                                            },
                                            "rejected_row": {
                                                "value": "@string(item().rejected_row)",
                                                "type": "Expression"
                                            },
                                            "error_description": {
                                                "value": "DQE and DIA automation Failed",
                                                "type": "Expression"
                                            },
                                            "server_name": {
                                                "value": "@pipeline().parameters.server_name",
                                                "type": "Expression"
                                            },
                                            "database_name": {
                                                "value": "@pipeline().parameters.database_name",
                                                "type": "Expression"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_NDPdatabricks",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vaulturl",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "auditfile_dqe_complete",
                                    "description": "File audit for DQE DIA Automation with status as Completed",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [
                                        {
                                            "activity": "if responseid not in staging table",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.00:10:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": "/audit-Framework/dbn-file-processing-log",
                                        "baseParameters": {
                                            "audit_id": "302",
                                            "adf_run_id": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "response_id": {
                                                "value": "@item().response_id",
                                                "type": "Expression"
                                            },
                                            "mapping_id": {
                                                "value": "@activity('file_metadata').output.firstRow.mapping_id",
                                                "type": "Expression"
                                            },
                                            "purpose_file_name": {
                                                "value": "@item().purpose_file_name",
                                                "type": "Expression"
                                            },
                                            "account_name": {
                                                "value": "@activity('file_metadata').output.firstRow.account_name",
                                                "type": "Expression"
                                            },
                                            "file_processing_stage": "Staging",
                                            "status": "DQE and DIA automation Completed",
                                            "row_count": {
                                                "value": "@string(item().row_count)",
                                                "type": "Expression"
                                            },
                                            "rejected_row": {
                                                "value": "@string(item().rejected_row)",
                                                "type": "Expression"
                                            },
                                            "server_name": {
                                                "value": "@pipeline().parameters.server_name",
                                                "type": "Expression"
                                            },
                                            "database_name": {
                                                "value": "@pipeline().parameters.database_name",
                                                "type": "Expression"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_NDPdatabricks",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vaulturl",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "email_em_dqe_dia_automation",
                                    "description": "DQE complete notification",
                                    "type": "WebActivity",
                                    "dependsOn": [
                                        {
                                            "activity": "auditfile_dqe_complete",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.00:10:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "url": {
                                            "value": "@pipeline().parameters.email_success_url",
                                            "type": "Expression"
                                        },
                                        "connectVia": {
                                            "referenceName": "AutoResolveIntegrationRuntime",
                                            "type": "IntegrationRuntimeReference"
                                        },
                                        "method": "POST",
                                        "headers": {
                                            "Content-Type": "application/json"
                                        },
                                        "body": {
                                            "value": "{\n\"DataFactoryName\": \"@{pipeline().DataFactory}\",\n\"EmailTo\": \"ganesh.gawli@ruffalonl.com;rushikesh.shirgoankar@ruffalonl.com\",\n\"PipelineName\": \"@{pipeline().Pipeline}\",\n\"Subject\": \"DQE Script - Successful\",\n\"Filename\":\"@{item().modified_filename}\",\n\"Source row count\":\"@{string(item().row_count)}\",\n\"Destination row count\" :\"@{concat('rejected rows= ', string(item().rejected_row))}\"\n}\n",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "start_etl_audit",
                        "description": "Start ETL Audit for DQE and DIA Automation",
                        "type": "DatabricksNotebook",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.00:10:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "201",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": {
                                    "value": "@pipeline().parameters.Pipeline_Start_Status",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.database_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vaulturl",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "get_response_id",
                        "description": "Fetch responseid for files present in em_inbound folder and DQE process to be done",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "start_etl_audit",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.00:10:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "select account_name,file_purpose,purpose_file_name,status,response_id,modified_filename,mapping_id,row_count,rejected_row,purposename from\n(select fm.file_purpose file_purpose, purpose_file_name,status,fm.response_id response_id,fm.modified_filename modified_filename,fm.mapping_id mapping_id,fpl.row_count,fpl.rejected_row,fm.purpose_name purposename,fm.account_name account_name,row_number() over \n(PARTITION BY purpose_file_name,fm.response_id order by fpl.id desc)  row_num from [audit].[file_processing_log] fpl\ninner join [audit].[file_metadata] fm\non fpl.response_id = fm.response_id\nand fpl.purpose_file_name = fm.purpose_name\n) t\nwhere row_num = 1\nand status = 'Copied In em_inbound folder'\nand purposename = 'EM Historical Data'\n--and response_id ='06bcaa4a-fbe6-ec11-a824-000d3a6f3f31'",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "file_metadata",
                                    "schemaname": "audit",
                                    "az_server_name": {
                                        "value": "@pipeline().parameters.server_name",
                                        "type": "Expression"
                                    },
                                    "az_sql_db": {
                                        "value": "@pipeline().parameters.database_name",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "end_etl_audit",
                        "description": "End etl audit for DQE DIA Automation for Status Completed",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "process_files",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.00:10:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "202",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": {
                                    "value": "@pipeline().parameters.Pipeline_Complete_Status",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.database_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vaulturl",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "end_etl_audit_failed",
                        "description": "End etl audit for DQE DIA Automation for Status failure",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "process_files",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.00:10:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "203",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": {
                                    "value": "@pipeline().parameters.Pipeline_Error_Status",
                                    "type": "Expression"
                                },
                                "error_description": {
                                    "value": "DQE and DIA automation Failed",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@pipeline().parameters.database_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vaulturl",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "Purposename": {
                        "type": "string",
                        "defaultValue": "EM Scoring"
                    },
                    "ContainerName": {
                        "type": "string",
                        "defaultValue": "datalanding"
                    },
                    "Audit_Type_Pipeline": {
                        "type": "string",
                        "defaultValue": "ETL"
                    },
                    "Audit_Type_File": {
                        "type": "string",
                        "defaultValue": "File"
                    },
                    "Pipeline_Start_Status": {
                        "type": "string",
                        "defaultValue": "Started"
                    },
                    "Pipeline_Complete_Status": {
                        "type": "string",
                        "defaultValue": "Completed"
                    },
                    "Pipeline_Error_Status": {
                        "type": "string",
                        "defaultValue": "Failed"
                    },
                    "File_Location_Status_DQE_Started": {
                        "type": "string",
                        "defaultValue": "Data Landing- EMInbound(DQE Started)"
                    },
                    "Area": {
                        "type": "string",
                        "defaultValue": "DataTransformation"
                    },
                    "InsertBy": {
                        "type": "string",
                        "defaultValue": "ADF_User"
                    },
                    "Inbound": {
                        "type": "string",
                        "defaultValue": "em_inbound"
                    },
                    "File_Location_Status_DQE_Completed": {
                        "type": "string",
                        "defaultValue": "Data Landing- EMInbound(DQE Completed)"
                    },
                    "audit_schemaname": {
                        "type": "string",
                        "defaultValue": "audit"
                    },
                    "file_metadata_table": {
                        "type": "string",
                        "defaultValue": "file_metadata"
                    },
                    "server_name": {
                        "type": "string",
                        "defaultValue": "rnlndpprodazsql01.database.windows.net"
                    },
                    "database_name": {
                        "type": "string",
                        "defaultValue": "NDPPRODSQLDB"
                    },
                    "vaulturl": {
                        "type": "string",
                        "defaultValue": "https://rnlndp-prodkeyvault.vault.azure.net/"
                    },
                    "storageaccountname": {
                        "type": "string",
                        "defaultValue": "rnlndpproddls"
                    },
                    "databricks_workspace_url": {
                        "type": "string",
                        "defaultValue": "https://adb-6587840185446536.16.azuredatabricks.net"
                    },
                    "databricks_clusterid": {
                        "type": "string",
                        "defaultValue": "0714-203005-9conw1v0"
                    },
                    "email_success_url": {
                        "type": "string",
                        "defaultValue": "https://prod-51.westus.logic.azure.com:443/workflows/5ebd1dba8bbb492e812b84f4e86ba426/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=1oKEwEZsA9W2ZHGi6e1ihm_4mpccHBle9UZjdW1uOkQ"
                    },
                    "email_fail_url": {
                        "type": "string",
                        "defaultValue": "https://prod-142.westus.logic.azure.com:443/workflows/5076b5f623944e73a73d414747a65c6f/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=QRg61OekEK1VZcXvQ400AcHr41s8V4BW3mqk5l_sNEM"
                    }
                },
                "variables": {
                    "ResponseId": {
                        "type": "String"
                    },
                    "PurposeIdname": {
                        "type": "String"
                    },
                    "em_staging_table_name": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "DataTransformation"
                },
                "annotations": [],
                "lastPublishTime": "2022-09-09T15:55:27Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-em-historical-dia-ds-team-modelling')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "start_etl_audit",
                        "description": "starting ETL audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "1004",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Started",
                                "database_name": {
                                    "value": "@pipeline().parameters.azure_sql_database_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.azure_sql_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vaulturl",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "end_etl_audit",
                        "description": "ending etl audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "for_each_account",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "1005",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Completed",
                                "database_name": {
                                    "value": "@pipeline().parameters.azure_sql_database_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.azure_sql_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vaulturl",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "fail_etl_audit",
                        "description": "ending etl audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "for_each_account",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "1006",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Failed",
                                "database_name": {
                                    "value": "@pipeline().parameters.azure_sql_database_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.azure_sql_server_name",
                                    "type": "Expression"
                                },
                                "error_description": {
                                    "value": "Copy from DIA to Modelling Failed",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vaulturl",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "get_account_name",
                        "type": "GetMetadata",
                        "dependsOn": [
                            {
                                "activity": "start_etl_audit",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "ds_em_historical",
                                "type": "DatasetReference",
                                "parameters": {
                                    "container": {
                                        "value": "@pipeline().parameters.container",
                                        "type": "Expression"
                                    },
                                    "file_path": {
                                        "value": "@pipeline().parameters.source_path",
                                        "type": "Expression"
                                    },
                                    "storageaccountname": {
                                        "value": "@pipeline().parameters.storageaccountname",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "fieldList": [
                                "childItems"
                            ],
                            "storeSettings": {
                                "type": "AzureBlobFSReadSettings",
                                "recursive": true,
                                "enablePartitionDiscovery": false
                            },
                            "formatSettings": {
                                "type": "DelimitedTextReadSettings"
                            }
                        }
                    },
                    {
                        "name": "for_each_account",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "get_account_name",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('get_account_name').output.childItems",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "activities": [
                                {
                                    "name": "pip-em-historical-dia-ds-team-modelling_child",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pip-em-historical-dia-ds-team-modelling_child",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "account_name": {
                                                "value": "@item().name",
                                                "type": "Expression"
                                            },
                                            "source_adls_location": {
                                                "value": "@pipeline().parameters.source_adls_location",
                                                "type": "Expression"
                                            },
                                            "destination_adls_location": {
                                                "value": "@pipeline().parameters.destination_adls_location",
                                                "type": "Expression"
                                            },
                                            "folder_list": {
                                                "value": "@pipeline().parameters.folder_list",
                                                "type": "Expression"
                                            },
                                            "search_list": {
                                                "value": "@pipeline().parameters.search_list",
                                                "type": "Expression"
                                            },
                                            "azure_sql_database_name": {
                                                "value": "@pipeline().parameters.azure_sql_database_name",
                                                "type": "Expression"
                                            },
                                            "azure_sql_server_name": {
                                                "value": "@pipeline().parameters.azure_sql_server_name",
                                                "type": "Expression"
                                            },
                                            "container": {
                                                "value": "@pipeline().parameters.container",
                                                "type": "Expression"
                                            },
                                            "source_path": {
                                                "value": "@pipeline().parameters.source_path",
                                                "type": "Expression"
                                            },
                                            "dest_path": {
                                                "value": "@pipeline().parameters.dest_path",
                                                "type": "Expression"
                                            },
                                            "modeling_folder": {
                                                "value": "@pipeline().parameters.modeling_folder",
                                                "type": "Expression"
                                            },
                                            "storageaccountname": {
                                                "value": "@pipeline().parameters.storageaccountname",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "source_adls_location": {
                        "type": "string",
                        "defaultValue": "prodsynapse/em_historical_data/DIA DS team"
                    },
                    "destination_adls_location": {
                        "type": "string",
                        "defaultValue": "prodsynapse/em_historical_data/Modelling"
                    },
                    "folder_list": {
                        "type": "array",
                        "defaultValue": [
                            "Inquiry",
                            "Search",
                            "Prospect",
                            "Admit",
                            "Applicant"
                        ]
                    },
                    "search_list": {
                        "type": "array",
                        "defaultValue": [
                            "INQ",
                            "SEA",
                            "PRO",
                            "ADM",
                            "APP"
                        ]
                    },
                    "azure_sql_database_name": {
                        "type": "string",
                        "defaultValue": "NDPPRODSQLDB"
                    },
                    "azure_sql_server_name": {
                        "type": "string",
                        "defaultValue": "rnlndpprodazsql01.database.windows.net"
                    },
                    "container": {
                        "type": "string",
                        "defaultValue": "prodsynapse"
                    },
                    "source_path": {
                        "type": "string",
                        "defaultValue": "em_historical_data/DIA DS team"
                    },
                    "dest_path": {
                        "type": "string",
                        "defaultValue": "em_historical_data"
                    },
                    "modeling_folder": {
                        "type": "string",
                        "defaultValue": "Modeling"
                    },
                    "databricks_workspace_url": {
                        "type": "string",
                        "defaultValue": "https://adb-6587840185446536.16.azuredatabricks.net"
                    },
                    "databricks_clusterid": {
                        "type": "string",
                        "defaultValue": "0714-203005-9conw1v0"
                    },
                    "vaulturl": {
                        "type": "string",
                        "defaultValue": "https://rnlndp-prodkeyvault.vault.azure.net/"
                    },
                    "storageaccountname": {
                        "type": "string",
                        "defaultValue": "rnlndpproddls"
                    }
                },
                "folder": {
                    "name": "DataTransformation"
                },
                "annotations": [],
                "lastPublishTime": "2022-08-22T19:58:22Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-CreateSftpFolders')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "ForEach1",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Lookup for newly added account",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Lookup for newly added account').output.value",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 10,
                            "activities": [
                                {
                                    "name": "Execute create folders in sftp pipeine",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pip-copy-and-delete-dummyfile",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "folder": {
                                                "value": "@item().Folder",
                                                "type": "Expression"
                                            },
                                            "subfolder": {
                                                "value": "@item().Subfolder",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Lookup for newly added account",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "select *   from lkp.account \r\nwhere status like '%new%'",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_azure_sql",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "account",
                                    "schemaname": "lkp",
                                    "az_server_name": "rnlndpprodazsql01.database.windows.net",
                                    "az_sql_db": "NDPPRODSQLDB"
                                }
                            },
                            "firstRowOnly": false
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "variables": {
                    "item": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Datalanding"
                },
                "annotations": [],
                "lastPublishTime": "2022-11-22T01:15:55Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-master-crm-to-crmsynapse-powerbi-load')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "load-crm-to-crmsynapse",
                        "description": "Executing load-crm-to-crmsynapse",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "start_etl_audit",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "pip-crm-to-crmsynapse-powerbi-load",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "parent_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "crm_servername": {
                                    "value": "@pipeline().parameters.crm_servername",
                                    "type": "Expression"
                                },
                                "crm_dbname": {
                                    "value": "@pipeline().parameters.crm_dbname",
                                    "type": "Expression"
                                },
                                "crm_username": {
                                    "value": "@pipeline().parameters.crm_username",
                                    "type": "Expression"
                                },
                                "vaulturl": {
                                    "value": "@pipeline().parameters.vaulturl",
                                    "type": "Expression"
                                },
                                "storageaccountname": {
                                    "value": "@pipeline().parameters.storageaccountname",
                                    "type": "Expression"
                                },
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "az_sql_server_name": {
                                    "value": "@pipeline().parameters.az_sql_server_name",
                                    "type": "Expression"
                                },
                                "az_sql_db_name": {
                                    "value": "@pipeline().parameters.az_sql_db_name",
                                    "type": "Expression"
                                },
                                "az_synapse_crm_server": {
                                    "value": "@pipeline().parameters.az_synapse_crm_server",
                                    "type": "Expression"
                                },
                                "az_synapse_crm_db": {
                                    "value": "@pipeline().parameters.az_synapse_crm_db",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "start_etl_audit",
                        "description": "starting ETL audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "801",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Started",
                                "database_name": {
                                    "value": "@pipeline().parameters.az_sql_db_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.az_sql_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vaulturl",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "end_etl_audit",
                        "description": "ending etl audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "load-crm-to-crmsynapse",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "802",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Completed",
                                "database_name": {
                                    "value": "@pipeline().parameters.az_sql_db_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.az_sql_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vaulturl",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "fail_etl_audit",
                        "description": "ending etl audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "load-crm-to-crmsynapse",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "803",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Failed",
                                "database_name": {
                                    "value": "@pipeline().parameters.az_sql_db_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.az_sql_server_name",
                                    "type": "Expression"
                                },
                                "error_description": {
                                    "value": "@activity('load-crm-to-crmsynapse').Error.Message",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vaulturl",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "concurrency": 3,
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "crm_servername": {
                        "type": "string",
                        "defaultValue": "10.200.0.22"
                    },
                    "crm_dbname": {
                        "type": "string",
                        "defaultValue": "RNLMAP_MSCRM"
                    },
                    "crm_username": {
                        "type": "string",
                        "defaultValue": "svc_az_ndp"
                    },
                    "vaulturl": {
                        "type": "string",
                        "defaultValue": "https://rnlndp-prodkeyvault.vault.azure.net/"
                    },
                    "storageaccountname": {
                        "type": "string",
                        "defaultValue": "rnlndpproddls"
                    },
                    "databricks_workspace_url": {
                        "type": "string",
                        "defaultValue": "https://adb-6587840185446536.16.azuredatabricks.net"
                    },
                    "databricks_clusterid": {
                        "type": "string",
                        "defaultValue": "0714-203005-9conw1v0"
                    },
                    "az_sql_server_name": {
                        "type": "string",
                        "defaultValue": "rnlndpprodazsql01.database.windows.net"
                    },
                    "az_sql_db_name": {
                        "type": "string",
                        "defaultValue": "NDPPRODSQLDB"
                    },
                    "az_synapse_crm_server": {
                        "type": "string",
                        "defaultValue": "rnlndpprodcrmsynapse.sql.azuresynapse.net"
                    },
                    "az_synapse_crm_db": {
                        "type": "string",
                        "defaultValue": "NDPPRODCRMPL1"
                    }
                },
                "folder": {
                    "name": "crm-To-Crmsynapse-Powerbi"
                },
                "annotations": [],
                "lastPublishTime": "2022-11-04T10:23:30Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-master-data-archive')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "pip_data_archive",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "start_etl_audit",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "pip-data-archive",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "parent_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "azure_sql_server_name": {
                                    "value": "@pipeline().parameters.azure_sql_server_name",
                                    "type": "Expression"
                                },
                                "azure_sql_database_name": {
                                    "value": "@pipeline().parameters.azure_sql_database_name",
                                    "type": "Expression"
                                },
                                "az_synapse_crm_server": {
                                    "value": "@pipeline().parameters.az_synapse_crm_server",
                                    "type": "Expression"
                                },
                                "az_synapse_crm_db": {
                                    "value": "@pipeline().parameters.az_synapse_crm_db",
                                    "type": "Expression"
                                },
                                "storage_account_name": {
                                    "value": "@pipeline().parameters.storage_account_name",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "start_etl_audit",
                        "description": "starting ETL audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "1401",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Started",
                                "database_name": {
                                    "value": "@pipeline().parameters.azure_sql_database_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.azure_sql_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "email_successful",
                        "description": "email if pipeline is successful",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "end_etl_audit",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": "https://prod-39.westus.logic.azure.com:443/workflows/569f4cf14ffc48c88e03575c2647b43c/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=0XIlAF9IC9mIoNbZy8x_S5OeftdZRu2qCspFViTMvmg",
                            "method": "POST",
                            "headers": {
                                "Content-Type": "application/json"
                            },
                            "body": {
                                "value": "{\n\"DataFactoryName\": \"@{pipeline().DataFactory}\",\n\"EmailTo\": \"ganesh.gawli@ruffalonl.com\",\n\"PipelineName\": \"@{pipeline().Pipeline}\",\n\"Subject\": \"CRM Alignment-to-CRM Successful\"\n}",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "email_failed",
                        "description": "email if pipeline is failed",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "fail_etl_audit",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": "https://prod-09.westus.logic.azure.com:443/workflows/3e55590a66a2432499da688768114096/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=Xoomukni4mykLJ2j4wouBPltdM89UiVuE8dtanx5L1A",
                            "method": "POST",
                            "headers": {
                                "Content-Type": "application/json"
                            },
                            "body": {
                                "value": "{\n\"DataFactoryName\": \"@{pipeline().DataFactory}\",\n\"EmailTo\": \"ganesh.gawli@ruffalonl.com\",\n\"ErrorMessage\": \"'pip-load-alignment-to-CRM' Pipeline is failed\",\n\"PipelineName\": \"@{pipeline().Pipeline}\",\n\"Subject\": \"An error has occurred!\",\n\"ActivityName\": \"\"\n}",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "end_etl_audit",
                        "description": "ending etl audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "pip_data_archive",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "1402",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Completed",
                                "database_name": {
                                    "value": "@pipeline().parameters.azure_sql_database_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.azure_sql_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "fail_etl_audit",
                        "description": "ending etl audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "pip_data_archive",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "1403",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Failed",
                                "database_name": {
                                    "value": "@pipeline().parameters.azure_sql_database_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.azure_sql_server_name",
                                    "type": "Expression"
                                },
                                "error_description": {
                                    "value": "@activity('pip_data_archive').error.message",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "azure_sql_database_name": {
                        "type": "string",
                        "defaultValue": "NDPPRODSQLDB"
                    },
                    "azure_sql_server_name": {
                        "type": "string",
                        "defaultValue": "rnlndpprodazsql01.database.windows.net"
                    },
                    "databricks_workspace_url": {
                        "type": "string",
                        "defaultValue": "https://adb-6587840185446536.16.azuredatabricks.net"
                    },
                    "databricks_clusterid": {
                        "type": "string",
                        "defaultValue": "0714-203005-9conw1v0"
                    },
                    "vault_url": {
                        "type": "string",
                        "defaultValue": "https://rnlndp-prodkeyvault.vault.azure.net/"
                    },
                    "az_synapse_crm_db": {
                        "type": "string",
                        "defaultValue": "NDPPRODCRMPL1"
                    },
                    "az_synapse_crm_server": {
                        "type": "string",
                        "defaultValue": "rnlndpprodcrmsynapse.sql.azuresynapse.net"
                    },
                    "storage_account_name": {
                        "type": "string",
                        "defaultValue": "rnlndpproddls"
                    }
                },
                "folder": {
                    "name": "data-Archive"
                },
                "annotations": [],
                "lastPublishTime": "2022-09-09T15:46:36Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/test_search_vendor')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Data flow1",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "df_em_searchvendor_appendheader",
                                "type": "DataFlowReference",
                                "parameters": {
                                    "DestinationFileName": {
                                        "value": "'College Board_47080DF8-2B1E-ED11-A86B-000D3A075A33_09152022.csv'",
                                        "type": "Expression"
                                    }
                                },
                                "datasetParameters": {
                                    "Header": {
                                        "Container": "datalanding",
                                        "FilePath": "searchvendor",
                                        "FileName": "CollegeBoard_Header.csv",
                                        "storageaccountname": "rnlndpproddls"
                                    },
                                    "Values": {
                                        "Container": "datalanding",
                                        "FilePath": "raw/raw_archived/EM/EM Search Vendor Data/2022/09/13/udel/College Board",
                                        "FileName": "UDelaware23ACP1CBms.csv",
                                        "storageaccountname": "rnlndpproddls"
                                    },
                                    "Sink": {
                                        "Container": "datalanding",
                                        "FilePath": "raw/raw_archived/EM/EM Search Vendor Data/2022/09/13/udel/College Board",
                                        "FileName": "failed.csv",
                                        "storageaccountname": "rnlndpproddls"
                                    }
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "annotations": [],
                "lastPublishTime": "2022-09-21T18:23:31Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-fplus-reverse-flow_azml')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Final Extract to SFTP",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Extract Sas Score to FPlus",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "pip-finalextract-to-sftp_azure",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "UncPath": {
                                    "value": "@pipeline().parameters.UncPath",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.az_sql_server_name",
                                    "type": "Expression"
                                },
                                "database_name": {
                                    "value": "@variables('azure_sql_database_name')",
                                    "type": "Expression"
                                },
                                "az_synapse_crm_server": {
                                    "value": "@pipeline().parameters.az_synapse_crm_server",
                                    "type": "Expression"
                                },
                                "az_synapse_crm_db": {
                                    "value": "@pipeline().parameters.az_synapse_crm_db",
                                    "type": "Expression"
                                },
                                "fplus_host": {
                                    "value": "@pipeline().parameters.fplus_host",
                                    "type": "Expression"
                                },
                                "fplus_username": {
                                    "value": "@pipeline().parameters.fplus_username",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                },
                                "rnl_sftp_host": {
                                    "value": "@pipeline().parameters.rnl_sftp_host",
                                    "type": "Expression"
                                },
                                "rnl_sftp_username": {
                                    "value": "@pipeline().parameters.rnl_sftp_username",
                                    "type": "Expression"
                                },
                                "storageaccountname": {
                                    "value": "@pipeline().parameters.storageaccountname",
                                    "type": "Expression"
                                },
                                "crm_servername": {
                                    "value": "@pipeline().parameters.crm_servername",
                                    "type": "Expression"
                                },
                                "crm_dbname": {
                                    "value": "@pipeline().parameters.crm_dbname",
                                    "type": "Expression"
                                },
                                "crm_username": {
                                    "value": "@pipeline().parameters.crm_username",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "Extract Sas Score to FPlus",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "ETL Audit - Start",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "pip_export_sas_to_db_crm_azure",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "az_sql_server_name": {
                                    "value": "@pipeline().parameters.az_sql_server_name",
                                    "type": "Expression"
                                },
                                "az_sql_db_name": {
                                    "value": "@pipeline().parameters.az_sql_db_name",
                                    "type": "Expression"
                                },
                                "softscore_root": {
                                    "value": "@pipeline().parameters.softscore_root",
                                    "type": "Expression"
                                },
                                "container": {
                                    "value": "@pipeline().parameters.synapsecontainer",
                                    "type": "Expression"
                                },
                                "softscore_adls": {
                                    "value": "@pipeline().parameters.softscore_adls",
                                    "type": "Expression"
                                },
                                "az_synapse_crm_server": {
                                    "value": "@pipeline().parameters.az_synapse_crm_server",
                                    "type": "Expression"
                                },
                                "az_synapse_crm_db": {
                                    "value": "@pipeline().parameters.az_synapse_crm_db",
                                    "type": "Expression"
                                },
                                "fplus_host": {
                                    "value": "@pipeline().parameters.fplus_host",
                                    "type": "Expression"
                                },
                                "fplus_username": {
                                    "value": "@pipeline().parameters.fplus_username",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                },
                                "storageaccountname": {
                                    "value": "@pipeline().parameters.storageaccountname",
                                    "type": "Expression"
                                },
                                "crm_servername": {
                                    "value": "@pipeline().parameters.crm_servername",
                                    "type": "Expression"
                                },
                                "crm_dbname": {
                                    "value": "@pipeline().parameters.crm_dbname",
                                    "type": "Expression"
                                },
                                "crm_username": {
                                    "value": "@pipeline().parameters.crm_username",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "fail_etl_audit_sas",
                        "description": "ending etl audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "Extract Sas Score to FPlus",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "1306",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Failed",
                                "database_name": {
                                    "value": "@variables('azure_sql_database_name')",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@variables('azure_sql_server_name')",
                                    "type": "Expression"
                                },
                                "error_description": {
                                    "value": "@activity('Extract Sas Score to FPlus').Error.Message",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "fail_etl_audit_sftp_extract",
                        "description": "ending etl audit",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "Final Extract to SFTP",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "1306",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Failed",
                                "database_name": {
                                    "value": "@variables('azure_sql_database_name')",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@variables('azure_sql_server_name')",
                                    "type": "Expression"
                                },
                                "error_description": {
                                    "value": "@activity('Final Extract to SFTP').Error.Message",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "email_failed_1",
                        "description": "email if pipeline is failed",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "fail_etl_audit_sas",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@pipeline().parameters.EmailFailure",
                                "type": "Expression"
                            },
                            "connectVia": {
                                "referenceName": "AutoResolveIntegrationRuntime",
                                "type": "IntegrationRuntimeReference"
                            },
                            "method": "POST",
                            "headers": {
                                "Content-Type": "application/json"
                            },
                            "body": {
                                "value": "{\n\"DataFactoryName\": \"@{pipeline().DataFactory}\",\n\"EmailTo\": \"ganesh.gawli@ruffalonl.com\",\n\"ErrorMessage\": \"'pip-fplus-reverse-flow' Pipeline is failed\",\n\"PipelineName\": \"@{pipeline().Pipeline}\",\n\"Subject\": \"An error has occurred!\",\n\"ActivityName\": \"\"\n}",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "email_failed_2",
                        "description": "email if pipeline is failed",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "fail_etl_audit_sftp_extract",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@pipeline().parameters.EmailFailure",
                                "type": "Expression"
                            },
                            "connectVia": {
                                "referenceName": "AutoResolveIntegrationRuntime",
                                "type": "IntegrationRuntimeReference"
                            },
                            "method": "POST",
                            "headers": {
                                "Content-Type": "application/json"
                            },
                            "body": {
                                "value": "{\n\"DataFactoryName\": \"@{pipeline().DataFactory}\",\n\"EmailTo\": \"ganesh.gawli@ruffalonl.com\",\n\"ErrorMessage\": \"'pip-fplus-reverse-flow' Pipeline is failed\",\n\"PipelineName\": \"@{pipeline().Pipeline}\",\n\"Subject\": \"An error has occurred!\",\n\"ActivityName\": \"\"\n}",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "email_successful",
                        "description": "email if pipeline is successful",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "ETL Audit - End",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@pipeline().parameters.EmailSuccess",
                                "type": "Expression"
                            },
                            "connectVia": {
                                "referenceName": "AutoResolveIntegrationRuntime",
                                "type": "IntegrationRuntimeReference"
                            },
                            "method": "POST",
                            "headers": {
                                "Content-Type": "application/json"
                            },
                            "body": {
                                "value": "{\n\"DataFactoryName\": \"@{pipeline().DataFactory}\",\n\"EmailTo\": \"ganesh.gawli@ruffalonl.com\",\n\"PipelineName\": \"@{pipeline().Pipeline}\",\n\"Subject\": \"pip-fplus-reverse-flow Pipeline Successful\"\n}",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "ETL Audit - Start",
                        "type": "DatabricksNotebook",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "1304",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Started",
                                "database_name": {
                                    "value": "@pipeline().parameters.az_sql_db_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.az_sql_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    },
                    {
                        "name": "ETL Audit - End",
                        "type": "DatabricksNotebook",
                        "dependsOn": [
                            {
                                "activity": "Final Extract to SFTP",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                            "baseParameters": {
                                "audit_id": "1305",
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "pipeline_status": "Completed",
                                "database_name": {
                                    "value": "@pipeline().parameters.az_sql_db_name",
                                    "type": "Expression"
                                },
                                "server_name": {
                                    "value": "@pipeline().parameters.az_sql_server_name",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "databricks_workspace_url": {
                        "type": "string",
                        "defaultValue": "https://adb-6587840185446536.16.azuredatabricks.net"
                    },
                    "databricks_clusterid": {
                        "type": "string",
                        "defaultValue": "0714-203005-9conw1v0"
                    },
                    "az_sql_server_name": {
                        "type": "string",
                        "defaultValue": "rnlndpprodazsql01.database.windows.net"
                    },
                    "az_sql_db_name": {
                        "type": "string",
                        "defaultValue": "NDPPRODSQLDB"
                    },
                    "vault_url": {
                        "type": "string",
                        "defaultValue": "https://rnlndp-prodkeyvault.vault.azure.net/"
                    },
                    "EmailSuccess": {
                        "type": "string",
                        "defaultValue": "https://prod-51.westus.logic.azure.com:443/workflows/5ebd1dba8bbb492e812b84f4e86ba426/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=1oKEwEZsA9W2ZHGi6e1ihm_4mpccHBle9UZjdW1uOkQ"
                    },
                    "EmailFailure": {
                        "type": "string",
                        "defaultValue": "https://prod-142.westus.logic.azure.com:443/workflows/5076b5f623944e73a73d414747a65c6f/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=QRg61OekEK1VZcXvQ400AcHr41s8V4BW3mqk5l_sNEM"
                    },
                    "az_synapse_crm_server": {
                        "type": "string",
                        "defaultValue": "rnlndpprodcrmsynapse.sql.azuresynapse.net"
                    },
                    "az_synapse_crm_db": {
                        "type": "string",
                        "defaultValue": "NDPPRODCRMPL1"
                    },
                    "fplus_host": {
                        "type": "string",
                        "defaultValue": "\\\\10.3.30.67\\SoftScore"
                    },
                    "fplus_username": {
                        "type": "string",
                        "defaultValue": "RNLWINSASCOMP1\\svc_prod_fqt"
                    },
                    "storageaccountname": {
                        "type": "string",
                        "defaultValue": "rnlndpproddls"
                    },
                    "crm_servername": {
                        "type": "string",
                        "defaultValue": "10.26.0.22"
                    },
                    "crm_dbname": {
                        "type": "string",
                        "defaultValue": "RNLMAPQA_MSCRM"
                    },
                    "crm_username": {
                        "type": "string",
                        "defaultValue": "svc_az_ndp"
                    },
                    "softscore_root": {
                        "type": "string",
                        "defaultValue": "SoftScore/UAT"
                    },
                    "synapsecontainer": {
                        "type": "string",
                        "defaultValue": "prodcrmsynapse"
                    },
                    "softscore_adls": {
                        "type": "string",
                        "defaultValue": "SoftScoreAZML"
                    },
                    "UncPath": {
                        "type": "string",
                        "defaultValue": "/FileShare$/SmartData/DEV/Final Customer Extract/"
                    },
                    "rnl_sftp_host": {
                        "type": "string",
                        "defaultValue": "SFTP.RuffaloNL.com"
                    },
                    "rnl_sftp_username": {
                        "type": "string",
                        "defaultValue": "Brillio_rnl"
                    }
                },
                "variables": {
                    "azure_sql_server_name": {
                        "type": "String",
                        "defaultValue": "rnlndpuatazsql01.database.windows.net"
                    },
                    "azure_sql_database_name": {
                        "type": "String",
                        "defaultValue": "NDPUATSQLDB"
                    }
                },
                "folder": {
                    "name": "F+/Reverse Flow"
                },
                "annotations": [],
                "lastPublishTime": "2022-09-27T12:24:34Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-sftp-file-validation-raw-to-em_inbound_bkp_06102022')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "File Validation",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "File_HealthCheck",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@and(greater(activity('File_HealthCheck').output.runOutput[0],0),equals(pipeline().parameters.RowsRead,pipeline().parameters.RowsWritten))",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Delete file from Raw_Folder",
                                    "type": "Delete",
                                    "dependsOn": [
                                        {
                                            "activity": "Copy File From Raw To Reject Folder",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "ds_raw_file",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "foldername": {
                                                    "value": "@concat('raw/',split(pipeline().parameters.PurposeName,' ')[0],'/',pipeline().parameters.PurposeName,'/',formatDateTime(utcnow(), 'yyyy'),'/',formatDateTime(utcnow(), 'MM'), '/', formatDateTime(utcnow(), 'dd'),'/',pipeline().parameters.AccountName)",
                                                    "type": "Expression"
                                                },
                                                "filename": {
                                                    "value": "@pipeline().parameters.SftpFileName",
                                                    "type": "Expression"
                                                },
                                                "storageaccountname": {
                                                    "value": "@pipeline().parameters.containerName",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "enableLogging": false,
                                        "storeSettings": {
                                            "type": "AzureBlobFSReadSettings",
                                            "recursive": false,
                                            "enablePartitionDiscovery": false
                                        }
                                    }
                                },
                                {
                                    "name": "Copy File From Raw To Reject Folder",
                                    "type": "ExecuteDataFlow",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "1.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataflow": {
                                            "referenceName": "df_PIFileCopy",
                                            "type": "DataFlowReference",
                                            "parameters": {
                                                "Destinationfilename": {
                                                    "value": "'@{pipeline().parameters.SftpFileName}'",
                                                    "type": "Expression"
                                                }
                                            },
                                            "datasetParameters": {
                                                "FileSource": {
                                                    "Containername": {
                                                        "value": "@pipeline().parameters.containerName",
                                                        "type": "Expression"
                                                    },
                                                    "Filepath": {
                                                        "value": "@concat('raw/',split(pipeline().parameters.PurposeName,' ')[0],'/',pipeline().parameters.PurposeName,'/',formatDateTime(utcnow(), 'yyyy'),'/',formatDateTime(utcnow(), 'MM'), '/', formatDateTime(utcnow(), 'dd'),'/',pipeline().parameters.AccountName)",
                                                        "type": "Expression"
                                                    },
                                                    "Filename": {
                                                        "value": "@pipeline().parameters.SftpFileName",
                                                        "type": "Expression"
                                                    },
                                                    "storageaccountname": {
                                                        "value": "@pipeline().parameters.adlsName",
                                                        "type": "Expression"
                                                    }
                                                },
                                                "FileDestination": {
                                                    "Containername": {
                                                        "value": "@pipeline().parameters.containerName",
                                                        "type": "Expression"
                                                    },
                                                    "Filepath": "raw/rejected",
                                                    "Filename": {
                                                        "value": "@pipeline().parameters.SftpFileName",
                                                        "type": "Expression"
                                                    },
                                                    "storageaccountname": {
                                                        "value": "@pipeline().parameters.adlsName",
                                                        "type": "Expression"
                                                    }
                                                }
                                            }
                                        },
                                        "staging": {},
                                        "compute": {
                                            "coreCount": 8,
                                            "computeType": "General"
                                        },
                                        "traceLevel": "Fine"
                                    }
                                },
                                {
                                    "name": "Email - File Validation Failed",
                                    "type": "WebActivity",
                                    "dependsOn": [
                                        {
                                            "activity": "File Audit - Raw To Reject",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "url": {
                                            "value": "@pipeline().parameters.EmailFailure",
                                            "type": "Expression"
                                        },
                                        "connectVia": {
                                            "referenceName": "AutoResolveIntegrationRuntime",
                                            "type": "IntegrationRuntimeReference"
                                        },
                                        "method": "POST",
                                        "headers": {
                                            "Content-Type": "application/json"
                                        },
                                        "body": {
                                            "value": "{\n\"DataFactoryName\": \"@{pipeline().DataFactory}\",\n\"EmailTo\": \"ganesh.gawli@ruffalonl.com\",\n\"ErrorMessage\": \"File Validation Failed and File Moved to Reject Folder\",\n\"PipelineName\": \"@{pipeline().Pipeline}\",\n\"Subject\": \"An error has occurred!\",\n\"ActivityName\": \"\"\n}",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "ETL Audit-Copy Failed Raw to Reject",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [
                                        {
                                            "activity": "Copy File From Raw To Reject Folder",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                                        "baseParameters": {
                                            "audit_id": "107",
                                            "adf_run_id": {
                                                "value": "@pipeline().parameters.ParentPipelineRunID",
                                                "type": "Expression"
                                            },
                                            "adf_pipeline_name": {
                                                "value": "@pipeline().parameters.ParentPipelineName",
                                                "type": "Expression"
                                            },
                                            "adf_trigger_name": {
                                                "value": "@pipeline().parameters.ParentPipelineTriggerName",
                                                "type": "Expression"
                                            },
                                            "pipeline_status": "Failed",
                                            "error_description": {
                                                "value": "@activity('Copy File From Raw To Reject Folder').output.errors[0].Message",
                                                "type": "Expression"
                                            },
                                            "server_name": {
                                                "value": "@pipeline().parameters.az_sql_server_name",
                                                "type": "Expression"
                                            },
                                            "database_name": {
                                                "value": "@pipeline().parameters.az_sql_db_name",
                                                "type": "Expression"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_NDPdatabricks",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "File Audit - Raw To Reject",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [
                                        {
                                            "activity": "Delete file from Raw_Folder",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": "/audit-Framework/dbn-file-processing-log",
                                        "baseParameters": {
                                            "audit_id": "104",
                                            "adf_run_id": {
                                                "value": "@pipeline().parameters.ParentPipelineRunID",
                                                "type": "Expression"
                                            },
                                            "response_id": {
                                                "value": "@pipeline().parameters.NewResponseID",
                                                "type": "Expression"
                                            },
                                            "purpose_file_name": {
                                                "value": "@pipeline().parameters.PurposeName",
                                                "type": "Expression"
                                            },
                                            "account_name": {
                                                "value": "@pipeline().parameters.AccountName",
                                                "type": "Expression"
                                            },
                                            "file_processing_stage": "Rejected",
                                            "status": "Copied In rejected Folder",
                                            "row_count": {
                                                "value": "@string(activity('Copy File From Raw To Reject Folder').output.runstatus.metrics.FileDestination.rowsWritten)",
                                                "type": "Expression"
                                            },
                                            "rejected_row": {
                                                "value": "@string(activity('Copy File From Raw To Reject Folder').output.runstatus.metrics.FileDestination.rowsWritten)",
                                                "type": "Expression"
                                            },
                                            "mapping_id": {
                                                "value": "@pipeline().parameters.NewFileUploadMappingID",
                                                "type": "Expression"
                                            },
                                            "server_name": {
                                                "value": "@pipeline().parameters.az_sql_server_name",
                                                "type": "Expression"
                                            },
                                            "database_name": {
                                                "value": "@pipeline().parameters.az_sql_db_name",
                                                "type": "Expression"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_NDPdatabricks",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "File Rename",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "File_metadata_details",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "FileNameModified",
                                        "value": {
                                            "value": "@concat(replace(pipeline().parameters.PurposeName,' ',''),'_',pipeline().parameters.AccountName,'_',string(formatDateTime(convertTimeZone(utcnow(),'UTC','Eastern Standard Time'),'yyyyMMddHHmmssffff')),'.csv')",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Generate New Response",
                                    "type": "Copy",
                                    "dependsOn": [
                                        {
                                            "activity": "File Rename",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "SqlServerSource",
                                            "additionalColumns": [
                                                {
                                                    "name": "newresponseid",
                                                    "value": {
                                                        "value": "@pipeline().parameters.NewResponseID",
                                                        "type": "Expression"
                                                    }
                                                },
                                                {
                                                    "name": "Response Name",
                                                    "value": {
                                                        "value": "@concat('From UNC Path-',pipeline().parameters.OriginalName)",
                                                        "type": "Expression"
                                                    }
                                                },
                                                {
                                                    "name": "new_populatemappeddata",
                                                    "value": "False"
                                                },
                                                {
                                                    "name": "new_podata",
                                                    "value": {
                                                        "value": "{\"account\":\"@{pipeline().parameters.AccountID}\",\"product\":\"da724394-befc-e911-a82a-000d3a075a33\",\"purpose1\":\" @{variables('PurposeID')} \",\"file\":[{\"name\":\"@{pipeline().parameters.OriginalName}\",\"type\":\"application/vnd.ms-excel\",\"content\":\"data:application/vnd.ms-excel;base64\"}],\"fileNameStr1\":\" @{pipeline().parameters.OriginalName}\",\"@{variables('ScoringInfo')}\"}",
                                                        "type": "Expression"
                                                    }
                                                }
                                            ],
                                            "sqlReaderQuery": {
                                                "value": "select f.popb_data [file_data],f.popb_purposeid [file_purposeid], f.statuscode [file_statuscode],f.statecode [file_statecode], r.* from popb_responsesbase r\ninner join popb_fileuploadmappingBase f on f.popb_responseid=r.popb_responsesId where popb_responsesid='@{pipeline().parameters.ResponseID}'",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "sink": {
                                            "type": "DynamicsCrmSink",
                                            "writeBatchSize": 10,
                                            "writeBehavior": "upsert",
                                            "ignoreNullValues": false
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "mappings": [
                                                {
                                                    "source": {
                                                        "name": "popb_contact",
                                                        "type": "Guid",
                                                        "physicalType": "uniqueidentifier"
                                                    },
                                                    "sink": {
                                                        "name": "popb_contact",
                                                        "type": "Guid"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "popb_customer",
                                                        "type": "Guid",
                                                        "physicalType": "uniqueidentifier"
                                                    },
                                                    "sink": {
                                                        "name": "popb_customer",
                                                        "type": "Guid"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "new_podata"
                                                    },
                                                    "sink": {
                                                        "name": "popb_data",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "Response Name"
                                                    },
                                                    "sink": {
                                                        "name": "popb_name",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "new_populatemappeddata"
                                                    },
                                                    "sink": {
                                                        "name": "popb_populatemappeddata",
                                                        "type": "Boolean"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "popb_portal",
                                                        "type": "Guid",
                                                        "physicalType": "uniqueidentifier"
                                                    },
                                                    "sink": {
                                                        "name": "popb_portal",
                                                        "type": "Guid"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "popb_questionnaire",
                                                        "type": "Guid",
                                                        "physicalType": "uniqueidentifier"
                                                    },
                                                    "sink": {
                                                        "name": "popb_questionnaire",
                                                        "type": "Guid"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "newresponseid"
                                                    },
                                                    "sink": {
                                                        "name": "popb_responsesid",
                                                        "type": "Guid"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "popb_updateanswersandmapping",
                                                        "type": "Boolean",
                                                        "physicalType": "bit"
                                                    },
                                                    "sink": {
                                                        "name": "popb_updateanswersandmapping",
                                                        "type": "Boolean"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "statecode",
                                                        "type": "Int32",
                                                        "physicalType": "int"
                                                    },
                                                    "sink": {
                                                        "name": "statecode",
                                                        "type": "Int32"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "statuscode",
                                                        "type": "Int32",
                                                        "physicalType": "int"
                                                    },
                                                    "sink": {
                                                        "name": "statuscode",
                                                        "type": "Int32"
                                                    }
                                                }
                                            ],
                                            "typeConversion": true,
                                            "typeConversionSettings": {
                                                "allowDataTruncation": true,
                                                "treatBooleanAsNumber": false
                                            }
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "ds_appboostCRM_sql",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "crm_servername": {
                                                    "value": "@pipeline().parameters.crm_servername",
                                                    "type": "Expression"
                                                },
                                                "crm_dbname": {
                                                    "value": "@pipeline().parameters.crm_dbname",
                                                    "type": "Expression"
                                                },
                                                "crm_username": {
                                                    "value": "@pipeline().parameters.crm_username",
                                                    "type": "Expression"
                                                },
                                                "vaulturl": {
                                                    "value": "@pipeline().parameters.vault_url",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "ds_ResponseBase",
                                            "type": "DatasetReference",
                                            "parameters": {}
                                        }
                                    ]
                                },
                                {
                                    "name": "Generate New FileUploadMapping",
                                    "type": "Copy",
                                    "dependsOn": [
                                        {
                                            "activity": "Generate New Response",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "SqlServerSource",
                                            "additionalColumns": [
                                                {
                                                    "name": "NewFileUploadMappingID",
                                                    "value": {
                                                        "value": "@pipeline().parameters.NewFileUploadMappingID",
                                                        "type": "Expression"
                                                    }
                                                },
                                                {
                                                    "name": "FileUploadMappingName",
                                                    "value": {
                                                        "value": "@concat('From UNC Path-', pipeline().parameters.OriginalName)",
                                                        "type": "Expression"
                                                    }
                                                },
                                                {
                                                    "name": "OriginalFileName",
                                                    "value": {
                                                        "value": "@pipeline().parameters.OriginalName",
                                                        "type": "Expression"
                                                    }
                                                },
                                                {
                                                    "name": "NewResponseID",
                                                    "value": {
                                                        "value": "@pipeline().parameters.NewResponseID",
                                                        "type": "Expression"
                                                    }
                                                }
                                            ],
                                            "sqlReaderQuery": {
                                                "value": "select f.popb_data [file_data],f.popb_purposeid [file_purposeid], f.statuscode [file_statuscode],f.statecode [file_statecode], r.* from popb_responsesbase r\ninner join popb_fileuploadmappingBase f on f.popb_responseid=r.popb_responsesId where popb_responsesid='@{pipeline().parameters.ResponseID}'",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "sink": {
                                            "type": "DynamicsCrmSink",
                                            "writeBatchSize": 10,
                                            "writeBehavior": "upsert",
                                            "ignoreNullValues": false
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "mappings": [
                                                {
                                                    "source": {
                                                        "name": "file_data",
                                                        "type": "String",
                                                        "physicalType": "nvarchar"
                                                    },
                                                    "sink": {
                                                        "name": "popb_data",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "NewFileUploadMappingID"
                                                    },
                                                    "sink": {
                                                        "name": "popb_fileuploadmappingid",
                                                        "type": "Guid"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "FileUploadMappingName"
                                                    },
                                                    "sink": {
                                                        "name": "popb_name",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "file_purposeid",
                                                        "type": "Guid",
                                                        "physicalType": "uniqueidentifier"
                                                    },
                                                    "sink": {
                                                        "name": "popb_purposeid",
                                                        "type": "Guid"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "NewResponseID"
                                                    },
                                                    "sink": {
                                                        "name": "popb_responseid",
                                                        "type": "Guid"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "OriginalFileName"
                                                    },
                                                    "sink": {
                                                        "name": "popb_uploadedfilename",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "file_statecode",
                                                        "type": "Int32",
                                                        "physicalType": "int"
                                                    },
                                                    "sink": {
                                                        "name": "statecode",
                                                        "type": "Int32"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "file_statuscode",
                                                        "type": "Int32",
                                                        "physicalType": "int"
                                                    },
                                                    "sink": {
                                                        "name": "statuscode",
                                                        "type": "Int32"
                                                    }
                                                }
                                            ],
                                            "typeConversion": true,
                                            "typeConversionSettings": {
                                                "allowDataTruncation": true,
                                                "treatBooleanAsNumber": false
                                            }
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "ds_appboostCRM_sql",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "crm_servername": {
                                                    "value": "@pipeline().parameters.crm_servername",
                                                    "type": "Expression"
                                                },
                                                "crm_dbname": {
                                                    "value": "@pipeline().parameters.crm_dbname",
                                                    "type": "Expression"
                                                },
                                                "crm_username": {
                                                    "value": "@pipeline().parameters.crm_username",
                                                    "type": "Expression"
                                                },
                                                "vaulturl": {
                                                    "value": "@pipeline().parameters.vault_url",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "ds_Fileuploadmapping",
                                            "type": "DatasetReference",
                                            "parameters": {}
                                        }
                                    ]
                                },
                                {
                                    "name": "Delete file from validated folder",
                                    "type": "Delete",
                                    "dependsOn": [
                                        {
                                            "activity": "Copy File From Validated to EM_Inbound",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "ds_raw_file",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "foldername": "raw/validated",
                                                "filename": {
                                                    "value": "@pipeline().parameters.SftpFileName",
                                                    "type": "Expression"
                                                },
                                                "storageaccountname": {
                                                    "value": "@pipeline().parameters.adlsName",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "enableLogging": false,
                                        "storeSettings": {
                                            "type": "AzureBlobFSReadSettings",
                                            "recursive": false,
                                            "enablePartitionDiscovery": false
                                        }
                                    }
                                },
                                {
                                    "name": "File Status Update",
                                    "type": "Copy",
                                    "dependsOn": [
                                        {
                                            "activity": "File Audit - Validated To EM_Inbound",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "SqlServerSource",
                                            "sqlReaderQuery": {
                                                "value": "select popb_fileuploadmappingid,777250008 as statuscode,0 as statecode from popb_fileuploadmappingBase where popb_responseid='@{pipeline().parameters.NewResponseID}'",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "sink": {
                                            "type": "DynamicsCrmSink",
                                            "writeBatchSize": 10,
                                            "writeBehavior": "upsert",
                                            "ignoreNullValues": false
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "mappings": [
                                                {
                                                    "source": {
                                                        "name": "popb_fileuploadmappingid",
                                                        "type": "Guid",
                                                        "physicalType": "uniqueidentifier"
                                                    },
                                                    "sink": {
                                                        "name": "popb_fileuploadmappingid",
                                                        "type": "Guid"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "statecode",
                                                        "type": "Int32",
                                                        "physicalType": "int"
                                                    },
                                                    "sink": {
                                                        "name": "statecode",
                                                        "type": "Int32"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "statuscode",
                                                        "type": "Int32",
                                                        "physicalType": "int"
                                                    },
                                                    "sink": {
                                                        "name": "statuscode",
                                                        "type": "Int32"
                                                    }
                                                }
                                            ],
                                            "typeConversion": true,
                                            "typeConversionSettings": {
                                                "allowDataTruncation": true,
                                                "treatBooleanAsNumber": false
                                            }
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "ds_appboostCRM_sql",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "crm_servername": {
                                                    "value": "@pipeline().parameters.crm_servername",
                                                    "type": "Expression"
                                                },
                                                "crm_dbname": {
                                                    "value": "@pipeline().parameters.crm_dbname",
                                                    "type": "Expression"
                                                },
                                                "crm_username": {
                                                    "value": "@pipeline().parameters.crm_username",
                                                    "type": "Expression"
                                                },
                                                "vaulturl": {
                                                    "value": "@pipeline().parameters.vault_url",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "ds_Fileuploadmapping",
                                            "type": "DatasetReference",
                                            "parameters": {}
                                        }
                                    ]
                                },
                                {
                                    "name": "Fetch Complete File Metadata",
                                    "type": "Lookup",
                                    "dependsOn": [
                                        {
                                            "activity": "Set PurposeId",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        },
                                        {
                                            "activity": "Set ScoringInfo",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "SqlServerSource",
                                            "sqlReaderQuery": {
                                                "value": "select \nf.popb_fileuploadmappingId, f.popb_data,f.popb_responseid,p.popb_name [popb_purposeidname],\nr.popb_name [popb_responseidname],\nanswr.popb_responsequestion,answr.popb_responseanswer,\nrq.popb_name [answr.popb_responsequestionname],\nAccountBase.name [cnt.po_institutionidname]\nfrom\npopb_fileuploadmappingBase f\ninner join popb_responsesBase r on f.popb_responseid=r.popb_responsesId and r.statuscode=1\nINNER join popb_questionnairreBase q on r.popb_questionnaire=q.popb_questionnairreId and q.popb_questionnairetypes='777250002'\ninner join popb_responseanswerBase answr on answr.popb_parentresponse=r.popb_responsesid\ninner join popb_purposeBase p on p.popb_purposeId=f.popb_purposeid\ninner join popb_responsequestionBase rq on rq.popb_responsequestionId=answr.popb_responsequestion\ninner join (select ranswr.popb_responseanswer,rp.popb_responsesId from\n    popb_responseanswerBase ranswr\n    inner join popb_responsequestionBase rquest on ranswr.popb_responsequestion=rquest.popb_responsequestionId\n    inner join popb_responses rp on ranswr.popb_parentresponse=rp.popb_responsesId\n    INNER join popb_questionnairreBase qr on rp.popb_questionnaire=qr.popb_questionnairreId and qr.popb_questionnairetypes='777250002'\n    where\n    rquest.popb_name='Account' AND (ranswr.popb_responseanswer is not null AND len(ranswr.popb_responseanswer)>31)) cnt on r.popb_responsesId=cnt.popb_responsesId\ninner join AccountBase on cnt.popb_responseanswer=AccountBase.AccountId\nwhere \nf.popb_responseid='@{pipeline().parameters.ResponseID}' and p.popb_name like 'EM%'",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "ds_appboostCRM_sql",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "crm_servername": {
                                                    "value": "@pipeline().parameters.crm_servername",
                                                    "type": "Expression"
                                                },
                                                "crm_dbname": {
                                                    "value": "@pipeline().parameters.crm_dbname",
                                                    "type": "Expression"
                                                },
                                                "crm_username": {
                                                    "value": "@pipeline().parameters.crm_username",
                                                    "type": "Expression"
                                                },
                                                "vaulturl": {
                                                    "value": "@pipeline().parameters.vault_url",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "firstRowOnly": true
                                    }
                                },
                                {
                                    "name": "Copy File From Raw To Validated Folder",
                                    "type": "ExecuteDataFlow",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "1.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataflow": {
                                            "referenceName": "df_PIFileCopy",
                                            "type": "DataFlowReference",
                                            "parameters": {
                                                "Destinationfilename": {
                                                    "value": "'@{pipeline().parameters.SftpFileName}'",
                                                    "type": "Expression"
                                                }
                                            },
                                            "datasetParameters": {
                                                "FileSource": {
                                                    "Containername": {
                                                        "value": "@pipeline().parameters.containerName",
                                                        "type": "Expression"
                                                    },
                                                    "Filepath": {
                                                        "value": "@concat('raw/',split(pipeline().parameters.PurposeName,' ')[0],'/',pipeline().parameters.PurposeName,'/',formatDateTime(utcnow(), 'yyyy'),'/',formatDateTime(utcnow(), 'MM'), '/', formatDateTime(utcnow(), 'dd'),'/',pipeline().parameters.AccountName)",
                                                        "type": "Expression"
                                                    },
                                                    "Filename": {
                                                        "value": "@pipeline().parameters.SftpFileName",
                                                        "type": "Expression"
                                                    },
                                                    "storageaccountname": {
                                                        "value": "@pipeline().parameters.adlsName",
                                                        "type": "Expression"
                                                    }
                                                },
                                                "FileDestination": {
                                                    "Containername": {
                                                        "value": "@pipeline().parameters.containerName",
                                                        "type": "Expression"
                                                    },
                                                    "Filepath": "raw/validated",
                                                    "Filename": {
                                                        "value": "@pipeline().parameters.SftpFileName",
                                                        "type": "Expression"
                                                    },
                                                    "storageaccountname": {
                                                        "value": "@pipeline().parameters.adlsName",
                                                        "type": "Expression"
                                                    }
                                                }
                                            }
                                        },
                                        "staging": {},
                                        "compute": {
                                            "coreCount": 8,
                                            "computeType": "General"
                                        },
                                        "traceLevel": "Fine"
                                    }
                                },
                                {
                                    "name": "Copy File From Validated to EM_Inbound",
                                    "type": "ExecuteDataFlow",
                                    "dependsOn": [
                                        {
                                            "activity": "Generate New FileUploadMapping",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "1.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataflow": {
                                            "referenceName": "df_PIFileCopy",
                                            "type": "DataFlowReference",
                                            "parameters": {
                                                "Destinationfilename": {
                                                    "value": "'@{variables('FileNameModified')}'",
                                                    "type": "Expression"
                                                }
                                            },
                                            "datasetParameters": {
                                                "FileSource": {
                                                    "Containername": {
                                                        "value": "@pipeline().parameters.containerName",
                                                        "type": "Expression"
                                                    },
                                                    "Filepath": "raw/validated",
                                                    "Filename": {
                                                        "value": "@pipeline().parameters.SftpFileName",
                                                        "type": "Expression"
                                                    },
                                                    "storageaccountname": {
                                                        "value": "@pipeline().parameters.adlsName",
                                                        "type": "Expression"
                                                    }
                                                },
                                                "FileDestination": {
                                                    "Containername": {
                                                        "value": "@pipeline().parameters.containerName",
                                                        "type": "Expression"
                                                    },
                                                    "Filepath": {
                                                        "value": "@concat('em_inbound/',pipeline().parameters.PurposeName,'/',variables('FileNameModified'),'/')",
                                                        "type": "Expression"
                                                    },
                                                    "Filename": {
                                                        "value": "@variables('FileNameModified')",
                                                        "type": "Expression"
                                                    },
                                                    "storageaccountname": {
                                                        "value": "@pipeline().parameters.adlsName",
                                                        "type": "Expression"
                                                    }
                                                }
                                            }
                                        },
                                        "staging": {},
                                        "compute": {
                                            "coreCount": 8,
                                            "computeType": "General"
                                        },
                                        "traceLevel": "Fine"
                                    }
                                },
                                {
                                    "name": "Fetch Scoring Info",
                                    "type": "Lookup",
                                    "dependsOn": [
                                        {
                                            "activity": "File Audit - Raw To Validated",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "SqlServerSource",
                                            "sqlReaderQuery": {
                                                "value": "select purpose1,\nSTUFF(LEFT(ScoringModel, LEN(ScoringModel) - PATINDEX('%[^,]%', REVERSE(ScoringModel)) + 1), 1, PATINDEX('%[^,]%', ScoringModel) - 1, '') ScoringInfo\nfrom \n(\nselect popb_responsesId,JSON_VALUE(popb_data,'$.purpose1') as purpose1,\nconcat(CASE\n    WHEN (JSON_VALUE(popb_data,'$.isScoringEnabled[0]') is not null) THEN '\"isScoringEnabled\":[\"Yes\"],'\nEND , CASE\n    WHEN (JSON_VALUE(popb_data,'$.isModelingEnabled[0]') is not null) THEN '\"isModelingEnabled\":[\"Yes\"],'\nEND, CASE\n    WHEN (JSON_VALUE(popb_data,'$.ScoringModel') is not null) THEN '\"ScoringModel\":\"'+JSON_VALUE(popb_data,'$.ScoringModel')+'\",'\nEND )as ScoringModel\nfrom popb_responsesBase \nwhere popb_responsesId = '@{pipeline().parameters.ResponseID}'\n) cte",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "ds_appboostCRM_sql",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "crm_servername": {
                                                    "value": "@pipeline().parameters.crm_servername",
                                                    "type": "Expression"
                                                },
                                                "crm_dbname": {
                                                    "value": "@pipeline().parameters.crm_dbname",
                                                    "type": "Expression"
                                                },
                                                "crm_username": {
                                                    "value": "@pipeline().parameters.crm_username",
                                                    "type": "Expression"
                                                },
                                                "vaulturl": {
                                                    "value": "@pipeline().parameters.vault_url",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "firstRowOnly": false
                                    }
                                },
                                {
                                    "name": "Set PurposeId",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "Fetch Scoring Info",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "PurposeID",
                                        "value": {
                                            "value": "@if(greater(length(activity('Fetch Scoring Info').output.value),0),activity('Fetch Scoring Info').output.value[0].purpose1,'')",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Set ScoringInfo",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "Fetch Scoring Info",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "ScoringInfo",
                                        "value": {
                                            "value": "@if(greater(length(activity('Fetch Scoring Info').output.value),0),activity('Fetch Scoring Info').output.value[0].ScoringInfo,'')",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Email - File Ingestion Success",
                                    "type": "WebActivity",
                                    "dependsOn": [
                                        {
                                            "activity": "End ETL Audit",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "url": {
                                            "value": "@pipeline().parameters.EmailSuccess",
                                            "type": "Expression"
                                        },
                                        "connectVia": {
                                            "referenceName": "AutoResolveIntegrationRuntime",
                                            "type": "IntegrationRuntimeReference"
                                        },
                                        "method": "POST",
                                        "headers": {
                                            "Content-Type": "application/json"
                                        },
                                        "body": {
                                            "value": "{\n\"DataFactoryName\": \"@{pipeline().DataFactory}\",\n\"EmailTo\": \"ganesh.gawli@ruffalonl.com\",\n\"PipelineName\": \"@{pipeline().Pipeline}\",\n\"Subject\": \"File Ingestion Successful!\"\n}",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "ETL Audit-Copy Failed Raw to validated",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [
                                        {
                                            "activity": "Copy File From Raw To Validated Folder",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                                        "baseParameters": {
                                            "audit_id": "107",
                                            "adf_run_id": {
                                                "value": "@pipeline().parameters.ParentPipelineRunID",
                                                "type": "Expression"
                                            },
                                            "adf_pipeline_name": {
                                                "value": "@pipeline().parameters.ParentPipelineName",
                                                "type": "Expression"
                                            },
                                            "adf_trigger_name": {
                                                "value": "@pipeline().parameters.ParentPipelineTriggerName",
                                                "type": "Expression"
                                            },
                                            "pipeline_status": "Failed",
                                            "error_description": {
                                                "value": "@activity('Copy File From Raw To Validated Folder').output.errors[0].Message",
                                                "type": "Expression"
                                            },
                                            "server_name": {
                                                "value": "@pipeline().parameters.az_sql_server_name",
                                                "type": "Expression"
                                            },
                                            "database_name": {
                                                "value": "@pipeline().parameters.az_sql_db_name",
                                                "type": "Expression"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_NDPdatabricks",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "ETL Audit-Copy Failed validated EM_Inbound",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [
                                        {
                                            "activity": "Copy File From Validated to EM_Inbound",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                                        "baseParameters": {
                                            "audit_id": "107",
                                            "adf_run_id": {
                                                "value": "@pipeline().parameters.ParentPipelineRunID",
                                                "type": "Expression"
                                            },
                                            "adf_pipeline_name": {
                                                "value": "@pipeline().parameters.ParentPipelineName",
                                                "type": "Expression"
                                            },
                                            "adf_trigger_name": {
                                                "value": "@pipeline().parameters.ParentPipelineTriggerName",
                                                "type": "Expression"
                                            },
                                            "pipeline_status": "Failed",
                                            "error_description": {
                                                "value": "@activity('Copy File From Raw To Validated Folder').output.errors[0].Message",
                                                "type": "Expression"
                                            },
                                            "server_name": {
                                                "value": "@pipeline().parameters.az_sql_server_name",
                                                "type": "Expression"
                                            },
                                            "database_name": {
                                                "value": "@pipeline().parameters.az_sql_db_name",
                                                "type": "Expression"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_NDPdatabricks",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "End ETL Audit",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [
                                        {
                                            "activity": "File Metadata Audit",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        },
                                        {
                                            "activity": "File_null_value_check",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                                        "baseParameters": {
                                            "audit_id": "106",
                                            "adf_run_id": {
                                                "value": "@pipeline().parameters.ParentPipelineRunID",
                                                "type": "Expression"
                                            },
                                            "adf_pipeline_name": {
                                                "value": "@pipeline().parameters.ParentPipelineName",
                                                "type": "Expression"
                                            },
                                            "adf_trigger_name": {
                                                "value": "@pipeline().parameters.ParentPipelineTriggerName",
                                                "type": "Expression"
                                            },
                                            "pipeline_status": "Successfully copied file to inbound folder",
                                            "server_name": {
                                                "value": "@pipeline().parameters.az_sql_server_name",
                                                "type": "Expression"
                                            },
                                            "database_name": {
                                                "value": "@pipeline().parameters.az_sql_db_name",
                                                "type": "Expression"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_NDPdatabricks",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "File Audit - Raw To Validated",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [
                                        {
                                            "activity": "Copy File From Raw To Validated Folder",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": "/audit-Framework/dbn-file-processing-log",
                                        "baseParameters": {
                                            "audit_id": "102",
                                            "adf_run_id": {
                                                "value": "@pipeline().parameters.ParentPipelineRunID",
                                                "type": "Expression"
                                            },
                                            "response_id": {
                                                "value": "@pipeline().parameters.NewResponseID",
                                                "type": "Expression"
                                            },
                                            "purpose_file_name": {
                                                "value": "@pipeline().parameters.PurposeName",
                                                "type": "Expression"
                                            },
                                            "account_name": {
                                                "value": "@pipeline().parameters.AccountName",
                                                "type": "Expression"
                                            },
                                            "file_processing_stage": "validated",
                                            "status": "Copied In validated Folder",
                                            "row_count": {
                                                "value": "@string(activity('Copy File From Raw To Validated Folder').output.runstatus.metrics.FileDestination.rowsWritten)",
                                                "type": "Expression"
                                            },
                                            "rejected_row": {
                                                "value": "0",
                                                "type": "Expression"
                                            },
                                            "mapping_id": {
                                                "value": "@pipeline().parameters.NewFileUploadMappingID",
                                                "type": "Expression"
                                            },
                                            "server_name": {
                                                "value": "@pipeline().parameters.az_sql_server_name",
                                                "type": "Expression"
                                            },
                                            "database_name": {
                                                "value": "@pipeline().parameters.az_sql_db_name",
                                                "type": "Expression"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_NDPdatabricks",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "File Audit - Validated To EM_Inbound",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [
                                        {
                                            "activity": "Delete file from validated folder",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": "/audit-Framework/dbn-file-processing-log",
                                        "baseParameters": {
                                            "audit_id": "103",
                                            "adf_run_id": {
                                                "value": "@pipeline().parameters.ParentPipelineRunID",
                                                "type": "Expression"
                                            },
                                            "response_id": {
                                                "value": "@pipeline().parameters.NewResponseID",
                                                "type": "Expression"
                                            },
                                            "mapping_id": {
                                                "value": "@pipeline().parameters.NewFileUploadMappingID",
                                                "type": "Expression"
                                            },
                                            "purpose_file_name": {
                                                "value": "@pipeline().parameters.PurposeName",
                                                "type": "Expression"
                                            },
                                            "account_name": {
                                                "value": "@pipeline().parameters.AccountName",
                                                "type": "Expression"
                                            },
                                            "file_processing_stage": "em_inbound",
                                            "status": "Copied In em_inbound Folder",
                                            "row_count": {
                                                "value": "@string(activity('Copy File From Validated to EM_Inbound').output.runstatus.metrics.FileDestination.rowsWritten)",
                                                "type": "Expression"
                                            },
                                            "rejected_row": {
                                                "value": "0",
                                                "type": "Expression"
                                            },
                                            "server_name": {
                                                "value": "@pipeline().parameters.az_sql_server_name",
                                                "type": "Expression"
                                            },
                                            "database_name": {
                                                "value": "@pipeline().parameters.az_sql_db_name",
                                                "type": "Expression"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_NDPdatabricks",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "File Metadata Audit",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [
                                        {
                                            "activity": "Genrerate Schema",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": "/audit-Framework/dbn-file-metadata-audit",
                                        "baseParameters": {
                                            "response_id": {
                                                "value": "@pipeline().parameters.NewResponseID",
                                                "type": "Expression"
                                            },
                                            "mapping_id": {
                                                "value": "@pipeline().parameters.NewFileUploadMappingID",
                                                "type": "Expression"
                                            },
                                            "file_source": {
                                                "value": "@pipeline().parameters.source",
                                                "type": "Expression"
                                            },
                                            "file_purpose": {
                                                "value": "@substring(pipeline().parameters.PurposeName,0,2)",
                                                "type": "Expression"
                                            },
                                            "purpose_name": {
                                                "value": "@pipeline().parameters.PurposeName",
                                                "type": "Expression"
                                            },
                                            "original_filename": {
                                                "value": "@pipeline().parameters.OriginalName",
                                                "type": "Expression"
                                            },
                                            "modified_filename": {
                                                "value": "@variables('FileNameModified')",
                                                "type": "Expression"
                                            },
                                            "account_name": {
                                                "value": "@pipeline().parameters.AccountName",
                                                "type": "Expression"
                                            },
                                            "account_id": {
                                                "value": "@pipeline().parameters.AccountID",
                                                "type": "Expression"
                                            },
                                            "file_load_type": "Single",
                                            "record_count": {
                                                "value": "@string(activity('Copy File From Validated to EM_Inbound').output.runstatus.metrics.FileDestination.sources.FileSource.rowsread)",
                                                "type": "Expression"
                                            },
                                            "file_size_kb": {
                                                "value": "@string(div(activity('Copy File From Validated to EM_Inbound').output.runstatus.metrics.FileDestination.stages[0].bytesRead,1024))",
                                                "type": "Expression"
                                            },
                                            "file_format": {
                                                "value": "@split(pipeline().parameters.SftpFileName,'.')[1]",
                                                "type": "Expression"
                                            },
                                            "fiscal_yr": {
                                                "value": "@string(pipeline().parameters.FiscalYear)",
                                                "type": "Expression"
                                            },
                                            "fiscal_year_month": {
                                                "value": "@string(pipeline().parameters.FiscalMonth)",
                                                "type": "Expression"
                                            },
                                            "schema_json": {
                                                "value": "@replace(activity('Fetch Complete File Metadata').output.firstrow.popb_data,'''','')",
                                                "type": "Expression"
                                            },
                                            "file_upload_datetime": {
                                                "value": "@utcNow()",
                                                "type": "Expression"
                                            },
                                            "received_datetime": {
                                                "value": "@utcNow()",
                                                "type": "Expression"
                                            },
                                            "delimiter": {
                                                "value": "@string(activity('File_metadata_details').output.firstRow.Delimiter)",
                                                "type": "Expression"
                                            },
                                            "file_encoding": {
                                                "value": "@string(activity('File_metadata_details').output.firstRow.FileEncoding)",
                                                "type": "Expression"
                                            },
                                            "server_name": {
                                                "value": "@pipeline().parameters.az_sql_server_name",
                                                "type": "Expression"
                                            },
                                            "database_name": {
                                                "value": "@pipeline().parameters.az_sql_db_name",
                                                "type": "Expression"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_NDPdatabricks",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "Genrerate Schema",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [
                                        {
                                            "activity": "File Status Update",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pip-config-schema",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "PurposeName": {
                                                "value": "@pipeline().parameters.PurposeName",
                                                "type": "Expression"
                                            },
                                            "AccountID": {
                                                "value": "@pipeline().parameters.AccountID",
                                                "type": "Expression"
                                            },
                                            "ResponseID": {
                                                "value": "@pipeline().parameters.ResponseID",
                                                "type": "Expression"
                                            },
                                            "FilePath": {
                                                "value": "@concat('em_inbound/',pipeline().parameters.PurposeName,'/',variables('FileNameModified'),'/')",
                                                "type": "Expression"
                                            },
                                            "crm_servername": {
                                                "value": "@pipeline().parameters.crm_servername",
                                                "type": "Expression"
                                            },
                                            "crm_dbname": {
                                                "value": "@pipeline().parameters.crm_dbname",
                                                "type": "Expression"
                                            },
                                            "crm_username": {
                                                "value": "@pipeline().parameters.crm_username",
                                                "type": "Expression"
                                            },
                                            "Containername": {
                                                "value": "@pipeline().parameters.containerName",
                                                "type": "Expression"
                                            },
                                            "SchemaFilename": {
                                                "value": "@pipeline().parameters.SchemaFilename",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            },
                                            "storageaccountname": {
                                                "value": "@pipeline().parameters.adlsName",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "File_null_value_check",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [
                                        {
                                            "activity": "Genrerate Schema",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": "/audit-Framework/dbn-file-healthcheck-log",
                                        "baseParameters": {
                                            "adf_run_id": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "adf_pipeline_name": {
                                                "value": "@pipeline().Pipeline",
                                                "type": "Expression"
                                            },
                                            "adf_trigger_name": {
                                                "value": "@pipeline().TriggerName",
                                                "type": "Expression"
                                            },
                                            "account_name": {
                                                "value": "@pipeline().parameters.AccountName",
                                                "type": "Expression"
                                            },
                                            "adlsName": {
                                                "value": "@pipeline().parameters.adlsName",
                                                "type": "Expression"
                                            },
                                            "containerName": {
                                                "value": "@pipeline().parameters.containerName",
                                                "type": "Expression"
                                            },
                                            "rawpath": {
                                                "value": "@concat('em_inbound/',pipeline().parameters.PurposeName,'/',variables('FileNameModified'))",
                                                "type": "Expression"
                                            },
                                            "FileName": {
                                                "value": "@variables('FileNameModified')",
                                                "type": "Expression"
                                            },
                                            "mapping_id": {
                                                "value": "@pipeline().parameters.NewFileUploadMappingID",
                                                "type": "Expression"
                                            },
                                            "responseid": {
                                                "value": "@pipeline().parameters.NewResponseID",
                                                "type": "Expression"
                                            },
                                            "categoryName": {
                                                "value": "@substring(pipeline().parameters.PurposeName,0,2)",
                                                "type": "Expression"
                                            },
                                            "purposeName": {
                                                "value": "@pipeline().parameters.PurposeName",
                                                "type": "Expression"
                                            },
                                            "validation": "empty record check",
                                            "schemaFilename": {
                                                "value": "@pipeline().parameters.SchemaFilename",
                                                "type": "Expression"
                                            },
                                            "source": {
                                                "value": "@pipeline().parameters.source",
                                                "type": "Expression"
                                            },
                                            "delimiter": {
                                                "value": "@string(activity('File_metadata_details').output.firstRow.Delimiter)",
                                                "type": "Expression"
                                            },
                                            "mountPath": "/mnt/datalanding",
                                            "server_name": {
                                                "value": "@pipeline().parameters.az_sql_server_name",
                                                "type": "Expression"
                                            },
                                            "database_name": {
                                                "value": "@pipeline().parameters.az_sql_db_name",
                                                "type": "Expression"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_NDPdatabricks",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "File_metadata_details",
                                    "type": "Lookup",
                                    "dependsOn": [
                                        {
                                            "activity": "Fetch Complete File Metadata",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "SqlServerSource",
                                            "sqlReaderQuery": {
                                                "value": "select distinct   right(x1.popb_responsequestionidentifier,1) fileorder, r.popb_responsesId ,  x1.popb_uploadedfilename, x1.popb_fileuploadmappingId,x1.popb_name [popb_purposeidname], x1.popb_purposeId, r.popb_name [popb_responseidname],  x2.answer [Account],  (select top 1 ra.popb_name 'answer'         from  popb_responseanswer ra with (nolock)          inner join popb_responsequestion rq (nolock) on ra.popb_responsequestion=rq.popb_responsequestionId         where         rq.popb_name in ('Fiscal Year')         and r.popb_responsesid=ra.popb_parentresponse ) Fiscal_Year  ,x3.answer [Delimiter] ,x4.answer [FileEncoding] ,x5.answer [Action]  from popb_responses  r inner join (     select ra.popb_name 'answer',rq.popb_name 'question',rq.popb_responsequestionidentifier,ra.popb_parentresponse, f.popb_uploadedfilename,          f.popb_fileuploadmappingId,p.popb_name,f.popb_processenddate,f.statuscode, p.popb_purposeId         from  popb_responseanswer ra with (nolock)          inner join popb_responsequestion rq (nolock) on ra.popb_responsequestion=rq.popb_responsequestionId         inner join popb_fileuploadmapping f on f.popb_responseid=ra.popb_parentresponse and cast(ra.popb_name as varchar(38))=cast(f.popb_uploadedfilename as varchar(38))         inner join popb_purposeBase p on f.popb_purposeid=p.popb_purposeid         where         rq.popb_name in ('File Name')         ) x1  on r.popb_responsesid=x1.popb_parentresponse inner join (     select distinct ra.popb_name 'answer',rq.popb_name 'question',rq.popb_responsequestionidentifier,ra.popb_parentresponse         from  popb_responseanswer ra with (nolock)          inner join popb_responsequestion rq (nolock) on ra.popb_responsequestion=rq.popb_responsequestionId         where         rq.popb_name in ('Account')         ) x2  on r.popb_responsesid=x2.popb_parentresponse inner join (     select ra.popb_name 'answer',rq.popb_name 'question',rq.popb_responsequestionidentifier,ra.popb_parentresponse         from  popb_responseanswer ra with (nolock)          inner join popb_responsequestion rq (nolock) on ra.popb_responsequestion=rq.popb_responsequestionId         where         rq.popb_name in ('Delimiter')         ) x3  on r.popb_responsesid=x3.popb_parentresponse and right(x1.popb_responsequestionidentifier,1)=RIGHT(x3.popb_responsequestionidentifier,1) inner join (     select ra.popb_name 'answer',rq.popb_name 'question',rq.popb_responsequestionidentifier,ra.popb_parentresponse         from  popb_responseanswer ra with (nolock)          inner join popb_responsequestion rq (nolock) on ra.popb_responsequestion=rq.popb_responsequestionId         where         rq.popb_name in ('File Encoding')         ) x4  on r.popb_responsesid=x4.popb_parentresponse and right(x1.popb_responsequestionidentifier,1)=RIGHT(x4.popb_responsequestionidentifier,1) left join (     select ra.popb_name 'answer',rq.popb_name 'question',rq.popb_responsequestionidentifier,ra.popb_parentresponse         from  popb_responseanswer ra with (nolock)          inner join popb_responsequestion rq (nolock) on ra.popb_responsequestion=rq.popb_responsequestionId         where         rq.popb_name in ('Merge Contacts or Append Attributes')         ) x5  on r.popb_responsesid=x5.popb_parentresponse and right(x1.popb_responsequestionidentifier,1)=RIGHT(x5.popb_responsequestionidentifier,1) where x1.popb_processenddate is null and x1.statuscode='777250008' and popb_responsesid='@{pipeline().parameters.ResponseID}'\n",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "ds_appboostCRM_sql",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "crm_servername": {
                                                    "value": "@pipeline().parameters.crm_servername",
                                                    "type": "Expression"
                                                },
                                                "crm_dbname": {
                                                    "value": "@pipeline().parameters.crm_dbname",
                                                    "type": "Expression"
                                                },
                                                "crm_username": {
                                                    "value": "@pipeline().parameters.crm_username",
                                                    "type": "Expression"
                                                },
                                                "vaulturl": {
                                                    "value": "@pipeline().parameters.vault_url",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "firstRowOnly": true
                                    }
                                },
                                {
                                    "name": "ETL Audit- Metadata audit",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [
                                        {
                                            "activity": "File Metadata Audit",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        },
                                        {
                                            "activity": "File_null_value_check",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                                        "baseParameters": {
                                            "audit_id": "107",
                                            "adf_run_id": {
                                                "value": "@pipeline().parameters.ParentPipelineRunID",
                                                "type": "Expression"
                                            },
                                            "adf_pipeline_name": {
                                                "value": "@pipeline().parameters.ParentPipelineName",
                                                "type": "Expression"
                                            },
                                            "adf_trigger_name": {
                                                "value": "@pipeline().parameters.ParentPipelineTriggerName",
                                                "type": "Expression"
                                            },
                                            "pipeline_status": "Failed",
                                            "error_description": {
                                                "value": "@activity('Copy File From Raw To Validated Folder').output.errors[0].Message",
                                                "type": "Expression"
                                            },
                                            "server_name": {
                                                "value": "@pipeline().parameters.az_sql_server_name",
                                                "type": "Expression"
                                            },
                                            "database_name": {
                                                "value": "@pipeline().parameters.az_sql_db_name",
                                                "type": "Expression"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_NDPdatabricks",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "Email - File null value check",
                                    "type": "WebActivity",
                                    "dependsOn": [
                                        {
                                            "activity": "File_null_value_check",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "url": {
                                            "value": "@pipeline().parameters.EmailSuccess",
                                            "type": "Expression"
                                        },
                                        "connectVia": {
                                            "referenceName": "AutoResolveIntegrationRuntime",
                                            "type": "IntegrationRuntimeReference"
                                        },
                                        "method": "POST",
                                        "headers": {
                                            "Content-Type": "application/json"
                                        },
                                        "body": {
                                            "value": "{\n\"DataFactoryName\": \"@{pipeline().DataFactory}\",\n\"EmailTo\": \"ganesh.gawli@ruffalonl.com\",\n\"PipelineName\": \"@{pipeline().Pipeline}\",\n\"Subject\": \"File Null check completed!\"\n}",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "File_HealthCheck",
                        "type": "DatabricksNotebook",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-healthcheck-validation",
                            "baseParameters": {
                                "FileName": {
                                    "value": "@pipeline().parameters.SftpFileName",
                                    "type": "Expression"
                                },
                                "adlsName": {
                                    "value": "@pipeline().parameters.adlsName",
                                    "type": "Expression"
                                },
                                "containerName": {
                                    "value": "datalanding",
                                    "type": "Expression"
                                },
                                "mountPath": "/mnt/datalanding",
                                "rawpath": {
                                    "value": "@concat('raw/',split(pipeline().parameters.PurposeName,' ')[0],'/',pipeline().parameters.PurposeName,'/',formatDateTime(utcnow(), 'yyyy'),'/',formatDateTime(utcnow(), 'MM'), '/', formatDateTime(utcnow(), 'dd'),'/',pipeline().parameters.AccountName)",
                                    "type": "Expression"
                                },
                                "responseid": {
                                    "value": "@pipeline().parameters.ResponseID",
                                    "type": "Expression"
                                },
                                "source": {
                                    "value": "@pipeline().parameters.source",
                                    "type": "Expression"
                                },
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "purposeName": {
                                    "value": "@pipeline().parameters.PurposeName",
                                    "type": "Expression"
                                },
                                "categoryName": {
                                    "value": "@split(pipeline().parameters.PurposeName,' ')[0]\n",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "SftpFileName": {
                        "type": "string"
                    },
                    "AccountID": {
                        "type": "string"
                    },
                    "ResponseID": {
                        "type": "string"
                    },
                    "AccountName": {
                        "type": "string"
                    },
                    "PurposeName": {
                        "type": "string"
                    },
                    "ParentPipelineName": {
                        "type": "string"
                    },
                    "ParentPipelineRunID": {
                        "type": "string"
                    },
                    "ParentPipelineTriggerName": {
                        "type": "string"
                    },
                    "FiscalMonth": {
                        "type": "string"
                    },
                    "FiscalYear": {
                        "type": "string"
                    },
                    "RowsRead": {
                        "type": "int"
                    },
                    "RowsWritten": {
                        "type": "int"
                    },
                    "OriginalName": {
                        "type": "string"
                    },
                    "source": {
                        "type": "string"
                    },
                    "NewResponseID": {
                        "type": "string"
                    },
                    "NewFileUploadMappingID": {
                        "type": "string"
                    },
                    "SchemaFilename": {
                        "type": "string"
                    },
                    "adlsName": {
                        "type": "string"
                    },
                    "containerName": {
                        "type": "string"
                    },
                    "az_sql_server_name": {
                        "type": "string"
                    },
                    "az_sql_db_name": {
                        "type": "string"
                    },
                    "databricks_workspace_url": {
                        "type": "string"
                    },
                    "databricks_clusterid": {
                        "type": "string"
                    },
                    "vault_url": {
                        "type": "string"
                    },
                    "crm_servername": {
                        "type": "string"
                    },
                    "crm_dbname": {
                        "type": "string"
                    },
                    "crm_username": {
                        "type": "string"
                    },
                    "EmailSuccess": {
                        "type": "string"
                    },
                    "EmailFailure": {
                        "type": "string"
                    }
                },
                "variables": {
                    "FileNameModified": {
                        "type": "String"
                    },
                    "ScoringInfo": {
                        "type": "String"
                    },
                    "PurposeID": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "test_pipelines"
                },
                "annotations": [],
                "lastPublishTime": "2022-10-06T21:05:03Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-sftp-file-validation-raw-to-em_inbound')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "File Validation",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "File_HealthCheck",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@and(greater(activity('File_HealthCheck').output.runOutput[0],0),equals(pipeline().parameters.RowsRead,pipeline().parameters.RowsWritten))",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Delete file from Raw_Folder",
                                    "type": "Delete",
                                    "dependsOn": [
                                        {
                                            "activity": "Copy File From Raw To Reject Folder",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "ds_raw_file",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "foldername": {
                                                    "value": "@concat('raw/',split(pipeline().parameters.PurposeName,' ')[0],'/',pipeline().parameters.PurposeName,'/',formatDateTime(utcnow(), 'yyyy'),'/',formatDateTime(utcnow(), 'MM'), '/', formatDateTime(utcnow(), 'dd'),'/',pipeline().parameters.AccountName)",
                                                    "type": "Expression"
                                                },
                                                "filename": {
                                                    "value": "@pipeline().parameters.SftpFileName",
                                                    "type": "Expression"
                                                },
                                                "storageaccountname": {
                                                    "value": "@pipeline().parameters.containerName",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "enableLogging": false,
                                        "storeSettings": {
                                            "type": "AzureBlobFSReadSettings",
                                            "recursive": false,
                                            "enablePartitionDiscovery": false
                                        }
                                    }
                                },
                                {
                                    "name": "Copy File From Raw To Reject Folder",
                                    "type": "ExecuteDataFlow",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "1.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataflow": {
                                            "referenceName": "df_PIFileCopy",
                                            "type": "DataFlowReference",
                                            "parameters": {
                                                "Destinationfilename": {
                                                    "value": "'@{pipeline().parameters.SftpFileName}'",
                                                    "type": "Expression"
                                                }
                                            },
                                            "datasetParameters": {
                                                "FileSource": {
                                                    "Containername": {
                                                        "value": "@pipeline().parameters.containerName",
                                                        "type": "Expression"
                                                    },
                                                    "Filepath": {
                                                        "value": "@concat('raw/',split(pipeline().parameters.PurposeName,' ')[0],'/',pipeline().parameters.PurposeName,'/',formatDateTime(utcnow(), 'yyyy'),'/',formatDateTime(utcnow(), 'MM'), '/', formatDateTime(utcnow(), 'dd'),'/',pipeline().parameters.AccountName)",
                                                        "type": "Expression"
                                                    },
                                                    "Filename": {
                                                        "value": "@pipeline().parameters.SftpFileName",
                                                        "type": "Expression"
                                                    },
                                                    "storageaccountname": {
                                                        "value": "@pipeline().parameters.adlsName",
                                                        "type": "Expression"
                                                    }
                                                },
                                                "FileDestination": {
                                                    "Containername": {
                                                        "value": "@pipeline().parameters.containerName",
                                                        "type": "Expression"
                                                    },
                                                    "Filepath": "raw/rejected",
                                                    "Filename": {
                                                        "value": "@pipeline().parameters.SftpFileName",
                                                        "type": "Expression"
                                                    },
                                                    "storageaccountname": {
                                                        "value": "@pipeline().parameters.adlsName",
                                                        "type": "Expression"
                                                    }
                                                }
                                            }
                                        },
                                        "staging": {},
                                        "compute": {
                                            "coreCount": 8,
                                            "computeType": "General"
                                        },
                                        "traceLevel": "Fine"
                                    }
                                },
                                {
                                    "name": "Email - File Validation Failed",
                                    "type": "WebActivity",
                                    "dependsOn": [
                                        {
                                            "activity": "File Audit - Raw To Reject",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "url": {
                                            "value": "@pipeline().parameters.EmailFailure",
                                            "type": "Expression"
                                        },
                                        "connectVia": {
                                            "referenceName": "AutoResolveIntegrationRuntime",
                                            "type": "IntegrationRuntimeReference"
                                        },
                                        "method": "POST",
                                        "headers": {
                                            "Content-Type": "application/json"
                                        },
                                        "body": {
                                            "value": "{\n\"DataFactoryName\": \"@{pipeline().DataFactory}\",\n\"EmailTo\": \"ganesh.gawli@ruffalonl.com\",\n\"ErrorMessage\": \"File Validation Failed and File Moved to Reject Folder\",\n\"PipelineName\": \"@{pipeline().Pipeline}\",\n\"Subject\": \"An error has occurred!\",\n\"ActivityName\": \"\"\n}",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "ETL Audit-Copy Failed Raw to Reject",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [
                                        {
                                            "activity": "Copy File From Raw To Reject Folder",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                                        "baseParameters": {
                                            "audit_id": "107",
                                            "adf_run_id": {
                                                "value": "@pipeline().parameters.ParentPipelineRunID",
                                                "type": "Expression"
                                            },
                                            "adf_pipeline_name": {
                                                "value": "@pipeline().parameters.ParentPipelineName",
                                                "type": "Expression"
                                            },
                                            "adf_trigger_name": {
                                                "value": "@pipeline().parameters.ParentPipelineTriggerName",
                                                "type": "Expression"
                                            },
                                            "pipeline_status": "Failed",
                                            "error_description": {
                                                "value": "@activity('Copy File From Raw To Reject Folder').output.errors[0].Message",
                                                "type": "Expression"
                                            },
                                            "server_name": {
                                                "value": "@pipeline().parameters.az_sql_server_name",
                                                "type": "Expression"
                                            },
                                            "database_name": {
                                                "value": "@pipeline().parameters.az_sql_db_name",
                                                "type": "Expression"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_NDPdatabricks",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "File Audit - Raw To Reject",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [
                                        {
                                            "activity": "Delete file from Raw_Folder",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": "/audit-Framework/dbn-file-processing-log",
                                        "baseParameters": {
                                            "audit_id": "104",
                                            "adf_run_id": {
                                                "value": "@pipeline().parameters.ParentPipelineRunID",
                                                "type": "Expression"
                                            },
                                            "response_id": {
                                                "value": "@pipeline().parameters.NewResponseID",
                                                "type": "Expression"
                                            },
                                            "purpose_file_name": {
                                                "value": "@pipeline().parameters.PurposeName",
                                                "type": "Expression"
                                            },
                                            "account_name": {
                                                "value": "@pipeline().parameters.AccountName",
                                                "type": "Expression"
                                            },
                                            "file_processing_stage": "Rejected",
                                            "status": "Copied In rejected Folder",
                                            "row_count": {
                                                "value": "@string(activity('Copy File From Raw To Reject Folder').output.runstatus.metrics.FileDestination.rowsWritten)",
                                                "type": "Expression"
                                            },
                                            "rejected_row": {
                                                "value": "@string(activity('Copy File From Raw To Reject Folder').output.runstatus.metrics.FileDestination.rowsWritten)",
                                                "type": "Expression"
                                            },
                                            "mapping_id": {
                                                "value": "@pipeline().parameters.NewFileUploadMappingID",
                                                "type": "Expression"
                                            },
                                            "server_name": {
                                                "value": "@pipeline().parameters.az_sql_server_name",
                                                "type": "Expression"
                                            },
                                            "database_name": {
                                                "value": "@pipeline().parameters.az_sql_db_name",
                                                "type": "Expression"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_NDPdatabricks",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "File Rename",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "File_metadata_details",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "FileNameModified",
                                        "value": {
                                            "value": "@concat(replace(pipeline().parameters.PurposeName,' ',''),'_',pipeline().parameters.AccountName,'_',string(formatDateTime(convertTimeZone(utcnow(),'UTC','Eastern Standard Time'),'yyyyMMddHHmmssffff')),'.csv')",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Generate New Response",
                                    "type": "Copy",
                                    "dependsOn": [
                                        {
                                            "activity": "File Rename",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "SqlServerSource",
                                            "additionalColumns": [
                                                {
                                                    "name": "newresponseid",
                                                    "value": {
                                                        "value": "@pipeline().parameters.NewResponseID",
                                                        "type": "Expression"
                                                    }
                                                },
                                                {
                                                    "name": "Response Name",
                                                    "value": {
                                                        "value": "@concat('From UNC Path-',pipeline().parameters.OriginalName)",
                                                        "type": "Expression"
                                                    }
                                                },
                                                {
                                                    "name": "new_populatemappeddata",
                                                    "value": "False"
                                                },
                                                {
                                                    "name": "new_podata",
                                                    "value": {
                                                        "value": "{\"account\":\"@{pipeline().parameters.AccountID}\",\"product\":\"da724394-befc-e911-a82a-000d3a075a33\",\"purpose1\":\" @{variables('PurposeID')} \",\"file\":[{\"name\":\"@{pipeline().parameters.OriginalName}\",\"type\":\"application/vnd.ms-excel\",\"content\":\"data:application/vnd.ms-excel;base64\"}],\"fileNameStr1\":\" @{pipeline().parameters.OriginalName}\",\"@{variables('ScoringInfo')}\"}",
                                                        "type": "Expression"
                                                    }
                                                }
                                            ],
                                            "sqlReaderQuery": {
                                                "value": "select f.popb_data [file_data],f.popb_purposeid [file_purposeid], f.statuscode [file_statuscode],f.statecode [file_statecode], r.* from popb_responsesbase r\ninner join popb_fileuploadmappingBase f on f.popb_responseid=r.popb_responsesId where popb_responsesid='@{pipeline().parameters.ResponseID}'",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "sink": {
                                            "type": "DynamicsCrmSink",
                                            "writeBatchSize": 10,
                                            "writeBehavior": "upsert",
                                            "ignoreNullValues": false
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "mappings": [
                                                {
                                                    "source": {
                                                        "name": "popb_contact",
                                                        "type": "Guid",
                                                        "physicalType": "uniqueidentifier"
                                                    },
                                                    "sink": {
                                                        "name": "popb_contact",
                                                        "type": "Guid"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "popb_customer",
                                                        "type": "Guid",
                                                        "physicalType": "uniqueidentifier"
                                                    },
                                                    "sink": {
                                                        "name": "popb_customer",
                                                        "type": "Guid"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "new_podata"
                                                    },
                                                    "sink": {
                                                        "name": "popb_data",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "Response Name"
                                                    },
                                                    "sink": {
                                                        "name": "popb_name",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "new_populatemappeddata"
                                                    },
                                                    "sink": {
                                                        "name": "popb_populatemappeddata",
                                                        "type": "Boolean"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "popb_portal",
                                                        "type": "Guid",
                                                        "physicalType": "uniqueidentifier"
                                                    },
                                                    "sink": {
                                                        "name": "popb_portal",
                                                        "type": "Guid"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "popb_questionnaire",
                                                        "type": "Guid",
                                                        "physicalType": "uniqueidentifier"
                                                    },
                                                    "sink": {
                                                        "name": "popb_questionnaire",
                                                        "type": "Guid"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "newresponseid"
                                                    },
                                                    "sink": {
                                                        "name": "popb_responsesid",
                                                        "type": "Guid"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "popb_updateanswersandmapping",
                                                        "type": "Boolean",
                                                        "physicalType": "bit"
                                                    },
                                                    "sink": {
                                                        "name": "popb_updateanswersandmapping",
                                                        "type": "Boolean"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "statecode",
                                                        "type": "Int32",
                                                        "physicalType": "int"
                                                    },
                                                    "sink": {
                                                        "name": "statecode",
                                                        "type": "Int32"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "statuscode",
                                                        "type": "Int32",
                                                        "physicalType": "int"
                                                    },
                                                    "sink": {
                                                        "name": "statuscode",
                                                        "type": "Int32"
                                                    }
                                                }
                                            ],
                                            "typeConversion": true,
                                            "typeConversionSettings": {
                                                "allowDataTruncation": true,
                                                "treatBooleanAsNumber": false
                                            }
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "ds_appboostCRM_sql",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "crm_servername": {
                                                    "value": "@pipeline().parameters.crm_servername",
                                                    "type": "Expression"
                                                },
                                                "crm_dbname": {
                                                    "value": "@pipeline().parameters.crm_dbname",
                                                    "type": "Expression"
                                                },
                                                "crm_username": {
                                                    "value": "@pipeline().parameters.crm_username",
                                                    "type": "Expression"
                                                },
                                                "vaulturl": {
                                                    "value": "@pipeline().parameters.vault_url",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "ds_ResponseBase",
                                            "type": "DatasetReference",
                                            "parameters": {}
                                        }
                                    ]
                                },
                                {
                                    "name": "Generate New FileUploadMapping",
                                    "type": "Copy",
                                    "dependsOn": [
                                        {
                                            "activity": "Generate New Response",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "SqlServerSource",
                                            "additionalColumns": [
                                                {
                                                    "name": "NewFileUploadMappingID",
                                                    "value": {
                                                        "value": "@pipeline().parameters.NewFileUploadMappingID",
                                                        "type": "Expression"
                                                    }
                                                },
                                                {
                                                    "name": "FileUploadMappingName",
                                                    "value": {
                                                        "value": "@concat('From UNC Path-', pipeline().parameters.OriginalName)",
                                                        "type": "Expression"
                                                    }
                                                },
                                                {
                                                    "name": "OriginalFileName",
                                                    "value": {
                                                        "value": "@pipeline().parameters.OriginalName",
                                                        "type": "Expression"
                                                    }
                                                },
                                                {
                                                    "name": "NewResponseID",
                                                    "value": {
                                                        "value": "@pipeline().parameters.NewResponseID",
                                                        "type": "Expression"
                                                    }
                                                }
                                            ],
                                            "sqlReaderQuery": {
                                                "value": "select f.popb_data [file_data],f.popb_purposeid [file_purposeid], f.statuscode [file_statuscode],f.statecode [file_statecode], r.* from popb_responsesbase r\ninner join popb_fileuploadmappingBase f on f.popb_responseid=r.popb_responsesId where popb_responsesid='@{pipeline().parameters.ResponseID}'",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "sink": {
                                            "type": "DynamicsCrmSink",
                                            "writeBatchSize": 10,
                                            "writeBehavior": "upsert",
                                            "ignoreNullValues": false
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "mappings": [
                                                {
                                                    "source": {
                                                        "name": "file_data",
                                                        "type": "String",
                                                        "physicalType": "nvarchar"
                                                    },
                                                    "sink": {
                                                        "name": "popb_data",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "NewFileUploadMappingID"
                                                    },
                                                    "sink": {
                                                        "name": "popb_fileuploadmappingid",
                                                        "type": "Guid"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "FileUploadMappingName"
                                                    },
                                                    "sink": {
                                                        "name": "popb_name",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "file_purposeid",
                                                        "type": "Guid",
                                                        "physicalType": "uniqueidentifier"
                                                    },
                                                    "sink": {
                                                        "name": "popb_purposeid",
                                                        "type": "Guid"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "NewResponseID"
                                                    },
                                                    "sink": {
                                                        "name": "popb_responseid",
                                                        "type": "Guid"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "OriginalFileName"
                                                    },
                                                    "sink": {
                                                        "name": "popb_uploadedfilename",
                                                        "type": "String"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "file_statecode",
                                                        "type": "Int32",
                                                        "physicalType": "int"
                                                    },
                                                    "sink": {
                                                        "name": "statecode",
                                                        "type": "Int32"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "file_statuscode",
                                                        "type": "Int32",
                                                        "physicalType": "int"
                                                    },
                                                    "sink": {
                                                        "name": "statuscode",
                                                        "type": "Int32"
                                                    }
                                                }
                                            ],
                                            "typeConversion": true,
                                            "typeConversionSettings": {
                                                "allowDataTruncation": true,
                                                "treatBooleanAsNumber": false
                                            }
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "ds_appboostCRM_sql",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "crm_servername": {
                                                    "value": "@pipeline().parameters.crm_servername",
                                                    "type": "Expression"
                                                },
                                                "crm_dbname": {
                                                    "value": "@pipeline().parameters.crm_dbname",
                                                    "type": "Expression"
                                                },
                                                "crm_username": {
                                                    "value": "@pipeline().parameters.crm_username",
                                                    "type": "Expression"
                                                },
                                                "vaulturl": {
                                                    "value": "@pipeline().parameters.vault_url",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "ds_Fileuploadmapping",
                                            "type": "DatasetReference",
                                            "parameters": {}
                                        }
                                    ]
                                },
                                {
                                    "name": "Delete file from validated folder",
                                    "type": "Delete",
                                    "dependsOn": [
                                        {
                                            "activity": "Copy validated to em_inbound",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "ds_raw_file",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "foldername": "raw/validated",
                                                "filename": {
                                                    "value": "@pipeline().parameters.SftpFileName",
                                                    "type": "Expression"
                                                },
                                                "storageaccountname": {
                                                    "value": "@pipeline().parameters.adlsName",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "enableLogging": false,
                                        "storeSettings": {
                                            "type": "AzureBlobFSReadSettings",
                                            "recursive": false,
                                            "enablePartitionDiscovery": false
                                        }
                                    }
                                },
                                {
                                    "name": "File Status Update",
                                    "type": "Copy",
                                    "dependsOn": [
                                        {
                                            "activity": "File Audit - Validated To EM_Inbound",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "SqlServerSource",
                                            "sqlReaderQuery": {
                                                "value": "select popb_fileuploadmappingid,777250008 as statuscode,0 as statecode from popb_fileuploadmappingBase where popb_responseid='@{pipeline().parameters.NewResponseID}'",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "sink": {
                                            "type": "DynamicsCrmSink",
                                            "writeBatchSize": 10,
                                            "writeBehavior": "upsert",
                                            "ignoreNullValues": false
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "mappings": [
                                                {
                                                    "source": {
                                                        "name": "popb_fileuploadmappingid",
                                                        "type": "Guid",
                                                        "physicalType": "uniqueidentifier"
                                                    },
                                                    "sink": {
                                                        "name": "popb_fileuploadmappingid",
                                                        "type": "Guid"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "statecode",
                                                        "type": "Int32",
                                                        "physicalType": "int"
                                                    },
                                                    "sink": {
                                                        "name": "statecode",
                                                        "type": "Int32"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "name": "statuscode",
                                                        "type": "Int32",
                                                        "physicalType": "int"
                                                    },
                                                    "sink": {
                                                        "name": "statuscode",
                                                        "type": "Int32"
                                                    }
                                                }
                                            ],
                                            "typeConversion": true,
                                            "typeConversionSettings": {
                                                "allowDataTruncation": true,
                                                "treatBooleanAsNumber": false
                                            }
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "ds_appboostCRM_sql",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "crm_servername": {
                                                    "value": "@pipeline().parameters.crm_servername",
                                                    "type": "Expression"
                                                },
                                                "crm_dbname": {
                                                    "value": "@pipeline().parameters.crm_dbname",
                                                    "type": "Expression"
                                                },
                                                "crm_username": {
                                                    "value": "@pipeline().parameters.crm_username",
                                                    "type": "Expression"
                                                },
                                                "vaulturl": {
                                                    "value": "@pipeline().parameters.vault_url",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "ds_Fileuploadmapping",
                                            "type": "DatasetReference",
                                            "parameters": {}
                                        }
                                    ]
                                },
                                {
                                    "name": "Fetch Complete File Metadata",
                                    "type": "Lookup",
                                    "dependsOn": [
                                        {
                                            "activity": "Set PurposeId",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        },
                                        {
                                            "activity": "Set ScoringInfo",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "SqlServerSource",
                                            "sqlReaderQuery": {
                                                "value": "select \nf.popb_fileuploadmappingId, f.popb_data,f.popb_responseid,p.popb_name [popb_purposeidname],\nr.popb_name [popb_responseidname],\nanswr.popb_responsequestion,answr.popb_responseanswer,\nrq.popb_name [answr.popb_responsequestionname],\nAccountBase.name [cnt.po_institutionidname]\nfrom\npopb_fileuploadmappingBase f\ninner join popb_responsesBase r on f.popb_responseid=r.popb_responsesId and r.statuscode=1\nINNER join popb_questionnairreBase q on r.popb_questionnaire=q.popb_questionnairreId and q.popb_questionnairetypes='777250002'\ninner join popb_responseanswerBase answr on answr.popb_parentresponse=r.popb_responsesid\ninner join popb_purposeBase p on p.popb_purposeId=f.popb_purposeid\ninner join popb_responsequestionBase rq on rq.popb_responsequestionId=answr.popb_responsequestion\ninner join (select ranswr.popb_responseanswer,rp.popb_responsesId from\n    popb_responseanswerBase ranswr\n    inner join popb_responsequestionBase rquest on ranswr.popb_responsequestion=rquest.popb_responsequestionId\n    inner join popb_responses rp on ranswr.popb_parentresponse=rp.popb_responsesId\n    INNER join popb_questionnairreBase qr on rp.popb_questionnaire=qr.popb_questionnairreId and qr.popb_questionnairetypes='777250002'\n    where\n    rquest.popb_name='Account' AND (ranswr.popb_responseanswer is not null AND len(ranswr.popb_responseanswer)>31)) cnt on r.popb_responsesId=cnt.popb_responsesId\ninner join AccountBase on cnt.popb_responseanswer=AccountBase.AccountId\nwhere \nf.popb_responseid='@{pipeline().parameters.ResponseID}' and p.popb_name like 'EM%'",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "ds_appboostCRM_sql",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "crm_servername": {
                                                    "value": "@pipeline().parameters.crm_servername",
                                                    "type": "Expression"
                                                },
                                                "crm_dbname": {
                                                    "value": "@pipeline().parameters.crm_dbname",
                                                    "type": "Expression"
                                                },
                                                "crm_username": {
                                                    "value": "@pipeline().parameters.crm_username",
                                                    "type": "Expression"
                                                },
                                                "vaulturl": {
                                                    "value": "@pipeline().parameters.vault_url",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "firstRowOnly": true
                                    }
                                },
                                {
                                    "name": "Fetch Scoring Info",
                                    "type": "Lookup",
                                    "dependsOn": [
                                        {
                                            "activity": "File Audit - Raw To Validated",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "SqlServerSource",
                                            "sqlReaderQuery": {
                                                "value": "select purpose1,\nSTUFF(LEFT(ScoringModel, LEN(ScoringModel) - PATINDEX('%[^,]%', REVERSE(ScoringModel)) + 1), 1, PATINDEX('%[^,]%', ScoringModel) - 1, '') ScoringInfo\nfrom \n(\nselect popb_responsesId,JSON_VALUE(popb_data,'$.purpose1') as purpose1,\nconcat(CASE\n    WHEN (JSON_VALUE(popb_data,'$.isScoringEnabled[0]') is not null) THEN '\"isScoringEnabled\":[\"Yes\"],'\nEND , CASE\n    WHEN (JSON_VALUE(popb_data,'$.isModelingEnabled[0]') is not null) THEN '\"isModelingEnabled\":[\"Yes\"],'\nEND, CASE\n    WHEN (JSON_VALUE(popb_data,'$.ScoringModel') is not null) THEN '\"ScoringModel\":\"'+JSON_VALUE(popb_data,'$.ScoringModel')+'\",'\nEND )as ScoringModel\nfrom popb_responsesBase \nwhere popb_responsesId = '@{pipeline().parameters.ResponseID}'\n) cte",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "ds_appboostCRM_sql",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "crm_servername": {
                                                    "value": "@pipeline().parameters.crm_servername",
                                                    "type": "Expression"
                                                },
                                                "crm_dbname": {
                                                    "value": "@pipeline().parameters.crm_dbname",
                                                    "type": "Expression"
                                                },
                                                "crm_username": {
                                                    "value": "@pipeline().parameters.crm_username",
                                                    "type": "Expression"
                                                },
                                                "vaulturl": {
                                                    "value": "@pipeline().parameters.vault_url",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "firstRowOnly": false
                                    }
                                },
                                {
                                    "name": "Set PurposeId",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "Fetch Scoring Info",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "PurposeID",
                                        "value": {
                                            "value": "@if(greater(length(activity('Fetch Scoring Info').output.value),0),activity('Fetch Scoring Info').output.value[0].purpose1,'')",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Set ScoringInfo",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "Fetch Scoring Info",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "ScoringInfo",
                                        "value": {
                                            "value": "@if(greater(length(activity('Fetch Scoring Info').output.value),0),activity('Fetch Scoring Info').output.value[0].ScoringInfo,'')",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Email - File Ingestion Success",
                                    "type": "WebActivity",
                                    "dependsOn": [
                                        {
                                            "activity": "End ETL Audit",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "url": {
                                            "value": "@pipeline().parameters.EmailSuccess",
                                            "type": "Expression"
                                        },
                                        "connectVia": {
                                            "referenceName": "AutoResolveIntegrationRuntime",
                                            "type": "IntegrationRuntimeReference"
                                        },
                                        "method": "POST",
                                        "headers": {
                                            "Content-Type": "application/json"
                                        },
                                        "body": {
                                            "value": "{\n\"DataFactoryName\": \"@{pipeline().DataFactory}\",\n\"EmailTo\": \"diafplus@ruffalonl.com\",\n\"PipelineName\": \"@{pipeline().Pipeline}\",\n\"Subject\": \"File Ingestion Successful!\"\n}",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "ETL Audit-Copy Failed Raw to validated",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [
                                        {
                                            "activity": "copy raw to validated",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                                        "baseParameters": {
                                            "audit_id": "107",
                                            "adf_run_id": {
                                                "value": "@pipeline().parameters.ParentPipelineRunID",
                                                "type": "Expression"
                                            },
                                            "adf_pipeline_name": {
                                                "value": "@pipeline().parameters.ParentPipelineName",
                                                "type": "Expression"
                                            },
                                            "adf_trigger_name": {
                                                "value": "@pipeline().parameters.ParentPipelineTriggerName",
                                                "type": "Expression"
                                            },
                                            "pipeline_status": "Failed",
                                            "error_description": {
                                                "value": "@activity('copy raw to validated').output.errors[0].Message",
                                                "type": "Expression"
                                            },
                                            "server_name": {
                                                "value": "@pipeline().parameters.az_sql_server_name",
                                                "type": "Expression"
                                            },
                                            "database_name": {
                                                "value": "@pipeline().parameters.az_sql_db_name",
                                                "type": "Expression"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_NDPdatabricks",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "ETL Audit-Copy Failed validated EM_Inbound",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [
                                        {
                                            "activity": "Copy validated to em_inbound",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                                        "baseParameters": {
                                            "audit_id": "107",
                                            "adf_run_id": {
                                                "value": "@pipeline().parameters.ParentPipelineRunID",
                                                "type": "Expression"
                                            },
                                            "adf_pipeline_name": {
                                                "value": "@pipeline().parameters.ParentPipelineName",
                                                "type": "Expression"
                                            },
                                            "adf_trigger_name": {
                                                "value": "@pipeline().parameters.ParentPipelineTriggerName",
                                                "type": "Expression"
                                            },
                                            "pipeline_status": "Failed",
                                            "error_description": {
                                                "value": "@activity('Copy validated to em_inbound').output.errors[0].Message",
                                                "type": "Expression"
                                            },
                                            "server_name": {
                                                "value": "@pipeline().parameters.az_sql_server_name",
                                                "type": "Expression"
                                            },
                                            "database_name": {
                                                "value": "@pipeline().parameters.az_sql_db_name",
                                                "type": "Expression"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_NDPdatabricks",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "End ETL Audit",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [
                                        {
                                            "activity": "File Metadata Audit",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        },
                                        {
                                            "activity": "File_null_value_check",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                                        "baseParameters": {
                                            "audit_id": "106",
                                            "adf_run_id": {
                                                "value": "@pipeline().parameters.ParentPipelineRunID",
                                                "type": "Expression"
                                            },
                                            "adf_pipeline_name": {
                                                "value": "@pipeline().parameters.ParentPipelineName",
                                                "type": "Expression"
                                            },
                                            "adf_trigger_name": {
                                                "value": "@pipeline().parameters.ParentPipelineTriggerName",
                                                "type": "Expression"
                                            },
                                            "pipeline_status": "Successfully copied file to inbound folder",
                                            "server_name": {
                                                "value": "@pipeline().parameters.az_sql_server_name",
                                                "type": "Expression"
                                            },
                                            "database_name": {
                                                "value": "@pipeline().parameters.az_sql_db_name",
                                                "type": "Expression"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_NDPdatabricks",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "File Audit - Raw To Validated",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [
                                        {
                                            "activity": "copy raw to validated",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": "/audit-Framework/dbn-file-processing-log",
                                        "baseParameters": {
                                            "audit_id": "102",
                                            "adf_run_id": {
                                                "value": "@pipeline().parameters.ParentPipelineRunID",
                                                "type": "Expression"
                                            },
                                            "response_id": {
                                                "value": "@pipeline().parameters.NewResponseID",
                                                "type": "Expression"
                                            },
                                            "purpose_file_name": {
                                                "value": "@pipeline().parameters.PurposeName",
                                                "type": "Expression"
                                            },
                                            "account_name": {
                                                "value": "@pipeline().parameters.AccountName",
                                                "type": "Expression"
                                            },
                                            "file_processing_stage": "validated",
                                            "status": "Copied In validated Folder",
                                            "row_count": {
                                                "value": "@string(activity('File_HealthCheck').output.runOutput[0])",
                                                "type": "Expression"
                                            },
                                            "rejected_row": {
                                                "value": "0",
                                                "type": "Expression"
                                            },
                                            "mapping_id": {
                                                "value": "@pipeline().parameters.NewFileUploadMappingID",
                                                "type": "Expression"
                                            },
                                            "server_name": {
                                                "value": "@pipeline().parameters.az_sql_server_name",
                                                "type": "Expression"
                                            },
                                            "database_name": {
                                                "value": "@pipeline().parameters.az_sql_db_name",
                                                "type": "Expression"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_NDPdatabricks",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "File Audit - Validated To EM_Inbound",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [
                                        {
                                            "activity": "Delete file from validated folder",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": "/audit-Framework/dbn-file-processing-log",
                                        "baseParameters": {
                                            "audit_id": "103",
                                            "adf_run_id": {
                                                "value": "@pipeline().parameters.ParentPipelineRunID",
                                                "type": "Expression"
                                            },
                                            "response_id": {
                                                "value": "@pipeline().parameters.NewResponseID",
                                                "type": "Expression"
                                            },
                                            "mapping_id": {
                                                "value": "@pipeline().parameters.NewFileUploadMappingID",
                                                "type": "Expression"
                                            },
                                            "purpose_file_name": {
                                                "value": "@pipeline().parameters.PurposeName",
                                                "type": "Expression"
                                            },
                                            "account_name": {
                                                "value": "@pipeline().parameters.AccountName",
                                                "type": "Expression"
                                            },
                                            "file_processing_stage": "em_inbound",
                                            "status": "Copied In em_inbound Folder",
                                            "row_count": {
                                                "value": "@string(activity('File_HealthCheck').output.runOutput[0])",
                                                "type": "Expression"
                                            },
                                            "rejected_row": {
                                                "value": "0",
                                                "type": "Expression"
                                            },
                                            "server_name": {
                                                "value": "@pipeline().parameters.az_sql_server_name",
                                                "type": "Expression"
                                            },
                                            "database_name": {
                                                "value": "@pipeline().parameters.az_sql_db_name",
                                                "type": "Expression"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_NDPdatabricks",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "File Metadata Audit",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [
                                        {
                                            "activity": "Genrerate Schema",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": "/audit-Framework/dbn-file-metadata-audit",
                                        "baseParameters": {
                                            "response_id": {
                                                "value": "@pipeline().parameters.NewResponseID",
                                                "type": "Expression"
                                            },
                                            "mapping_id": {
                                                "value": "@pipeline().parameters.NewFileUploadMappingID",
                                                "type": "Expression"
                                            },
                                            "file_source": {
                                                "value": "@pipeline().parameters.source",
                                                "type": "Expression"
                                            },
                                            "file_purpose": {
                                                "value": "@substring(pipeline().parameters.PurposeName,0,2)",
                                                "type": "Expression"
                                            },
                                            "purpose_name": {
                                                "value": "@pipeline().parameters.PurposeName",
                                                "type": "Expression"
                                            },
                                            "original_filename": {
                                                "value": "@pipeline().parameters.OriginalName",
                                                "type": "Expression"
                                            },
                                            "modified_filename": {
                                                "value": "@variables('FileNameModified')",
                                                "type": "Expression"
                                            },
                                            "account_name": {
                                                "value": "@pipeline().parameters.AccountName",
                                                "type": "Expression"
                                            },
                                            "account_id": {
                                                "value": "@pipeline().parameters.AccountID",
                                                "type": "Expression"
                                            },
                                            "file_load_type": "Single",
                                            "record_count": {
                                                "value": "@string(activity('File_HealthCheck').output.runOutput[0])",
                                                "type": "Expression"
                                            },
                                            "file_size_kb": {
                                                "value": "@string(div(activity('Copy validated to EM_Inbound').output.dataWritten,1024))",
                                                "type": "Expression"
                                            },
                                            "file_format": {
                                                "value": "@split(pipeline().parameters.SftpFileName,'.')[1]",
                                                "type": "Expression"
                                            },
                                            "fiscal_yr": {
                                                "value": "@string(pipeline().parameters.FiscalYear)",
                                                "type": "Expression"
                                            },
                                            "fiscal_year_month": {
                                                "value": "@string(pipeline().parameters.FiscalMonth)",
                                                "type": "Expression"
                                            },
                                            "schema_json": {
                                                "value": "@replace(activity('Fetch Complete File Metadata').output.firstrow.popb_data,'''','')",
                                                "type": "Expression"
                                            },
                                            "file_upload_datetime": {
                                                "value": "@utcNow()",
                                                "type": "Expression"
                                            },
                                            "received_datetime": {
                                                "value": "@utcNow()",
                                                "type": "Expression"
                                            },
                                            "delimiter": {
                                                "value": "@string(activity('File_metadata_details').output.firstRow.Delimiter)",
                                                "type": "Expression"
                                            },
                                            "file_encoding": {
                                                "value": "@string(activity('File_metadata_details').output.firstRow.FileEncoding)",
                                                "type": "Expression"
                                            },
                                            "server_name": {
                                                "value": "@pipeline().parameters.az_sql_server_name",
                                                "type": "Expression"
                                            },
                                            "database_name": {
                                                "value": "@pipeline().parameters.az_sql_db_name",
                                                "type": "Expression"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_NDPdatabricks",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "Genrerate Schema",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [
                                        {
                                            "activity": "File Status Update",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "pip-config-schema",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "PurposeName": {
                                                "value": "@pipeline().parameters.PurposeName",
                                                "type": "Expression"
                                            },
                                            "AccountID": {
                                                "value": "@pipeline().parameters.AccountID",
                                                "type": "Expression"
                                            },
                                            "ResponseID": {
                                                "value": "@pipeline().parameters.ResponseID",
                                                "type": "Expression"
                                            },
                                            "FilePath": {
                                                "value": "@concat('em_inbound/',pipeline().parameters.PurposeName,'/',variables('FileNameModified'),'/')",
                                                "type": "Expression"
                                            },
                                            "crm_servername": {
                                                "value": "@pipeline().parameters.crm_servername",
                                                "type": "Expression"
                                            },
                                            "crm_dbname": {
                                                "value": "@pipeline().parameters.crm_dbname",
                                                "type": "Expression"
                                            },
                                            "crm_username": {
                                                "value": "@pipeline().parameters.crm_username",
                                                "type": "Expression"
                                            },
                                            "Containername": {
                                                "value": "@pipeline().parameters.containerName",
                                                "type": "Expression"
                                            },
                                            "SchemaFilename": {
                                                "value": "@pipeline().parameters.SchemaFilename",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            },
                                            "storageaccountname": {
                                                "value": "@pipeline().parameters.adlsName",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "File_null_value_check",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [
                                        {
                                            "activity": "Genrerate Schema",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": "/audit-Framework/dbn-file-healthcheck-log",
                                        "baseParameters": {
                                            "adf_run_id": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "adf_pipeline_name": {
                                                "value": "@pipeline().Pipeline",
                                                "type": "Expression"
                                            },
                                            "adf_trigger_name": {
                                                "value": "@pipeline().TriggerName",
                                                "type": "Expression"
                                            },
                                            "account_name": {
                                                "value": "@pipeline().parameters.AccountName",
                                                "type": "Expression"
                                            },
                                            "adlsName": {
                                                "value": "@pipeline().parameters.adlsName",
                                                "type": "Expression"
                                            },
                                            "containerName": {
                                                "value": "@pipeline().parameters.containerName",
                                                "type": "Expression"
                                            },
                                            "rawpath": {
                                                "value": "@concat('em_inbound/',pipeline().parameters.PurposeName,'/',variables('FileNameModified'))",
                                                "type": "Expression"
                                            },
                                            "FileName": {
                                                "value": "@variables('FileNameModified')",
                                                "type": "Expression"
                                            },
                                            "mapping_id": {
                                                "value": "@pipeline().parameters.NewFileUploadMappingID",
                                                "type": "Expression"
                                            },
                                            "responseid": {
                                                "value": "@pipeline().parameters.NewResponseID",
                                                "type": "Expression"
                                            },
                                            "categoryName": {
                                                "value": "@substring(pipeline().parameters.PurposeName,0,2)",
                                                "type": "Expression"
                                            },
                                            "purposeName": {
                                                "value": "@pipeline().parameters.PurposeName",
                                                "type": "Expression"
                                            },
                                            "validation": "empty record check",
                                            "schemaFilename": {
                                                "value": "@pipeline().parameters.SchemaFilename",
                                                "type": "Expression"
                                            },
                                            "source": {
                                                "value": "@pipeline().parameters.source",
                                                "type": "Expression"
                                            },
                                            "delimiter": {
                                                "value": "@string(activity('File_metadata_details').output.firstRow.Delimiter)",
                                                "type": "Expression"
                                            },
                                            "mountPath": "/mnt/datalanding",
                                            "server_name": {
                                                "value": "@pipeline().parameters.az_sql_server_name",
                                                "type": "Expression"
                                            },
                                            "database_name": {
                                                "value": "@pipeline().parameters.az_sql_db_name",
                                                "type": "Expression"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_NDPdatabricks",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "File_metadata_details",
                                    "type": "Lookup",
                                    "dependsOn": [
                                        {
                                            "activity": "Fetch Complete File Metadata",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "SqlServerSource",
                                            "sqlReaderQuery": {
                                                "value": "select distinct   right(x1.popb_responsequestionidentifier,1) fileorder, r.popb_responsesId ,  x1.popb_uploadedfilename, x1.popb_fileuploadmappingId,x1.popb_name [popb_purposeidname], x1.popb_purposeId, r.popb_name [popb_responseidname],  x2.answer [Account],  (select top 1 ra.popb_name 'answer'         from  popb_responseanswer ra with (nolock)          inner join popb_responsequestion rq (nolock) on ra.popb_responsequestion=rq.popb_responsequestionId         where         rq.popb_name in ('Fiscal Year')         and r.popb_responsesid=ra.popb_parentresponse ) Fiscal_Year  ,x3.answer [Delimiter] ,x4.answer [FileEncoding] ,x5.answer [Action]  from popb_responses  r inner join (     select ra.popb_name 'answer',rq.popb_name 'question',rq.popb_responsequestionidentifier,ra.popb_parentresponse, f.popb_uploadedfilename,          f.popb_fileuploadmappingId,p.popb_name,f.popb_processenddate,f.statuscode, p.popb_purposeId         from  popb_responseanswer ra with (nolock)          inner join popb_responsequestion rq (nolock) on ra.popb_responsequestion=rq.popb_responsequestionId         inner join popb_fileuploadmapping f on f.popb_responseid=ra.popb_parentresponse and cast(ra.popb_name as varchar(38))=cast(f.popb_uploadedfilename as varchar(38))         inner join popb_purposeBase p on f.popb_purposeid=p.popb_purposeid         where         rq.popb_name in ('File Name')         ) x1  on r.popb_responsesid=x1.popb_parentresponse inner join (     select distinct ra.popb_name 'answer',rq.popb_name 'question',rq.popb_responsequestionidentifier,ra.popb_parentresponse         from  popb_responseanswer ra with (nolock)          inner join popb_responsequestion rq (nolock) on ra.popb_responsequestion=rq.popb_responsequestionId         where         rq.popb_name in ('Account')         ) x2  on r.popb_responsesid=x2.popb_parentresponse inner join (     select ra.popb_name 'answer',rq.popb_name 'question',rq.popb_responsequestionidentifier,ra.popb_parentresponse         from  popb_responseanswer ra with (nolock)          inner join popb_responsequestion rq (nolock) on ra.popb_responsequestion=rq.popb_responsequestionId         where         rq.popb_name in ('Delimiter')         ) x3  on r.popb_responsesid=x3.popb_parentresponse and right(x1.popb_responsequestionidentifier,1)=RIGHT(x3.popb_responsequestionidentifier,1) inner join (     select ra.popb_name 'answer',rq.popb_name 'question',rq.popb_responsequestionidentifier,ra.popb_parentresponse         from  popb_responseanswer ra with (nolock)          inner join popb_responsequestion rq (nolock) on ra.popb_responsequestion=rq.popb_responsequestionId         where         rq.popb_name in ('File Encoding')         ) x4  on r.popb_responsesid=x4.popb_parentresponse and right(x1.popb_responsequestionidentifier,1)=RIGHT(x4.popb_responsequestionidentifier,1) left join (     select ra.popb_name 'answer',rq.popb_name 'question',rq.popb_responsequestionidentifier,ra.popb_parentresponse         from  popb_responseanswer ra with (nolock)          inner join popb_responsequestion rq (nolock) on ra.popb_responsequestion=rq.popb_responsequestionId         where         rq.popb_name in ('Merge Contacts or Append Attributes')         ) x5  on r.popb_responsesid=x5.popb_parentresponse and right(x1.popb_responsequestionidentifier,1)=RIGHT(x5.popb_responsequestionidentifier,1) where x1.popb_processenddate is null and x1.statuscode='777250008' and popb_responsesid='@{pipeline().parameters.ResponseID}'\n",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "ds_appboostCRM_sql",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "crm_servername": {
                                                    "value": "@pipeline().parameters.crm_servername",
                                                    "type": "Expression"
                                                },
                                                "crm_dbname": {
                                                    "value": "@pipeline().parameters.crm_dbname",
                                                    "type": "Expression"
                                                },
                                                "crm_username": {
                                                    "value": "@pipeline().parameters.crm_username",
                                                    "type": "Expression"
                                                },
                                                "vaulturl": {
                                                    "value": "@pipeline().parameters.vault_url",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "firstRowOnly": true
                                    }
                                },
                                {
                                    "name": "ETL Audit- Metadata audit",
                                    "type": "DatabricksNotebook",
                                    "dependsOn": [
                                        {
                                            "activity": "File Metadata Audit",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        },
                                        {
                                            "activity": "File_null_value_check",
                                            "dependencyConditions": [
                                                "Failed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "notebookPath": "/audit-Framework/dbn-etl-audit-log",
                                        "baseParameters": {
                                            "audit_id": "107",
                                            "adf_run_id": {
                                                "value": "@pipeline().parameters.ParentPipelineRunID",
                                                "type": "Expression"
                                            },
                                            "adf_pipeline_name": {
                                                "value": "@pipeline().parameters.ParentPipelineName",
                                                "type": "Expression"
                                            },
                                            "adf_trigger_name": {
                                                "value": "@pipeline().parameters.ParentPipelineTriggerName",
                                                "type": "Expression"
                                            },
                                            "pipeline_status": "Failed",
                                            "error_description": {
                                                "value": "@activity('Copy validated to em_inbound').output.errors[0].Message",
                                                "type": "Expression"
                                            },
                                            "server_name": {
                                                "value": "@pipeline().parameters.az_sql_server_name",
                                                "type": "Expression"
                                            },
                                            "database_name": {
                                                "value": "@pipeline().parameters.az_sql_db_name",
                                                "type": "Expression"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "ls_NDPdatabricks",
                                        "type": "LinkedServiceReference",
                                        "parameters": {
                                            "databricks_workspace_url": {
                                                "value": "@pipeline().parameters.databricks_workspace_url",
                                                "type": "Expression"
                                            },
                                            "databricks_clusterid": {
                                                "value": "@pipeline().parameters.databricks_clusterid",
                                                "type": "Expression"
                                            },
                                            "vault_url": {
                                                "value": "@pipeline().parameters.vault_url",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "Email - File null value check",
                                    "type": "WebActivity",
                                    "dependsOn": [
                                        {
                                            "activity": "File_null_value_check",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "url": {
                                            "value": "@pipeline().parameters.EmailSuccess",
                                            "type": "Expression"
                                        },
                                        "connectVia": {
                                            "referenceName": "AutoResolveIntegrationRuntime",
                                            "type": "IntegrationRuntimeReference"
                                        },
                                        "method": "POST",
                                        "headers": {
                                            "Content-Type": "application/json"
                                        },
                                        "body": {
                                            "value": "{\n\"DataFactoryName\": \"@{pipeline().DataFactory}\",\n\"EmailTo\": \"ganesh.gawli@ruffalonl.com\",\n\"PipelineName\": \"@{pipeline().Pipeline}\",\n\"Subject\": \"File Null check completed!\"\n}",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "copy raw to validated",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "DelimitedTextSource",
                                            "storeSettings": {
                                                "type": "AzureBlobFSReadSettings",
                                                "recursive": true,
                                                "enablePartitionDiscovery": false
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextReadSettings"
                                            }
                                        },
                                        "sink": {
                                            "type": "DelimitedTextSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextWriteSettings",
                                                "quoteAllText": true,
                                                "fileExtension": ".txt"
                                            }
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "typeConversion": true,
                                            "typeConversionSettings": {
                                                "allowDataTruncation": true,
                                                "treatBooleanAsNumber": false
                                            }
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "ds_FilesToRename",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "Containername": {
                                                    "value": "@pipeline().parameters.containerName",
                                                    "type": "Expression"
                                                },
                                                "Filepath": {
                                                    "value": "@concat('raw/',split(pipeline().parameters.PurposeName,' ')[0],'/',pipeline().parameters.PurposeName,'/',formatDateTime(utcnow(), 'yyyy'),'/',formatDateTime(utcnow(), 'MM'), '/', formatDateTime(utcnow(), 'dd'),'/',pipeline().parameters.AccountName)",
                                                    "type": "Expression"
                                                },
                                                "Filename": {
                                                    "value": "@pipeline().parameters.SftpFileName",
                                                    "type": "Expression"
                                                },
                                                "storageaccountname": {
                                                    "value": "@pipeline().parameters.adlsName",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "ds_FilesToRename",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "Containername": {
                                                    "value": "@pipeline().parameters.containerName",
                                                    "type": "Expression"
                                                },
                                                "Filepath": {
                                                    "value": "raw/validated",
                                                    "type": "Expression"
                                                },
                                                "Filename": {
                                                    "value": "@pipeline().parameters.SftpFileName",
                                                    "type": "Expression"
                                                },
                                                "storageaccountname": {
                                                    "value": "@pipeline().parameters.adlsName",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "Copy validated to em_inbound",
                                    "type": "Copy",
                                    "dependsOn": [
                                        {
                                            "activity": "Generate New FileUploadMapping",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "DelimitedTextSource",
                                            "storeSettings": {
                                                "type": "AzureBlobFSReadSettings",
                                                "recursive": true,
                                                "enablePartitionDiscovery": false
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextReadSettings"
                                            }
                                        },
                                        "sink": {
                                            "type": "DelimitedTextSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextWriteSettings",
                                                "quoteAllText": true,
                                                "fileExtension": ".txt"
                                            }
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "typeConversion": true,
                                            "typeConversionSettings": {
                                                "allowDataTruncation": true,
                                                "treatBooleanAsNumber": false
                                            }
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "ds_FilesToRename",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "Containername": {
                                                    "value": "@pipeline().parameters.containerName",
                                                    "type": "Expression"
                                                },
                                                "Filepath": {
                                                    "value": "raw/validated",
                                                    "type": "Expression"
                                                },
                                                "Filename": {
                                                    "value": "@pipeline().parameters.SftpFileName",
                                                    "type": "Expression"
                                                },
                                                "storageaccountname": {
                                                    "value": "@pipeline().parameters.adlsName",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "ds_FilesToRename",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "Containername": {
                                                    "value": "@pipeline().parameters.containerName",
                                                    "type": "Expression"
                                                },
                                                "Filepath": {
                                                    "value": "@concat('em_inbound/',pipeline().parameters.PurposeName,'/',variables('FileNameModified'),'/')",
                                                    "type": "Expression"
                                                },
                                                "Filename": {
                                                    "value": "@variables('FileNameModified')",
                                                    "type": "Expression"
                                                },
                                                "storageaccountname": {
                                                    "value": "@pipeline().parameters.adlsName",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "name": "File_HealthCheck",
                        "type": "DatabricksNotebook",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/audit-Framework/dbn-healthcheck-validation",
                            "baseParameters": {
                                "FileName": {
                                    "value": "@pipeline().parameters.SftpFileName",
                                    "type": "Expression"
                                },
                                "adlsName": {
                                    "value": "@pipeline().parameters.adlsName",
                                    "type": "Expression"
                                },
                                "containerName": {
                                    "value": "datalanding",
                                    "type": "Expression"
                                },
                                "mountPath": "/mnt/datalanding",
                                "rawpath": {
                                    "value": "@concat('raw/',split(pipeline().parameters.PurposeName,' ')[0],'/',pipeline().parameters.PurposeName,'/',formatDateTime(utcnow(), 'yyyy'),'/',formatDateTime(utcnow(), 'MM'), '/', formatDateTime(utcnow(), 'dd'),'/',pipeline().parameters.AccountName)",
                                    "type": "Expression"
                                },
                                "responseid": {
                                    "value": "@pipeline().parameters.ResponseID",
                                    "type": "Expression"
                                },
                                "source": {
                                    "value": "@pipeline().parameters.source",
                                    "type": "Expression"
                                },
                                "adf_run_id": {
                                    "value": "@pipeline().RunId",
                                    "type": "Expression"
                                },
                                "adf_pipeline_name": {
                                    "value": "@pipeline().Pipeline",
                                    "type": "Expression"
                                },
                                "adf_trigger_name": {
                                    "value": "@pipeline().TriggerName",
                                    "type": "Expression"
                                },
                                "purposeName": {
                                    "value": "@pipeline().parameters.PurposeName",
                                    "type": "Expression"
                                },
                                "categoryName": {
                                    "value": "@split(pipeline().parameters.PurposeName,' ')[0]\n",
                                    "type": "Expression"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_NDPdatabricks",
                            "type": "LinkedServiceReference",
                            "parameters": {
                                "databricks_workspace_url": {
                                    "value": "@pipeline().parameters.databricks_workspace_url",
                                    "type": "Expression"
                                },
                                "databricks_clusterid": {
                                    "value": "@pipeline().parameters.databricks_clusterid",
                                    "type": "Expression"
                                },
                                "vault_url": {
                                    "value": "@pipeline().parameters.vault_url",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "SftpFileName": {
                        "type": "string"
                    },
                    "AccountID": {
                        "type": "string"
                    },
                    "ResponseID": {
                        "type": "string"
                    },
                    "AccountName": {
                        "type": "string"
                    },
                    "PurposeName": {
                        "type": "string"
                    },
                    "ParentPipelineName": {
                        "type": "string"
                    },
                    "ParentPipelineRunID": {
                        "type": "string"
                    },
                    "ParentPipelineTriggerName": {
                        "type": "string"
                    },
                    "FiscalMonth": {
                        "type": "string"
                    },
                    "FiscalYear": {
                        "type": "string"
                    },
                    "RowsRead": {
                        "type": "int"
                    },
                    "RowsWritten": {
                        "type": "int"
                    },
                    "OriginalName": {
                        "type": "string"
                    },
                    "source": {
                        "type": "string"
                    },
                    "NewResponseID": {
                        "type": "string"
                    },
                    "NewFileUploadMappingID": {
                        "type": "string"
                    },
                    "SchemaFilename": {
                        "type": "string"
                    },
                    "adlsName": {
                        "type": "string"
                    },
                    "containerName": {
                        "type": "string"
                    },
                    "az_sql_server_name": {
                        "type": "string"
                    },
                    "az_sql_db_name": {
                        "type": "string"
                    },
                    "databricks_workspace_url": {
                        "type": "string"
                    },
                    "databricks_clusterid": {
                        "type": "string"
                    },
                    "vault_url": {
                        "type": "string"
                    },
                    "crm_servername": {
                        "type": "string"
                    },
                    "crm_dbname": {
                        "type": "string"
                    },
                    "crm_username": {
                        "type": "string"
                    },
                    "EmailSuccess": {
                        "type": "string"
                    },
                    "EmailFailure": {
                        "type": "string"
                    }
                },
                "variables": {
                    "FileNameModified": {
                        "type": "String"
                    },
                    "ScoringInfo": {
                        "type": "String"
                    },
                    "PurposeID": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Datalanding/SFTPtoADLS"
                },
                "annotations": [],
                "lastPublishTime": "2022-11-07T17:24:39Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-campusesp-application-upsert')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "TransformData",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [
                            {
                                "activity": "Fetch Application Record",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "1.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "df_campusesp_application_upsert",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "GetFetchedApplicationData": {
                                        "tablename": "po_application_campusesp_tmp",
                                        "schemaname": "etl"
                                    },
                                    "sinktemp7": {
                                        "tablename": "campusesp_noupdate_tmp",
                                        "schemaname": "etl"
                                    },
                                    "sinktemp5": {
                                        "tablename": "campusesp_lead_tmp",
                                        "schemaname": "etl"
                                    },
                                    "sinktemp6": {
                                        "tablename": "campusesp_search_tmp",
                                        "schemaname": "etl"
                                    },
                                    "sinktemp8": {
                                        "tablename": "campusesp_lead_dt_tmp",
                                        "schemaname": "etl"
                                    },
                                    "sinktemp9": {
                                        "tablename": "campusesp_search_dt_tmp",
                                        "schemaname": "etl"
                                    },
                                    "sinktemp10": {
                                        "tablename": "campusesp_noupdate_dt_tmp",
                                        "schemaname": "etl"
                                    }
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    },
                    {
                        "name": "Fetch Application Record",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlServerSource",
                                "sqlReaderQuery": {
                                    "value": "SELECT distinct ab.po_applicationid,a.student_id,ab.po_SearchResponseMethod,ab.po_lookupid,ab.po_flag_inq,ab.po_date_inq,cb.contactid,cb.CreatedOn FROM [dbo].[CampusESPtoRNL_Staging] a \nleft join .dbo.contactbase cb on \ncb.po_contactnumber COLLATE DATABASE_DEFAULT=a.student_id COLLATE DATABASE_DEFAULT\nleft join dbo.po_applicationBase ab on\nab.po_contactid=cb.contactid\nwhere (a.student_id!='' OR a.student_id IS NOT NULL)",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": "truncate table [etl].[po_application_campusesp_tmp]",
                                "writeBehavior": "Insert",
                                "sqlWriterUseTableLock": false,
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ds_appboost_crm",
                                "type": "DatasetReference",
                                "parameters": {
                                    "crm_schema": "dbo",
                                    "crm_table": "CampusESPtoRNL_Staging",
                                    "crm_servername": {
                                        "value": "@pipeline().parameters.crm_servername",
                                        "type": "Expression"
                                    },
                                    "crm_dbname": {
                                        "value": "@pipeline().parameters.crm_dbname",
                                        "type": "Expression"
                                    },
                                    "crm_username": {
                                        "value": "@pipeline().parameters.crm_username",
                                        "type": "Expression"
                                    },
                                    "vaulturl": {
                                        "value": "@pipeline().parameters.vault_url",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ds_pi_synapse_campusesp",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "po_application_campusesp_tmp",
                                    "schemaname": "etl"
                                }
                            }
                        ]
                    },
                    {
                        "name": "application upsert in crm",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "TransformData",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "DynamicsCrmSink",
                                "writeBatchSize": 10,
                                "writeBehavior": "upsert",
                                "ignoreNullValues": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "po_applicationid",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_applicationid",
                                            "type": "Guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "contactid",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_contactid",
                                            "type": "Guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "dpo_date_inq",
                                            "type": "DateTime",
                                            "physicalType": "date"
                                        },
                                        "sink": {
                                            "name": "po_date_inq",
                                            "type": "DateTime"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "po_flag_inq",
                                            "type": "Boolean",
                                            "physicalType": "bit"
                                        },
                                        "sink": {
                                            "name": "po_flag_inq",
                                            "type": "Boolean"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "po_lookupId",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_lookupid",
                                            "type": "Guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "SearchResponseMethod",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_searchresponsemethod",
                                            "type": "Int32"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ds_pi_synapse_campusesp",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "campusesp_lead_tmp",
                                    "schemaname": "etl"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ds_pi_entity_application21",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ]
                    },
                    {
                        "name": "application upsert in crm_1",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "TransformData",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "DynamicsCrmSink",
                                "writeBatchSize": 10,
                                "writeBehavior": "upsert",
                                "ignoreNullValues": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "po_applicationid",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_applicationid",
                                            "type": "Guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "contactid",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_contactid",
                                            "type": "Guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "dpo_date_inq",
                                            "type": "DateTime",
                                            "physicalType": "date"
                                        },
                                        "sink": {
                                            "name": "po_date_inq",
                                            "type": "DateTime"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "po_flag_inq",
                                            "type": "Boolean",
                                            "physicalType": "bit"
                                        },
                                        "sink": {
                                            "name": "po_flag_inq",
                                            "type": "Boolean"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "po_lookupId",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_lookupid",
                                            "type": "Guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "SearchResponseMethod",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_searchresponsemethod",
                                            "type": "Int32"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ds_pi_synapse_campusesp",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "campusesp_search_tmp",
                                    "schemaname": "etl"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ds_pi_entity_application21",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ]
                    },
                    {
                        "name": "application upsert in crm_3",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "TransformData",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "sqlReaderQuery": {
                                    "value": "select distinct lk.po_name,lk.po_lookupId as lk_id,tmp.* from  [etl].[campusesp_lead_dt_tmp] tmp\ninner join dbo.po_lookupbase lk\non tmp.EntryTerm=lk.po_name",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "DynamicsCrmSink",
                                "writeBatchSize": 10,
                                "writeBehavior": "upsert",
                                "ignoreNullValues": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "po_applicationid",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_applicationid",
                                            "type": "Guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "contactid",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_contactid",
                                            "type": "Guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "dpo_date_inq",
                                            "type": "DateTime",
                                            "physicalType": "datetime"
                                        },
                                        "sink": {
                                            "name": "po_date_inq",
                                            "type": "DateTime"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "dpo_flag_inq",
                                            "type": "Boolean",
                                            "physicalType": "bit"
                                        },
                                        "sink": {
                                            "name": "po_flag_inq",
                                            "type": "Boolean"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "lk_id",
                                            "type": "String",
                                            "physicalType": "char"
                                        },
                                        "sink": {
                                            "name": "po_lookupid",
                                            "type": "Guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ResponseMethod",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_searchresponsemethod",
                                            "type": "Int32"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ds_pi_synapse_campusesp",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "campusesp_lead_dt_tmp",
                                    "schemaname": "etl"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ds_pi_entity_application21",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ]
                    },
                    {
                        "name": "application upsert in crm_2",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "TransformData",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "DynamicsCrmSink",
                                "writeBatchSize": 10,
                                "writeBehavior": "upsert",
                                "ignoreNullValues": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "po_applicationid",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_applicationid",
                                            "type": "Guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "contactid",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_contactid",
                                            "type": "Guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "dpo_flag_inq",
                                            "type": "Boolean",
                                            "physicalType": "bit"
                                        },
                                        "sink": {
                                            "name": "po_flag_inq",
                                            "type": "Boolean"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "dpo_date_inq",
                                            "type": "DateTime",
                                            "physicalType": "datetime"
                                        },
                                        "sink": {
                                            "name": "po_date_inq",
                                            "type": "DateTime"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ds_pi_synapse_campusesp",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "campusesp_noupdate_tmp",
                                    "schemaname": "etl"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ds_pi_entity_application21",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ]
                    },
                    {
                        "name": "application upsert in crm_4",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "TransformData",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "sqlReaderQuery": {
                                    "value": "select distinct lk.po_name,lk.po_lookupId as lk_id,tmp.* from  [etl].[campusesp_search_dt_tmp] tmp\ninner join dbo.po_lookupbase lk\non tmp.EntryTerm=lk.po_name",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "DynamicsCrmSink",
                                "writeBatchSize": 10,
                                "writeBehavior": "upsert",
                                "ignoreNullValues": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "po_applicationid",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_applicationid",
                                            "type": "Guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "contactid",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_contactid",
                                            "type": "Guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "dpo_date_inq",
                                            "type": "DateTime",
                                            "physicalType": "datetime"
                                        },
                                        "sink": {
                                            "name": "po_date_inq",
                                            "type": "DateTime"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "dpo_flag_inq",
                                            "type": "Boolean",
                                            "physicalType": "bit"
                                        },
                                        "sink": {
                                            "name": "po_flag_inq",
                                            "type": "Boolean"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "lk_id",
                                            "type": "String",
                                            "physicalType": "char"
                                        },
                                        "sink": {
                                            "name": "po_lookupid",
                                            "type": "Guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ResponseMethod",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_searchresponsemethod",
                                            "type": "Int32"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ds_pi_synapse_campusesp",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "campusesp_search_dt_tmp",
                                    "schemaname": "etl"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ds_pi_entity_application21",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ]
                    },
                    {
                        "name": "application upsert in crm_5",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "TransformData",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "sqlReaderQuery": {
                                    "value": "select distinct lk.po_name,lk.po_lookupId as lk_id,tmp.* from  [etl].[campusesp_noupdate_dt_tmp] tmp\ninner join dbo.po_lookupbase lk\non tmp.EntryTerm=lk.po_name",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "DynamicsCrmSink",
                                "writeBatchSize": 10,
                                "writeBehavior": "upsert",
                                "ignoreNullValues": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "po_applicationid",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_applicationid",
                                            "type": "Guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "contactid",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_contactid",
                                            "type": "Guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "dpo_date_inq",
                                            "type": "DateTime",
                                            "physicalType": "datetime"
                                        },
                                        "sink": {
                                            "name": "po_date_inq",
                                            "type": "DateTime"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "dpo_flag_inq",
                                            "type": "Boolean",
                                            "physicalType": "bit"
                                        },
                                        "sink": {
                                            "name": "po_flag_inq",
                                            "type": "Boolean"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "lk_id",
                                            "type": "String",
                                            "physicalType": "char"
                                        },
                                        "sink": {
                                            "name": "po_lookupid",
                                            "type": "Guid"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ds_pi_synapse_campusesp",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "campusesp_noupdate_dt_tmp",
                                    "schemaname": "etl"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ds_pi_entity_application21",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "windowStart": {
                        "type": "string"
                    },
                    "crm_servername": {
                        "type": "string"
                    },
                    "crm_dbname": {
                        "type": "string"
                    },
                    "crm_username": {
                        "type": "string"
                    },
                    "vault_url": {
                        "type": "string"
                    },
                    "storageaccountname": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "partner-Integration"
                },
                "annotations": [],
                "lastPublishTime": "2022-11-11T05:44:10Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-campusesp-application-upsert_1')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "TransformData",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [
                            {
                                "activity": "Fetch Application Record",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "1.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "df_campusesp_application_upsert",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "GetFetchedApplicationData": {
                                        "tablename": "po_application_campusesp_tmp",
                                        "schemaname": "etl"
                                    },
                                    "sinktemp7": {
                                        "tablename": "campusesp_noupdate_tmp",
                                        "schemaname": "etl"
                                    },
                                    "sinktemp5": {
                                        "tablename": "campusesp_lead_tmp",
                                        "schemaname": "etl"
                                    },
                                    "sinktemp6": {
                                        "tablename": "campusesp_search_tmp",
                                        "schemaname": "etl"
                                    },
                                    "sinktemp8": {
                                        "tablename": "campusesp_lead_dt_tmp",
                                        "schemaname": "etl"
                                    },
                                    "sinktemp9": {
                                        "tablename": "campusesp_search_dt_tmp",
                                        "schemaname": "etl"
                                    },
                                    "sinktemp10": {
                                        "tablename": "campusesp_noupdate_dt_tmp",
                                        "schemaname": "etl"
                                    }
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    },
                    {
                        "name": "Fetch Application Record",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlServerSource",
                                "sqlReaderQuery": {
                                    "value": "SELECT distinct \nab.po_applicationid,\na.user_id,\nab.po_SearchResponseMethod,\nab.po_lookupid,\nab.po_flag_inq,\nab.po_date_inq,\ncb.contactid,\ncb.CreatedOn \nFROM [dbo].[CampusESPtoRNL_Staging] a \nleft join dbo.contactbase cb on \ncb.po_contactnumber COLLATE DATABASE_DEFAULT=a.user_id COLLATE DATABASE_DEFAULT\nleft join dbo.po_applicationBase ab on\nab.po_contactid=cb.contactid\nwhere a.user_id IS NOT NULL and a.student_id IS NULL and a.student_first_name IS NULL",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": "truncate table [etl].[po_application_campusesp_tmp]",
                                "writeBehavior": "Insert",
                                "sqlWriterUseTableLock": false,
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ds_appboost_crm",
                                "type": "DatasetReference",
                                "parameters": {
                                    "crm_schema": "dbo",
                                    "crm_table": "CampusESPtoRNL_Staging",
                                    "crm_servername": {
                                        "value": "@pipeline().parameters.crm_servername",
                                        "type": "Expression"
                                    },
                                    "crm_dbname": {
                                        "value": "@pipeline().parameters.crm_dbname",
                                        "type": "Expression"
                                    },
                                    "crm_username": {
                                        "value": "@pipeline().parameters.crm_username",
                                        "type": "Expression"
                                    },
                                    "vaulturl": {
                                        "value": "@pipeline().parameters.vault_url",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ds_pi_synapse_campusesp",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "po_application_campusesp_tmp",
                                    "schemaname": "etl"
                                }
                            }
                        ]
                    },
                    {
                        "name": "application upsert in crm",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "TransformData",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "DynamicsCrmSink",
                                "writeBatchSize": 10,
                                "writeBehavior": "upsert",
                                "ignoreNullValues": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "po_applicationid",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_applicationid",
                                            "type": "Guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "contactid",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_contactid",
                                            "type": "Guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "dpo_date_inq",
                                            "type": "DateTime",
                                            "physicalType": "date"
                                        },
                                        "sink": {
                                            "name": "po_date_inq",
                                            "type": "DateTime"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "po_flag_inq",
                                            "type": "Boolean",
                                            "physicalType": "bit"
                                        },
                                        "sink": {
                                            "name": "po_flag_inq",
                                            "type": "Boolean"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "po_lookupId",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_lookupid",
                                            "type": "Guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "SearchResponseMethod",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_searchresponsemethod",
                                            "type": "Int32"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ds_pi_synapse_campusesp",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "campusesp_lead_tmp",
                                    "schemaname": "etl"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ds_pi_entity_application21",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ]
                    },
                    {
                        "name": "application upsert in crm_1",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "TransformData",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "DynamicsCrmSink",
                                "writeBatchSize": 10,
                                "writeBehavior": "upsert",
                                "ignoreNullValues": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "po_applicationid",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_applicationid",
                                            "type": "Guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "contactid",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_contactid",
                                            "type": "Guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "dpo_date_inq",
                                            "type": "DateTime",
                                            "physicalType": "date"
                                        },
                                        "sink": {
                                            "name": "po_date_inq",
                                            "type": "DateTime"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "po_flag_inq",
                                            "type": "Boolean",
                                            "physicalType": "bit"
                                        },
                                        "sink": {
                                            "name": "po_flag_inq",
                                            "type": "Boolean"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "po_lookupId",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_lookupid",
                                            "type": "Guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "SearchResponseMethod",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_searchresponsemethod",
                                            "type": "Int32"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ds_pi_synapse_campusesp",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "campusesp_search_tmp",
                                    "schemaname": "etl"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ds_pi_entity_application21",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ]
                    },
                    {
                        "name": "application upsert in crm_3",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "TransformData",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "sqlReaderQuery": {
                                    "value": "select distinct lk.po_name,lk.po_lookupId as lk_id,tmp.* from  [etl].[campusesp_lead_dt_tmp] tmp\ninner join dbo.po_lookupbase lk\non tmp.EntryTerm=lk.po_name",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "DynamicsCrmSink",
                                "writeBatchSize": 10,
                                "writeBehavior": "upsert",
                                "ignoreNullValues": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "po_applicationid",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_applicationid",
                                            "type": "Guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "contactid",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_contactid",
                                            "type": "Guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "dpo_date_inq",
                                            "type": "DateTime",
                                            "physicalType": "datetime"
                                        },
                                        "sink": {
                                            "name": "po_date_inq",
                                            "type": "DateTime"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "dpo_flag_inq",
                                            "type": "Boolean",
                                            "physicalType": "bit"
                                        },
                                        "sink": {
                                            "name": "po_flag_inq",
                                            "type": "Boolean"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "lk_id",
                                            "type": "String",
                                            "physicalType": "char"
                                        },
                                        "sink": {
                                            "name": "po_lookupid",
                                            "type": "Guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ResponseMethod",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_searchresponsemethod",
                                            "type": "Int32"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ds_pi_synapse_campusesp",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "campusesp_lead_dt_tmp",
                                    "schemaname": "etl"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ds_pi_entity_application21",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ]
                    },
                    {
                        "name": "application upsert in crm_2",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "TransformData",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "DynamicsCrmSink",
                                "writeBatchSize": 10,
                                "writeBehavior": "upsert",
                                "ignoreNullValues": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "po_applicationid",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_applicationid",
                                            "type": "Guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "contactid",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_contactid",
                                            "type": "Guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "dpo_flag_inq",
                                            "type": "Boolean",
                                            "physicalType": "bit"
                                        },
                                        "sink": {
                                            "name": "po_flag_inq",
                                            "type": "Boolean"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "dpo_date_inq",
                                            "type": "DateTime",
                                            "physicalType": "datetime"
                                        },
                                        "sink": {
                                            "name": "po_date_inq",
                                            "type": "DateTime"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ds_pi_synapse_campusesp",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "campusesp_noupdate_tmp",
                                    "schemaname": "etl"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ds_pi_entity_application21",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ]
                    },
                    {
                        "name": "application upsert in crm_4",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "TransformData",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "sqlReaderQuery": {
                                    "value": "select distinct lk.po_name,lk.po_lookupId as lk_id,tmp.* from  [etl].[campusesp_search_dt_tmp] tmp\ninner join dbo.po_lookupbase lk\non tmp.EntryTerm=lk.po_name",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "DynamicsCrmSink",
                                "writeBatchSize": 10,
                                "writeBehavior": "upsert",
                                "ignoreNullValues": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "po_applicationid",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_applicationid",
                                            "type": "Guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "contactid",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_contactid",
                                            "type": "Guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "dpo_date_inq",
                                            "type": "DateTime",
                                            "physicalType": "datetime"
                                        },
                                        "sink": {
                                            "name": "po_date_inq",
                                            "type": "DateTime"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "dpo_flag_inq",
                                            "type": "Boolean",
                                            "physicalType": "bit"
                                        },
                                        "sink": {
                                            "name": "po_flag_inq",
                                            "type": "Boolean"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "lk_id",
                                            "type": "String",
                                            "physicalType": "char"
                                        },
                                        "sink": {
                                            "name": "po_lookupid",
                                            "type": "Guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ResponseMethod",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_searchresponsemethod",
                                            "type": "Int32"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ds_pi_synapse_campusesp",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "campusesp_search_dt_tmp",
                                    "schemaname": "etl"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ds_pi_entity_application21",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ]
                    },
                    {
                        "name": "application upsert in crm_5",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "TransformData",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "sqlReaderQuery": {
                                    "value": "select distinct lk.po_name,lk.po_lookupId as lk_id,tmp.* from  [etl].[campusesp_noupdate_dt_tmp] tmp\ninner join dbo.po_lookupbase lk\non tmp.EntryTerm=lk.po_name",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "DynamicsCrmSink",
                                "writeBatchSize": 10,
                                "writeBehavior": "upsert",
                                "ignoreNullValues": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "po_applicationid",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_applicationid",
                                            "type": "Guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "contactid",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_contactid",
                                            "type": "Guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "dpo_date_inq",
                                            "type": "DateTime",
                                            "physicalType": "datetime"
                                        },
                                        "sink": {
                                            "name": "po_date_inq",
                                            "type": "DateTime"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "dpo_flag_inq",
                                            "type": "Boolean",
                                            "physicalType": "bit"
                                        },
                                        "sink": {
                                            "name": "po_flag_inq",
                                            "type": "Boolean"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "lk_id",
                                            "type": "String",
                                            "physicalType": "char"
                                        },
                                        "sink": {
                                            "name": "po_lookupid",
                                            "type": "Guid"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ds_pi_synapse_campusesp",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "campusesp_noupdate_dt_tmp",
                                    "schemaname": "etl"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ds_pi_entity_application21",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "windowStart": {
                        "type": "string"
                    },
                    "crm_servername": {
                        "type": "string"
                    },
                    "crm_dbname": {
                        "type": "string"
                    },
                    "crm_username": {
                        "type": "string"
                    },
                    "vault_url": {
                        "type": "string"
                    },
                    "storageaccountname": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "partner-Integration"
                },
                "annotations": [],
                "lastPublishTime": "2022-11-11T05:47:41Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pip-zeemee-application-upsert')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "application upsert",
                "activities": [
                    {
                        "name": "src_application_zeemee_stg",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlServerSource",
                                "sqlReaderQuery": {
                                    "value": "select \ncb.ContactId,\ncb.CreatedOn,\nabb.po_SearchResponseMethod,\nabb.po_applicationid,\npo.po_lookupId,\nzs.[Entry.Term.ZM],\nzs.[Entry.Year.ZM],\nzs.[Student.Type.ZM] \nfrom dbo.ZeemeetoRNL_Staging zs \nleft join [dbo].[ContactBase]  cb (nolock)\non zs.[School.ID2]=cb.po_contactnumber\nleft join dbo.po_applicationbase abb (nolock)\non cb.contactid=abb.po_contactid \nleft join  dbo.po_lookupbase po (nolock)\non concat(zs.[Entry.Term.ZM],' ',zs.[Entry.Year.ZM]) =po.po_name\nwhere (len(ltrim(zs.[First.Name])) * len(ltrim(ZS.[Last.Name]))*len(ltrim(zs.[Phone.Number]))) IS NOT NULL",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlDWSink",
                                "preCopyScript": "truncate table [etl].[po_application_zeemee_tmp]",
                                "writeBehavior": "Insert",
                                "sqlWriterUseTableLock": false,
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ds_crm_Dynamic7",
                                "type": "DatasetReference",
                                "parameters": {
                                    "crm_schema": "dbo",
                                    "crm_table": "ZeemeetoRNL_Staging",
                                    "crm_servername": {
                                        "value": "@pipeline().parameters.crm_servername",
                                        "type": "Expression"
                                    },
                                    "crm_dbname": {
                                        "value": "@pipeline().parameters.crm_dbname",
                                        "type": "Expression"
                                    },
                                    "crm_username": {
                                        "value": "@pipeline().parameters.crm_username",
                                        "type": "Expression"
                                    },
                                    "vaulturl": {
                                        "value": "@pipeline().parameters.vault_url",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ds_pi_synapse12",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "po_application_zeemee_tmp",
                                    "schemaname": "etl",
                                    "az_synapse_em_server": {
                                        "value": "@pipeline().parameters.az_synapse_em_server",
                                        "type": "Expression"
                                    },
                                    "az_synapse_db": {
                                        "value": "@pipeline().parameters.az_synapse_db",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "application upsert in crm",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "df_zeemee_reverse_application",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "DynamicsCrmSink",
                                "writeBatchSize": 10,
                                "writeBehavior": "upsert",
                                "ignoreNullValues": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "po_applicationid",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_applicationid",
                                            "type": "Guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ContactId",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_contactid",
                                            "type": "Guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Student.Type.ZM",
                                            "type": "Int32",
                                            "physicalType": "int"
                                        },
                                        "sink": {
                                            "name": "po_entrystat",
                                            "type": "Int32"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "po_lookupId",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_lookupid",
                                            "type": "Guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ResponseMethod",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_searchresponsemethod",
                                            "type": "Int32"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ds_pi_synapse12",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "zeemee_lead_tmp",
                                    "schemaname": "etl",
                                    "az_synapse_em_server": {
                                        "value": "@pipeline().parameters.az_synapse_em_server",
                                        "type": "Expression"
                                    },
                                    "az_synapse_db": {
                                        "value": "@pipeline().parameters.az_synapse_db",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ds_pi_entity_application1",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ]
                    },
                    {
                        "name": "application upsert in crm_copy1",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "df_zeemee_reverse_application",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "DynamicsCrmSink",
                                "writeBatchSize": 10,
                                "writeBehavior": "upsert",
                                "ignoreNullValues": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "po_applicationid",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_applicationid",
                                            "type": "Guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ContactId",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_contactid",
                                            "type": "Guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Student.Type.ZM",
                                            "type": "Int32",
                                            "physicalType": "int"
                                        },
                                        "sink": {
                                            "name": "po_entrystat",
                                            "type": "Int32"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "po_lookupId",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_lookupid",
                                            "type": "Guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ResponseMethod",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_searchresponsemethod",
                                            "type": "Int32"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ds_pi_synapse12",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "zeeemee_search_tmp",
                                    "schemaname": "etl",
                                    "az_synapse_em_server": {
                                        "value": "@pipeline().parameters.az_synapse_em_server",
                                        "type": "Expression"
                                    },
                                    "az_synapse_db": {
                                        "value": "@pipeline().parameters.az_synapse_db",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ds_pi_entity_application1",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ]
                    },
                    {
                        "name": "application upsert in crm_copy2",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "df_zeemee_reverse_application",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "DynamicsCrmSink",
                                "writeBatchSize": 10,
                                "writeBehavior": "upsert",
                                "ignoreNullValues": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "po_applicationid",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_applicationid",
                                            "type": "Guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ContactId",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_contactid",
                                            "type": "Guid"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Student.Type.ZM",
                                            "type": "Int32",
                                            "physicalType": "int"
                                        },
                                        "sink": {
                                            "name": "po_entrystat",
                                            "type": "Int32"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "po_lookupId",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "po_lookupid",
                                            "type": "Guid"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ds_pi_synapse12",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "zeemee_noupdate_tmp",
                                    "schemaname": "etl",
                                    "az_synapse_em_server": {
                                        "value": "@pipeline().parameters.az_synapse_em_server",
                                        "type": "Expression"
                                    },
                                    "az_synapse_db": {
                                        "value": "@pipeline().parameters.az_synapse_db",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ds_pi_entity_application1",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ]
                    },
                    {
                        "name": "df_zeemee_reverse_application",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [
                            {
                                "activity": "src_application_zeemee_stg",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "1.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "df_zeemee_reverse_application",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "sourceapplication": {
                                        "tablename": "po_application_zeemee_tmp",
                                        "schemaname": "etl",
                                        "az_synapse_em_server": {
                                            "value": "@pipeline().parameters.az_synapse_em_server",
                                            "type": "Expression"
                                        },
                                        "az_synapse_db": {
                                            "value": "@pipeline().parameters.az_synapse_db",
                                            "type": "Expression"
                                        }
                                    },
                                    "sink2": {
                                        "tablename": "zeemee_lead_tmp",
                                        "schemaname": "etl",
                                        "az_synapse_em_server": {
                                            "value": "@pipeline().parameters.az_synapse_em_server",
                                            "type": "Expression"
                                        },
                                        "az_synapse_db": {
                                            "value": "@pipeline().parameters.az_synapse_db",
                                            "type": "Expression"
                                        }
                                    },
                                    "sink3": {
                                        "tablename": "zeeemee_search_tmp",
                                        "schemaname": "etl",
                                        "az_synapse_em_server": {
                                            "value": "@pipeline().parameters.az_synapse_em_server",
                                            "type": "Expression"
                                        },
                                        "az_synapse_db": {
                                            "value": "@pipeline().parameters.az_synapse_db",
                                            "type": "Expression"
                                        }
                                    },
                                    "sink4": {
                                        "tablename": "zeemee_noupdate_tmp",
                                        "schemaname": "etl",
                                        "az_synapse_em_server": {
                                            "value": "@pipeline().parameters.az_synapse_em_server",
                                            "type": "Expression"
                                        },
                                        "az_synapse_db": {
                                            "value": "@pipeline().parameters.az_synapse_db",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "windowStart": {
                        "type": "string"
                    },
                    "crm_servername": {
                        "type": "string"
                    },
                    "crm_dbname": {
                        "type": "string"
                    },
                    "crm_username": {
                        "type": "string"
                    },
                    "vault_url": {
                        "type": "string"
                    },
                    "storageaccountname": {
                        "type": "string"
                    },
                    "az_synapse_em_server": {
                        "type": "string"
                    },
                    "az_synapse_db": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "partner-Integration"
                },
                "annotations": [],
                "lastPublishTime": "2022-12-06T11:03:05Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/trg-dqe-staging-historical')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipeline": {
                    "pipelineReference": {
                        "referenceName": "pip-em_dqe_dia_automation_historical",
                        "type": "PipelineReference"
                    },
                    "parameters": {
                        "Purposename": "[parameters('trg-dqe-staging-historical_properties_pipeline_parameters_Purposename')]",
                        "ContainerName": "[parameters('trg-dqe-staging-historical_properties_pipeline_parameters_ContainerName')]",
                        "Audit_Type_Pipeline": "[parameters('trg-dqe-staging-historical_properties_pipeline_parameters_Audit_Type_Pipeline')]",
                        "Audit_Type_File": "[parameters('trg-dqe-staging-historical_properties_pipeline_parameters_Audit_Type_File')]",
                        "Pipeline_Start_Status": "[parameters('trg-dqe-staging-historical_properties_pipeline_parameters_Pipeline_Start_Status')]",
                        "Pipeline_Complete_Status": "[parameters('trg-dqe-staging-historical_properties_pipeline_parameters_Pipeline_Complete_Status')]",
                        "Pipeline_Error_Status": "[parameters('trg-dqe-staging-historical_properties_pipeline_parameters_Pipeline_Error_Status')]",
                        "File_Location_Status_DQE_Started": "[parameters('trg-dqe-staging-historical_properties_pipeline_parameters_File_Location_Status_DQE_Started')]",
                        "Area": "[parameters('trg-dqe-staging-historical_properties_pipeline_parameters_Area')]",
                        "InsertBy": "[parameters('trg-dqe-staging-historical_properties_pipeline_parameters_InsertBy')]",
                        "Inbound": "[parameters('trg-dqe-staging-historical_properties_pipeline_parameters_Inbound')]",
                        "File_Location_Status_DQE_Completed": "[parameters('trg-dqe-staging-historical_properties_pipeline_parameters_File_Location_Status_DQE_Completed')]",
                        "audit_schemaname": "[parameters('trg-dqe-staging-historical_properties_pipeline_parameters_audit_schemaname')]",
                        "file_metadata_table": "[parameters('trg-dqe-staging-historical_properties_pipeline_parameters_file_metadata_table')]",
                        "server_name": "[parameters('trg-dqe-staging-historical_properties_pipeline_parameters_server_name')]",
                        "database_name": "[parameters('trg-dqe-staging-historical_properties_pipeline_parameters_database_name')]",
                        "vaulturl": "[parameters('trg-dqe-staging-historical_properties_pipeline_parameters_vaulturl')]",
                        "storageaccountname": "[parameters('trg-dqe-staging-historical_properties_pipeline_parameters_storageaccountname')]",
                        "databricks_workspace_url": "[parameters('trg-dqe-staging-historical_properties_pipeline_parameters_databricks_workspace_url')]",
                        "databricks_clusterid": "[parameters('trg-dqe-staging-historical_properties_pipeline_parameters_databricks_clusterid')]",
                        "email_success_url": "[parameters('trg-dqe-staging-historical_properties_pipeline_parameters_email_success_url')]",
                        "email_fail_url": "[parameters('trg-dqe-staging-historical_properties_pipeline_parameters_email_fail_url')]"
                    }
                },
                "type": "TumblingWindowTrigger",
                "typeProperties": {
                    "frequency": "Minute",
                    "interval": 30,
                    "startTime": "2022-08-14T14:43:00Z",
                    "delay": "00:00:00",
                    "maxConcurrency": 1,
                    "retryPolicy": {
                        "intervalInSeconds": 30
                    },
                    "dependsOn": []
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/pip-em_dqe_dia_automation_historical')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/trg-historical-modeling')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Stopped",
                "pipeline": {
                    "pipelineReference": {
                        "referenceName": "pip-em-historical-dia-ds-team-modelling",
                        "type": "PipelineReference"
                    },
                    "parameters": {
                        "source_adls_location": "[parameters('trg-historical-modeling_properties_pipeline_parameters_source_adls_location')]",
                        "destination_adls_location": "[parameters('trg-historical-modeling_properties_pipeline_parameters_destination_adls_location')]",
                        "folder_list": "[parameters('trg-historical-modeling_properties_pipeline_parameters_folder_list')]",
                        "search_list": "[parameters('trg-historical-modeling_properties_pipeline_parameters_search_list')]",
                        "azure_sql_database_name": "[parameters('trg-historical-modeling_properties_pipeline_parameters_azure_sql_database_name')]",
                        "azure_sql_server_name": "[parameters('trg-historical-modeling_properties_pipeline_parameters_azure_sql_server_name')]",
                        "container": "[parameters('trg-historical-modeling_properties_pipeline_parameters_container')]",
                        "source_path": "[parameters('trg-historical-modeling_properties_pipeline_parameters_source_path')]",
                        "dest_path": "[parameters('trg-historical-modeling_properties_pipeline_parameters_dest_path')]",
                        "modeling_folder": "[parameters('trg-historical-modeling_properties_pipeline_parameters_modeling_folder')]",
                        "databricks_workspace_url": "[parameters('trg-historical-modeling_properties_pipeline_parameters_databricks_workspace_url')]",
                        "databricks_clusterid": "[parameters('trg-historical-modeling_properties_pipeline_parameters_databricks_clusterid')]",
                        "vaulturl": "[parameters('trg-historical-modeling_properties_pipeline_parameters_vaulturl')]",
                        "storageaccountname": "[parameters('trg-historical-modeling_properties_pipeline_parameters_storageaccountname')]"
                    }
                },
                "type": "TumblingWindowTrigger",
                "typeProperties": {
                    "frequency": "Hour",
                    "interval": 1,
                    "startTime": "2022-08-16T06:18:00Z",
                    "delay": "00:00:00",
                    "maxConcurrency": 1,
                    "retryPolicy": {
                        "intervalInSeconds": 30
                    },
                    "dependsOn": []
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/pip-em-historical-dia-ds-team-modelling')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/trg-crm-to-ads-powerbi-load')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "pip-master-crm-to-crmsynapse-powerbi-load",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "crm_servername": "[parameters('trg-crm-to-ads-powerbi-load_properties_pip-master-crm-to-crmsynapse-powerbi-load_parameters_crm_servername')]",
                            "crm_dbname": "[parameters('trg-crm-to-ads-powerbi-load_properties_pip-master-crm-to-crmsynapse-powerbi-load_parameters_crm_dbname')]",
                            "crm_username": "[parameters('trg-crm-to-ads-powerbi-load_properties_pip-master-crm-to-crmsynapse-powerbi-load_parameters_crm_username')]",
                            "vaulturl": "[parameters('trg-crm-to-ads-powerbi-load_properties_pip-master-crm-to-crmsynapse-powerbi-load_parameters_vaulturl')]",
                            "storageaccountname": "[parameters('trg-crm-to-ads-powerbi-load_properties_pip-master-crm-to-crmsynapse-powerbi-load_parameters_storageaccountname')]",
                            "databricks_workspace_url": "[parameters('trg-crm-to-ads-powerbi-load_properties_pip-master-crm-to-crmsynapse-powerbi-load_parameters_databricks_workspace_url')]",
                            "databricks_clusterid": "[parameters('trg-crm-to-ads-powerbi-load_properties_pip-master-crm-to-crmsynapse-powerbi-load_parameters_databricks_clusterid')]",
                            "az_sql_server_name": "[parameters('trg-crm-to-ads-powerbi-load_properties_pip-master-crm-to-crmsynapse-powerbi-load_parameters_az_sql_server_name')]",
                            "az_sql_db_name": "[parameters('trg-crm-to-ads-powerbi-load_properties_pip-master-crm-to-crmsynapse-powerbi-load_parameters_az_sql_db_name')]",
                            "az_synapse_crm_server": "[parameters('trg-crm-to-ads-powerbi-load_properties_pip-master-crm-to-crmsynapse-powerbi-load_parameters_az_synapse_crm_server')]",
                            "az_synapse_crm_db": "[parameters('trg-crm-to-ads-powerbi-load_properties_pip-master-crm-to-crmsynapse-powerbi-load_parameters_az_synapse_crm_db')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2022-09-06T11:33:00",
                        "timeZone": "Eastern Standard Time",
                        "schedule": {
                            "minutes": [
                                0
                            ],
                            "hours": [
                                21
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/pip-master-crm-to-crmsynapse-powerbi-load')]"
            ]
        }
    ]
}